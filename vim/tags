!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
/*	ftplugin/c.vim	/^inoremap  <buffer>  \/*       \/*<Space><Space>*\/<Left><Left><Left>$/;"	m
/*	ftplugin/c.vim	/^vnoremap  <buffer>  \/*      s\/*<Space><Space>*\/<Left><Left><Left><Esc>p$/;"	m
/*<CR>	ftplugin/c.vim	/^inoremap  <buffer>  \/*<CR>  \/*<CR><CR>\/<Esc>kA<Space>$/;"	m
<A-F9>	ftplugin/c.vim	/^ map  <buffer>  <silent>  <A-F9>       :call C_Compile()<CR>:call C_HlMessage()<CR>$/;"	m
<A-F9>	ftplugin/c.vim	/^imap  <buffer>  <silent>  <A-F9>  <C-C>:call C_Compile()<CR>:call C_HlMessage()<CR>$/;"	m
<C-Down>	plugin/minibufexpl.vim	/^  noremap <C-Down>  <C-W>j$/;"	m
<C-F9>	ftplugin/c.vim	/^ map  <buffer>  <silent>  <C-F9>       :call C_Run()<CR>$/;"	m
<C-F9>	ftplugin/c.vim	/^imap  <buffer>  <silent>  <C-F9>  <C-C>:call C_Run()<CR>$/;"	m
<C-F9>	ftplugin/make.vim	/^ map    <buffer>  <silent>  <C-F9>                  :call C_Make()<CR>$/;"	m
<C-F9>	ftplugin/make.vim	/^imap    <buffer>  <silent>  <C-F9>             <C-C>:call C_Make()<CR>$/;"	m
<C-H>	plugin/minibufexpl.vim	/^  noremap <C-H> <C-W>h$/;"	m
<C-J>	plugin/minibufexpl.vim	/^  noremap <C-J> <C-W>j$/;"	m
<C-K>	plugin/minibufexpl.vim	/^  noremap <C-K> <C-W>k$/;"	m
<C-L>	plugin/minibufexpl.vim	/^  noremap <C-L> <C-W>l$/;"	m
<C-Left>	plugin/minibufexpl.vim	/^  noremap <C-Left>  <C-W>h$/;"	m
<C-Right>	plugin/minibufexpl.vim	/^  noremap <C-Right> <C-W>l$/;"	m
<C-S-TAB>	plugin/minibufexpl.vim	/^  noremap <C-S-TAB> :call <SID>CycleBuffer(0)<CR>:<BS>$/;"	m
<C-S-TAB>	plugin/minibufexpl.vim	/^  noremap <C-S-TAB> <C-W>W$/;"	m
<C-TAB>	plugin/minibufexpl.vim	/^  noremap <C-TAB>   :call <SID>CycleBuffer(1)<CR>:<BS>$/;"	m
<C-TAB>	plugin/minibufexpl.vim	/^  noremap <C-TAB>   <C-W>w$/;"	m
<C-Up>	plugin/minibufexpl.vim	/^  noremap <C-Up>    <C-W>k$/;"	m
<C-j>	ftplugin/c.vim	/^  imap    <buffer>  <silent>  <C-j>    <C-R>=C_JumpCtrlJ()<CR>$/;"	m
<C-j>	ftplugin/c.vim	/^  nmap    <buffer>  <silent>  <C-j>   i<C-R>=C_JumpCtrlJ()<CR>$/;"	m
<F7><F7>c	plugin/cscope_macros.vim	/^    nmap <F7><F7>c :scs find c <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<F7><F7>d	plugin/cscope_macros.vim	/^    nmap <F7><F7>d :scs find d <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<F7><F7>e	plugin/cscope_macros.vim	/^    nmap <F7><F7>e :scs find e <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<F7><F7>f	plugin/cscope_macros.vim	/^    nmap <F7><F7>f :scs find f <C-R>=expand("<cfile>")<CR><CR>	$/;"	m
<F7><F7>g	plugin/cscope_macros.vim	/^    nmap <F7><F7>g :scs find g <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<F7><F7>i	plugin/cscope_macros.vim	/^    nmap <F7><F7>i :scs find i <C-R>=expand("<cfile>")<CR><CR>	$/;"	m
<F7><F7>s	plugin/cscope_macros.vim	/^    nmap <F7><F7>s :scs find s <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<F7><F7>t	plugin/cscope_macros.vim	/^    nmap <F7><F7>t :scs find t <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<F7>c	plugin/cscope_macros.vim	/^    nmap <F7>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<F7>d	plugin/cscope_macros.vim	/^    nmap <F7>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<F7>f	plugin/cscope_macros.vim	/^    nmap <F7>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>	$/;"	m
<F7>g	plugin/cscope_macros.vim	/^    nmap <F7>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<F7>i	plugin/cscope_macros.vim	/^    nmap <F7>i :vert scs find i <C-R>=expand("<cfile>")<CR><CR>	$/;"	m
<F7>s	plugin/cscope_macros.vim	/^    nmap <F7>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<F7>t	plugin/cscope_macros.vim	/^    nmap <F7>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<F9>	ftplugin/c.vim	/^ map  <buffer>  <silent>    <F9>       :call C_Link()<CR>:call C_HlMessage()<CR>$/;"	m
<F9>	ftplugin/c.vim	/^imap  <buffer>  <silent>    <F9>  <C-C>:call C_Link()<CR>:call C_HlMessage()<CR>$/;"	m
<Leader>be	plugin/bufexplorer.vim	/^nmap <script> <silent> <unique> <Leader>be :BufExplorer<CR>$/;"	m
<Leader>bs	plugin/bufexplorer.vim	/^nmap <script> <silent> <unique> <Leader>bs :BufExplorerHorizontalSplit<CR>$/;"	m
<Leader>bv	plugin/bufexplorer.vim	/^nmap <script> <silent> <unique> <Leader>bv :BufExplorerVerticalSplit<CR>$/;"	m
<Leader>caL	plugin/calendar.vim	/^  nmap <unique> <Leader>caL <Plug>CalendarH$/;"	m
<Leader>cal	plugin/calendar.vim	/^  nmap <unique> <Leader>cal <Plug>CalendarV$/;"	m
<Leader>ih	plugin/a.vim	/^imap <Leader>ih <ESC>:IHS<CR>$/;"	m
<Leader>ih	plugin/a.vim	/^nmap <Leader>ih :IHS<CR>$/;"	m
<Leader>ihn	plugin/a.vim	/^imap <Leader>ihn <ESC>:IHN<CR>$/;"	m
<Leader>ihn	plugin/a.vim	/^nmap <Leader>ihn :IHN<CR>$/;"	m
<Leader>is	plugin/a.vim	/^imap <Leader>is <ESC>:IHS<CR>:A<CR>$/;"	m
<Leader>is	plugin/a.vim	/^nmap <Leader>is :IHS<CR>:A<CR>$/;"	m
<Leader>mbc	plugin/minibufexpl.vim	/^  map <unique> <Leader>mbc <Plug>CMiniBufExplorer$/;"	m
<Leader>mbe	plugin/minibufexpl.vim	/^  map <unique> <Leader>mbe <Plug>MiniBufExplorer$/;"	m
<Leader>mbt	plugin/minibufexpl.vim	/^  map <unique> <Leader>mbt <Plug>TMiniBufExplorer$/;"	m
<Leader>mbu	plugin/minibufexpl.vim	/^  map <unique> <Leader>mbu <Plug>UMiniBufExplorer$/;"	m
<LocalLeader>+"	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+"         :call C_InsertTemplate("cpp.cout-operator")<CR>$/;"	m
<LocalLeader>+"	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+"    <Esc>:call C_InsertTemplate("cpp.cout-operator")<CR>$/;"	m
<LocalLeader>+ai	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+ai        :call C_InsertTemplate("cpp.accessor-implementation")<CR>$/;"	m
<LocalLeader>+ai	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+ai   <Esc>:call C_InsertTemplate("cpp.accessor-implementation")<CR>$/;"	m
<LocalLeader>+c	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+c         :call C_InsertTemplate("cpp.class-definition")<CR>$/;"	m
<LocalLeader>+c	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+c    <Esc>:call C_InsertTemplate("cpp.class-definition")<CR>$/;"	m
<LocalLeader>+c.	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+c.        :call C_InsertTemplate("cpp.catch-points")<CR>$/;"	m
<LocalLeader>+c.	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+c.   <Esc>:call C_InsertTemplate("cpp.catch-points")<CR>$/;"	m
<LocalLeader>+c.	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>+c.   <Esc>:call C_InsertTemplate("cpp.catch-points", "v")<CR>$/;"	m
<LocalLeader>+ca	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+ca        :call C_InsertTemplate("cpp.catch")<CR>$/;"	m
<LocalLeader>+ca	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+ca   <Esc>:call C_InsertTemplate("cpp.catch")<CR>$/;"	m
<LocalLeader>+ca	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>+ca   <Esc>:call C_InsertTemplate("cpp.catch", "v")<CR>$/;"	m
<LocalLeader>+ci	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+ci        :call C_InsertTemplate("cpp.class-implementation")<CR>$/;"	m
<LocalLeader>+ci	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+ci   <Esc>:call C_InsertTemplate("cpp.class-implementation")<CR>$/;"	m
<LocalLeader>+cn	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+cn        :call C_InsertTemplate("cpp.class-using-new-definition")<CR>$/;"	m
<LocalLeader>+cn	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+cn   <Esc>:call C_InsertTemplate("cpp.class-using-new-definition")<CR>$/;"	m
<LocalLeader>+cni	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+cni       :call C_InsertTemplate("cpp.class-using-new-implementation")<CR>$/;"	m
<LocalLeader>+cni	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+cni  <Esc>:call C_InsertTemplate("cpp.class-using-new-implementation")<CR>$/;"	m
<LocalLeader>+co	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+co        :call C_InsertTemplate("cpp.cout")<CR>$/;"	m
<LocalLeader>+co	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+co   <Esc>:call C_InsertTemplate("cpp.cout")<CR>$/;"	m
<LocalLeader>+ec	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+ec        :call C_InsertTemplate("cpp.error-class")<CR>$/;"	m
<LocalLeader>+ec	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+ec   <Esc>:call C_InsertTemplate("cpp.error-class")<CR>$/;"	m
<LocalLeader>+mi	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+mi        :call C_InsertTemplate("cpp.method-implementation")<CR>$/;"	m
<LocalLeader>+mi	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+mi   <Esc>:call C_InsertTemplate("cpp.method-implementation")<CR>$/;"	m
<LocalLeader>+pc	ftplugin/c.vim	/^ noremap    <buffer>  <LocalLeader>+pc                 :IncludeCppCLibrary<Space>$/;"	m
<LocalLeader>+pc	ftplugin/c.vim	/^inoremap    <buffer>  <LocalLeader>+pc            <Esc>:IncludeCppC9Library<Space>$/;"	m
<LocalLeader>+ps	ftplugin/c.vim	/^ noremap    <buffer>  <LocalLeader>+ps                 :IncludeCppLibrary<Space>$/;"	m
<LocalLeader>+ps	ftplugin/c.vim	/^inoremap    <buffer>  <LocalLeader>+ps            <Esc>:IncludeCppLibrary<Space>$/;"	m
<LocalLeader>+tai	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tai       :call C_InsertTemplate("cpp.template-accessor-implementation")<CR>$/;"	m
<LocalLeader>+tai	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tai  <Esc>:call C_InsertTemplate("cpp.template-accessor-implementation")<CR>$/;"	m
<LocalLeader>+tc	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tc        :call C_InsertTemplate("cpp.template-class-definition")<CR>$/;"	m
<LocalLeader>+tc	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tc   <Esc>:call C_InsertTemplate("cpp.template-class-definition")<CR>$/;"	m
<LocalLeader>+tci	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tci       :call C_InsertTemplate("cpp.template-class-implementation")<CR>$/;"	m
<LocalLeader>+tci	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tci  <Esc>:call C_InsertTemplate("cpp.template-class-implementation")<CR>$/;"	m
<LocalLeader>+tcn	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tcn       :call C_InsertTemplate("cpp.template-class-using-new-definition")<CR>$/;"	m
<LocalLeader>+tcn	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tcn  <Esc>:call C_InsertTemplate("cpp.template-class-using-new-definition")<CR>$/;"	m
<LocalLeader>+tcni	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tcni      :call C_InsertTemplate("cpp.template-class-using-new-implementation")<CR>$/;"	m
<LocalLeader>+tcni	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tcni <Esc>:call C_InsertTemplate("cpp.template-class-using-new-implementation")<CR>$/;"	m
<LocalLeader>+tf	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tf        :call C_InsertTemplate("cpp.template-function")<CR>$/;"	m
<LocalLeader>+tf	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tf   <Esc>:call C_InsertTemplate("cpp.template-function")<CR>$/;"	m
<LocalLeader>+tmi	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tmi       :call C_InsertTemplate("cpp.template-method-implementation")<CR>$/;"	m
<LocalLeader>+tmi	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tmi  <Esc>:call C_InsertTemplate("cpp.template-method-implementation")<CR>$/;"	m
<LocalLeader>+tr	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tr        :call C_InsertTemplate("cpp.try-catch")<CR>$/;"	m
<LocalLeader>+tr	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tr   <Esc>:call C_InsertTemplate("cpp.try-catch")<CR>$/;"	m
<LocalLeader>+tr	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>+tr   <Esc>:call C_InsertTemplate("cpp.try-catch", "v")<CR>$/;"	m
<LocalLeader>c*	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>c*         :call C_CodeToCommentC()<CR>:nohlsearch<CR>j$/;"	m
<LocalLeader>c*	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>c*         :call C_CodeToCommentC()<CR>:nohlsearch<CR>j$/;"	m
<LocalLeader>cc	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cc         :call C_CodeToCommentCpp()<CR>:nohlsearch<CR>j$/;"	m
<LocalLeader>cc	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>cc         :call C_CodeToCommentCpp()<CR>:nohlsearch<CR>j$/;"	m
<LocalLeader>ccl	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ccl        :call C_InsertTemplate("comment.class")<CR>$/;"	m
<LocalLeader>ccl	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ccl   <Esc>:call C_InsertTemplate("comment.class")<CR>$/;"	m
<LocalLeader>ccs	ftplugin/c.vim	/^ noremap    <buffer>            <LocalLeader>ccs   <Esc>:CFileSection<Space>$/;"	m
<LocalLeader>ccs	ftplugin/c.vim	/^inoremap    <buffer>            <LocalLeader>ccs   <Esc>:CFileSection<Space>$/;"	m
<LocalLeader>cd	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cd    <Esc>:call C_InsertDateAndTime('d')<CR>$/;"	m
<LocalLeader>cd	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cd    <Esc>:call C_InsertDateAndTime('d')<CR>a$/;"	m
<LocalLeader>cd	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>cd   s<Esc>:call C_InsertDateAndTime('d')<CR>a$/;"	m
<LocalLeader>cfdh	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cfdh       :call C_InsertTemplate("comment.file-description-header")<CR>$/;"	m
<LocalLeader>cfdh	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cfdh  <Esc>:call C_InsertTemplate("comment.file-description-header")<CR>$/;"	m
<LocalLeader>cfdi	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cfdi       :call C_InsertTemplate("comment.file-description")<CR>$/;"	m
<LocalLeader>cfdi	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cfdi  <Esc>:call C_InsertTemplate("comment.file-description")<CR>$/;"	m
<LocalLeader>cfr	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cfr        :call C_InsertTemplate("comment.frame")<CR>$/;"	m
<LocalLeader>cfr	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cfr   <Esc>:call C_InsertTemplate("comment.frame")<CR>$/;"	m
<LocalLeader>cfu	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cfu        :call C_InsertTemplate("comment.function")<CR>$/;"	m
<LocalLeader>cfu	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cfu   <Esc>:call C_InsertTemplate("comment.function")<CR>$/;"	m
<LocalLeader>chs	ftplugin/c.vim	/^ noremap    <buffer>            <LocalLeader>chs   <Esc>:HFileSection<Space>$/;"	m
<LocalLeader>chs	ftplugin/c.vim	/^inoremap    <buffer>            <LocalLeader>chs   <Esc>:HFileSection<Space>$/;"	m
<LocalLeader>cj	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cj    <Esc>:call C_AdjustLineEndComm()<CR>a$/;"	m
<LocalLeader>cj	ftplugin/c.vim	/^nnoremap    <buffer>  <silent>  <LocalLeader>cj         :call C_AdjustLineEndComm()<CR>$/;"	m
<LocalLeader>cj	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>cj         :call C_AdjustLineEndComm()<CR>$/;"	m
<LocalLeader>ckc	ftplugin/c.vim	/^ noremap    <buffer>            <LocalLeader>ckc   <Esc>:KeywordComment<Space>$/;"	m
<LocalLeader>ckc	ftplugin/c.vim	/^inoremap    <buffer>            <LocalLeader>ckc   <Esc>:KeywordComment<Space>$/;"	m
<LocalLeader>cl	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cl         :call C_EndOfLineComment()<CR>$/;"	m
<LocalLeader>cl	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cl    <Esc>:call C_EndOfLineComment()<CR>$/;"	m
<LocalLeader>cl	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>cl         :call C_EndOfLineComment()<CR>$/;"	m
<LocalLeader>cme	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cme        :call C_InsertTemplate("comment.method")<CR>$/;"	m
<LocalLeader>cme	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cme   <Esc>:call C_InsertTemplate("comment.method")<CR>$/;"	m
<LocalLeader>co	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>co         :call C_CommentToCode()<CR>:nohlsearch<CR>$/;"	m
<LocalLeader>co	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>co         :call C_CommentToCode()<CR>:nohlsearch<CR>$/;"	m
<LocalLeader>cs	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cs         :call C_GetLineEndCommCol()<CR>$/;"	m
<LocalLeader>csc	ftplugin/c.vim	/^ noremap    <buffer>            <LocalLeader>csc   <Esc>:SpecialComment<Space>$/;"	m
<LocalLeader>csc	ftplugin/c.vim	/^inoremap    <buffer>            <LocalLeader>csc   <Esc>:SpecialComment<Space>$/;"	m
<LocalLeader>ct	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ct    <Esc>:call C_InsertDateAndTime('dt')<CR>$/;"	m
<LocalLeader>ct	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ct    <Esc>:call C_InsertDateAndTime('dt')<CR>a$/;"	m
<LocalLeader>ct	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>ct   s<Esc>:call C_InsertDateAndTime('dt')<CR>a$/;"	m
<LocalLeader>cx	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cx         :call C_CommentToggle( )<CR>$/;"	m
<LocalLeader>cx	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cx    <Esc>:call C_CommentToggle( )<CR>$/;"	m
<LocalLeader>cx	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>cx         :call C_CommentToggle( )<CR>$/;"	m
<LocalLeader>hm	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>hm         :call C_Help("m")<CR>$/;"	m
<LocalLeader>hm	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>hm    <C-C>:call C_Help("m")<CR>$/;"	m
<LocalLeader>hp	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>hp         :call C_HelpCsupport()<CR>$/;"	m
<LocalLeader>hp	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>hp    <C-C>:call C_HelpCsupport()<CR>$/;"	m
<LocalLeader>i0	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>i0         :call C_CodeFor("up"  )<CR>$/;"	m
<LocalLeader>i0	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>i0    <Esc>:call C_CodeFor("up"  )<CR>i$/;"	m
<LocalLeader>i0	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>i0         :call C_CodeFor("up"  )<CR>$/;"	m
<LocalLeader>ias	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ias        :call C_InsertTemplate("idioms.assert")<CR>$/;"	m
<LocalLeader>ias	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ias   <Esc>:call C_InsertTemplate("idioms.assert")<CR>$/;"	m
<LocalLeader>ias	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>ias   <Esc>:call C_InsertTemplate("idioms.assert", "v")<CR>$/;"	m
<LocalLeader>ica	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ica        :call C_InsertTemplate("idioms.calloc")<CR>$/;"	m
<LocalLeader>ica	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ica   <Esc>:call C_InsertTemplate("idioms.calloc")<CR>$/;"	m
<LocalLeader>ie	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ie         :call C_InsertTemplate("idioms.enum")<CR>$/;"	m
<LocalLeader>ie	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ie    <Esc>:call C_InsertTemplate("idioms.enum")<CR>$/;"	m
<LocalLeader>ie	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>ie    <Esc>:call C_InsertTemplate("idioms.enum"  , "v")<CR>$/;"	m
<LocalLeader>if	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>if         :call C_InsertTemplate("idioms.function")<CR>$/;"	m
<LocalLeader>if	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>if    <Esc>:call C_InsertTemplate("idioms.function")<CR>$/;"	m
<LocalLeader>if	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>if    <Esc>:call C_InsertTemplate("idioms.function", "v")<CR>$/;"	m
<LocalLeader>ifp	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ifp        :call C_InsertTemplate("idioms.fprintf")<CR>$/;"	m
<LocalLeader>ifp	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ifp   <Esc>:call C_InsertTemplate("idioms.fprintf")<CR>$/;"	m
<LocalLeader>ifs	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ifs        :call C_InsertTemplate("idioms.fscanf")<CR>$/;"	m
<LocalLeader>ifs	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ifs   <Esc>:call C_InsertTemplate("idioms.fscanf")<CR>$/;"	m
<LocalLeader>ii	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ii         :call C_InsertTemplate("idioms.open-input-file")<CR>$/;"	m
<LocalLeader>ii	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ii    <Esc>:call C_InsertTemplate("idioms.open-input-file")<CR>$/;"	m
<LocalLeader>ii	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>ii    <Esc>:call C_InsertTemplate("idioms.open-input-file", "v")<CR>$/;"	m
<LocalLeader>im	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>im         :call C_InsertTemplate("idioms.main")<CR>$/;"	m
<LocalLeader>im	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>im    <Esc>:call C_InsertTemplate("idioms.main")<CR>$/;"	m
<LocalLeader>im	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>im    <Esc>:call C_InsertTemplate("idioms.main", "v")<CR>$/;"	m
<LocalLeader>ima	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ima        :call C_InsertTemplate("idioms.malloc")<CR>$/;"	m
<LocalLeader>ima	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ima   <Esc>:call C_InsertTemplate("idioms.malloc")<CR>$/;"	m
<LocalLeader>in	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>in         :call C_CodeFor("down")<CR>$/;"	m
<LocalLeader>in	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>in    <Esc>:call C_CodeFor("down")<CR>i$/;"	m
<LocalLeader>in	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>in         :call C_CodeFor("down")<CR>$/;"	m
<LocalLeader>io	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>io         :call C_InsertTemplate("idioms.open-output-file")<CR>$/;"	m
<LocalLeader>io	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>io    <Esc>:call C_InsertTemplate("idioms.open-output-file")<CR>$/;"	m
<LocalLeader>io	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>io    <Esc>:call C_InsertTemplate("idioms.open-output-file", "v")<CR>$/;"	m
<LocalLeader>ip	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ip         :call C_InsertTemplate("idioms.printf")<CR>$/;"	m
<LocalLeader>ip	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ip    <Esc>:call C_InsertTemplate("idioms.printf")<CR>$/;"	m
<LocalLeader>ire	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ire        :call C_InsertTemplate("idioms.realloc")<CR>$/;"	m
<LocalLeader>ire	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ire   <Esc>:call C_InsertTemplate("idioms.realloc")<CR>$/;"	m
<LocalLeader>is	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>is         :call C_InsertTemplate("idioms.struct")<CR>$/;"	m
<LocalLeader>is	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>is    <Esc>:call C_InsertTemplate("idioms.struct")<CR>$/;"	m
<LocalLeader>is	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>is    <Esc>:call C_InsertTemplate("idioms.struct", "v")<CR>$/;"	m
<LocalLeader>isc	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>isc        :call C_InsertTemplate("idioms.scanf")<CR>$/;"	m
<LocalLeader>isc	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>isc   <Esc>:call C_InsertTemplate("idioms.scanf")<CR>$/;"	m
<LocalLeader>isf	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>isf        :call C_InsertTemplate("idioms.function-static")<CR>$/;"	m
<LocalLeader>isf	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>isf   <Esc>:call C_InsertTemplate("idioms.function-static")<CR>$/;"	m
<LocalLeader>isf	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>isf   <Esc>:call C_InsertTemplate("idioms.function-static", "v")<CR>$/;"	m
<LocalLeader>isi	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>isi        :call C_InsertTemplate("idioms.sizeof")<CR>$/;"	m
<LocalLeader>isi	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>isi   <Esc>:call C_InsertTemplate("idioms.sizeof")<CR>$/;"	m
<LocalLeader>isi	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>isi   <Esc>:call C_InsertTemplate("idioms.sizeof", "v")<CR>$/;"	m
<LocalLeader>iu	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>iu         :call C_InsertTemplate("idioms.union")<CR>$/;"	m
<LocalLeader>iu	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>iu    <Esc>:call C_InsertTemplate("idioms.union")<CR>$/;"	m
<LocalLeader>iu	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>iu    <Esc>:call C_InsertTemplate("idioms.union" , "v")<CR>$/;"	m
<LocalLeader>nc	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>nc         :call C_ProtoClear()<CR>$/;"	m
<LocalLeader>nc	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>nc    <Esc>:call C_ProtoClear()<CR>$/;"	m
<LocalLeader>ne	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ne         :call C_CodeSnippet("e")<CR>$/;"	m
<LocalLeader>ne	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ne    <Esc>:call C_CodeSnippet("e")<CR>$/;"	m
<LocalLeader>nf	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>nf        :call C_ProtoPick("function")<CR>$/;"	m
<LocalLeader>nf	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>nf   <Esc>:call C_ProtoPick("function")<CR>$/;"	m
<LocalLeader>nf	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>nf        :call C_ProtoPick("function")<CR>$/;"	m
<LocalLeader>ni	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ni         :call C_ProtoInsert()<CR>$/;"	m
<LocalLeader>ni	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ni    <Esc>:call C_ProtoInsert()<CR>$/;"	m
<LocalLeader>nm	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>nm        :call C_ProtoPick("method")<CR>$/;"	m
<LocalLeader>nm	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>nm   <Esc>:call C_ProtoPick("method")<CR>$/;"	m
<LocalLeader>nm	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>nm        :call C_ProtoPick("method")<CR>$/;"	m
<LocalLeader>np	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>np        :call C_ProtoPick("function")<CR>$/;"	m
<LocalLeader>np	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>np   <Esc>:call C_ProtoPick("function")<CR>$/;"	m
<LocalLeader>np	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>np        :call C_ProtoPick("function")<CR>$/;"	m
<LocalLeader>nr	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>nr         :call C_CodeSnippet("r")<CR>$/;"	m
<LocalLeader>nr	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>nr    <Esc>:call C_CodeSnippet("r")<CR>$/;"	m
<LocalLeader>ns	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ns         :call C_ProtoShow()<CR>$/;"	m
<LocalLeader>ns	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ns    <Esc>:call C_ProtoShow()<CR>$/;"	m
<LocalLeader>ntg	ftplugin/c.vim	/^	 noremap    <buffer>  <silent>  <LocalLeader>ntg        :call C_BrowseTemplateFiles("Global")<CR>$/;"	m
<LocalLeader>ntg	ftplugin/c.vim	/^	inoremap    <buffer>  <silent>  <LocalLeader>ntg   <Esc>:call C_BrowseTemplateFiles("Global")<CR>$/;"	m
<LocalLeader>ntl	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ntl        :call C_BrowseTemplateFiles("Local")<CR>$/;"	m
<LocalLeader>ntl	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ntl   <Esc>:call C_BrowseTemplateFiles("Local")<CR>$/;"	m
<LocalLeader>ntr	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ntr        :call C_RereadTemplates()<CR>$/;"	m
<LocalLeader>ntr	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ntr   <Esc>:call C_RereadTemplates()<CR>$/;"	m
<LocalLeader>nts	ftplugin/c.vim	/^ noremap    <buffer>            <LocalLeader>nts        :CStyle<Space>$/;"	m
<LocalLeader>nts	ftplugin/c.vim	/^inoremap    <buffer>            <LocalLeader>nts   <Esc>:CStyle<Space>$/;"	m
<LocalLeader>nw	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>nw         :call C_CodeSnippet("w")<CR>$/;"	m
<LocalLeader>nw	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>nw    <Esc>:call C_CodeSnippet("w")<CR>$/;"	m
<LocalLeader>nw	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>nw    <Esc>:call C_CodeSnippet("wv")<CR>$/;"	m
<LocalLeader>p"	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>p"        :call C_InsertTemplate("preprocessor.include-local")<CR>$/;"	m
<LocalLeader>p"	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>p"   <Esc>:call C_InsertTemplate("preprocessor.include-local")<CR>$/;"	m
<LocalLeader>p<	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>p<        :call C_InsertTemplate("preprocessor.include-global")<CR>$/;"	m
<LocalLeader>p<	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>p<   <Esc>:call C_InsertTemplate("preprocessor.include-global")<CR>$/;"	m
<LocalLeader>pc	ftplugin/c.vim	/^ noremap    <buffer>  <LocalLeader>pc                  :IncludeC99Library<Space>$/;"	m
<LocalLeader>pc	ftplugin/c.vim	/^inoremap    <buffer>  <LocalLeader>pc             <Esc>:IncludeC99Library<Space>$/;"	m
<LocalLeader>pd	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pd        :call C_InsertTemplate("preprocessor.define")<CR>$/;"	m
<LocalLeader>pd	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pd   <Esc>:call C_InsertTemplate("preprocessor.define")<CR>$/;"	m
<LocalLeader>pe	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pe        :call C_InsertTemplate("preprocessor.error")<CR>$/;"	m
<LocalLeader>pe	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pe   <Esc>:call C_InsertTemplate("preprocessor.error")<CR>$/;"	m
<LocalLeader>pi0	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pi0       :call C_PPIf0("a")<CR>2ji$/;"	m
<LocalLeader>pi0	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pi0  <Esc>:call C_PPIf0("a")<CR>2ji$/;"	m
<LocalLeader>pi0	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>pi0  <Esc>:call C_PPIf0("v")<CR>$/;"	m
<LocalLeader>pid	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pid       :call C_InsertTemplate("preprocessor.ifdef-else-endif")<CR>$/;"	m
<LocalLeader>pid	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pid  <Esc>:call C_InsertTemplate("preprocessor.ifdef-else-endif")<CR>$/;"	m
<LocalLeader>pid	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>pid  <Esc>:call C_InsertTemplate("preprocessor.ifdef-else-endif", "v")<CR>$/;"	m
<LocalLeader>pie	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pie       :call C_InsertTemplate("preprocessor.if-else-endif")<CR>$/;"	m
<LocalLeader>pie	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pie  <Esc>:call C_InsertTemplate("preprocessor.if-else-endif")<CR>$/;"	m
<LocalLeader>pie	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>pie  <Esc>:call C_InsertTemplate("preprocessor.if-else-endif", "v")<CR>$/;"	m
<LocalLeader>pif	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pif       :call C_InsertTemplate("preprocessor.if-endif")<CR>$/;"	m
<LocalLeader>pif	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pif  <Esc>:call C_InsertTemplate("preprocessor.if-endif")<CR>$/;"	m
<LocalLeader>pif	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>pif  <Esc>:call C_InsertTemplate("preprocessor.if-endif", "v")<CR>$/;"	m
<LocalLeader>pin	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pin       :call C_InsertTemplate("preprocessor.ifndef-else-endif")<CR>$/;"	m
<LocalLeader>pin	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pin  <Esc>:call C_InsertTemplate("preprocessor.ifndef-else-endif")<CR>$/;"	m
<LocalLeader>pin	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>pin  <Esc>:call C_InsertTemplate("preprocessor.ifndef-else-endif", "v")<CR>$/;"	m
<LocalLeader>pind	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pind      :call C_InsertTemplate("preprocessor.ifndef-def-endif")<CR>$/;"	m
<LocalLeader>pind	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pind <Esc>:call C_InsertTemplate("preprocessor.ifndef-def-endif")<CR>$/;"	m
<LocalLeader>pind	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>pind <Esc>:call C_InsertTemplate("preprocessor.ifndef-def-endif", "v")<CR>$/;"	m
<LocalLeader>pl	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pl        :call C_InsertTemplate("preprocessor.line")<CR>$/;"	m
<LocalLeader>pl	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pl   <Esc>:call C_InsertTemplate("preprocessor.line")<CR>$/;"	m
<LocalLeader>pp	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pp        :call C_InsertTemplate("preprocessor.pragma")<CR>$/;"	m
<LocalLeader>pp	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pp   <Esc>:call C_InsertTemplate("preprocessor.pragma")<CR>$/;"	m
<LocalLeader>pr0	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pr0       :call C_PPIf0Remove()<CR>$/;"	m
<LocalLeader>pr0	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pr0  <Esc>:call C_PPIf0Remove()<CR>$/;"	m
<LocalLeader>ps	ftplugin/c.vim	/^ noremap    <buffer>  <LocalLeader>ps                  :IncludeStdLibrary<Space>$/;"	m
<LocalLeader>ps	ftplugin/c.vim	/^inoremap    <buffer>  <LocalLeader>ps             <Esc>:IncludeStdLibrary<Space>$/;"	m
<LocalLeader>pu	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pu        :call C_InsertTemplate("preprocessor.undefine")<CR>$/;"	m
<LocalLeader>pu	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pu   <Esc>:call C_InsertTemplate("preprocessor.undefine")<CR>$/;"	m
<LocalLeader>ra	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>ra         :call C_Arguments()<CR>$/;"	m
<LocalLeader>ra	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>ra    <C-C>:call C_Arguments()<CR>$/;"	m
<LocalLeader>rc	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rc         :call C_Compile()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rc	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rc    <C-C>:call C_Compile()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rcm	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rcm        :call C_ChooseMakefile()<CR>$/;"	m
<LocalLeader>rcm	ftplugin/make.vim	/^ map    <buffer>  <silent>  <LocalLeader>rcm        :call C_ChooseMakefile()<CR>$/;"	m
<LocalLeader>rcm	ftplugin/make.vim	/^imap    <buffer>  <silent>  <LocalLeader>rcm   <C-C>:call C_ChooseMakefile()<CR>$/;"	m
<LocalLeader>rd	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rd         :call C_Indent()<CR>$/;"	m
<LocalLeader>rd	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rd    <C-C>:call C_Indent()<CR>$/;"	m
<LocalLeader>rh	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rh         :call C_Hardcopy()<CR>$/;"	m
<LocalLeader>rh	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rh    <C-C>:call C_Hardcopy()<CR>$/;"	m
<LocalLeader>rh	ftplugin/c.vim	/^vmap    <buffer>  <silent>  <LocalLeader>rh         :call C_Hardcopy()<CR>$/;"	m
<LocalLeader>rk	ftplugin/c.vim	/^  map    <buffer>  <silent>  <LocalLeader>rk         :call C_CodeCheck()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rk	ftplugin/c.vim	/^ imap    <buffer>  <silent>  <LocalLeader>rk    <C-C>:call C_CodeCheck()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rka	ftplugin/c.vim	/^  map    <buffer>  <silent>  <LocalLeader>rka        :call C_CodeCheckArguments()<CR>$/;"	m
<LocalLeader>rka	ftplugin/c.vim	/^ imap    <buffer>  <silent>  <LocalLeader>rka   <C-C>:call C_CodeCheckArguments()<CR>$/;"	m
<LocalLeader>rl	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rl         :call C_Link()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rl	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rl    <C-C>:call C_Link()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rm	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rm         :call C_Make()<CR>$/;"	m
<LocalLeader>rm	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rm    <C-C>:call C_Make()<CR>$/;"	m
<LocalLeader>rm	ftplugin/make.vim	/^ map    <buffer>  <silent>  <LocalLeader>rm         :call C_Make()<CR>$/;"	m
<LocalLeader>rm	ftplugin/make.vim	/^imap    <buffer>  <silent>  <LocalLeader>rm    <C-C>:call C_Make()<CR>$/;"	m
<LocalLeader>rma	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rma        :call C_MakeArguments()<CR>$/;"	m
<LocalLeader>rma	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rma   <C-C>:call C_MakeArguments()<CR>$/;"	m
<LocalLeader>rma	ftplugin/make.vim	/^ map    <buffer>  <silent>  <LocalLeader>rma        :call C_MakeArguments()<CR>$/;"	m
<LocalLeader>rma	ftplugin/make.vim	/^imap    <buffer>  <silent>  <LocalLeader>rma   <C-C>:call C_MakeArguments()<CR>$/;"	m
<LocalLeader>rmc	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rmc        :call C_MakeClean()<CR>$/;"	m
<LocalLeader>rmc	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rmc   <C-C>:call C_MakeClean()<CR>$/;"	m
<LocalLeader>rmc	ftplugin/make.vim	/^ map    <buffer>  <silent>  <LocalLeader>rmc        :call C_MakeClean()<CR>$/;"	m
<LocalLeader>rmc	ftplugin/make.vim	/^imap    <buffer>  <silent>  <LocalLeader>rmc   <C-C>:call C_MakeClean()<CR>$/;"	m
<LocalLeader>rme	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rme        :call C_MakeExeToRun()<CR>$/;"	m
<LocalLeader>rme	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rme   <C-C>:call C_MakeExeToRun()<CR>$/;"	m
<LocalLeader>rme	ftplugin/make.vim	/^ map    <buffer>  <silent>  <LocalLeader>rme        :call C_MakeExeToRun()<CR>$/;"	m
<LocalLeader>rme	ftplugin/make.vim	/^imap    <buffer>  <silent>  <LocalLeader>rme   <C-C>:call C_MakeExeToRun()<CR>$/;"	m
<LocalLeader>ro	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>ro         :call C_Toggle_Gvim_Xterm()<CR>$/;"	m
<LocalLeader>ro	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>ro    <C-C>:call C_Toggle_Gvim_Xterm()<CR>$/;"	m
<LocalLeader>rp	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rp         :call C_SplintCheck()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rp	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rp    <C-C>:call C_SplintCheck()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rpa	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rpa        :call C_SplintArguments()<CR>$/;"	m
<LocalLeader>rpa	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rpa   <C-C>:call C_SplintArguments()<CR>$/;"	m
<LocalLeader>rr	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rr         :call C_Run()<CR>$/;"	m
<LocalLeader>rr	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rr    <C-C>:call C_Run()<CR>$/;"	m
<LocalLeader>rs	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rs         :call C_Settings()<CR>$/;"	m
<LocalLeader>rs	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rs    <C-C>:call C_Settings()<CR>$/;"	m
<LocalLeader>rx	ftplugin/c.vim	/^   map    <buffer>  <silent>  <LocalLeader>rx         :call C_XtermSize()<CR>$/;"	m
<LocalLeader>rx	ftplugin/c.vim	/^  imap    <buffer>  <silent>  <LocalLeader>rx    <C-C>:call C_XtermSize()<CR>$/;"	m
<LocalLeader>sb	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sb         :call C_InsertTemplate("statements.block")<CR>$/;"	m
<LocalLeader>sb	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sb    <Esc>:call C_InsertTemplate("statements.block")<CR>$/;"	m
<LocalLeader>sb	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>sb    <Esc>:call C_InsertTemplate("statements.block", "v")<CR>$/;"	m
<LocalLeader>sc	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sc         :call C_InsertTemplate("statements.case")<CR>$/;"	m
<LocalLeader>sc	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sc    <Esc>:call C_InsertTemplate("statements.case")<CR>$/;"	m
<LocalLeader>sd	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sd         :call C_InsertTemplate("statements.do-while")<CR>$/;"	m
<LocalLeader>sd	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sd    <Esc>:call C_InsertTemplate("statements.do-while")<CR>$/;"	m
<LocalLeader>sd	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>sd    <Esc>:call C_InsertTemplate("statements.do-while", "v")<CR>$/;"	m
<LocalLeader>se	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>se         :call C_InsertTemplate("statements.else-block")<CR>$/;"	m
<LocalLeader>se	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>se    <Esc>:call C_InsertTemplate("statements.else-block")<CR>$/;"	m
<LocalLeader>se	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>se    <Esc>:call C_InsertTemplate("statements.else-block", "v")<CR>$/;"	m
<LocalLeader>sf	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sf         :call C_InsertTemplate("statements.for")<CR>$/;"	m
<LocalLeader>sf	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sf    <Esc>:call C_InsertTemplate("statements.for")<CR>$/;"	m
<LocalLeader>sfo	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sfo        :call C_InsertTemplate("statements.for-block")<CR>$/;"	m
<LocalLeader>sfo	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sfo   <Esc>:call C_InsertTemplate("statements.for-block")<CR>$/;"	m
<LocalLeader>sfo	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>sfo   <Esc>:call C_InsertTemplate("statements.for-block", "v")<CR>$/;"	m
<LocalLeader>si	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>si         :call C_InsertTemplate("statements.if")<CR>$/;"	m
<LocalLeader>si	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>si    <Esc>:call C_InsertTemplate("statements.if")<CR>$/;"	m
<LocalLeader>sie	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sie        :call C_InsertTemplate("statements.if-else")<CR>$/;"	m
<LocalLeader>sie	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sie   <Esc>:call C_InsertTemplate("statements.if-else")<CR>$/;"	m
<LocalLeader>sie	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>sie   <Esc>:call C_InsertTemplate("statements.if-else", "v")<CR>$/;"	m
<LocalLeader>sif	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sif        :call C_InsertTemplate("statements.if-block")<CR>$/;"	m
<LocalLeader>sif	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sif   <Esc>:call C_InsertTemplate("statements.if-block")<CR>$/;"	m
<LocalLeader>sif	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>sif   <Esc>:call C_InsertTemplate("statements.if-block", "v")<CR>$/;"	m
<LocalLeader>sife	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sife       :call C_InsertTemplate("statements.if-block-else")<CR>$/;"	m
<LocalLeader>sife	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sife  <Esc>:call C_InsertTemplate("statements.if-block-else")<CR>$/;"	m
<LocalLeader>sife	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>sife  <Esc>:call C_InsertTemplate("statements.if-block-else", "v")<CR>$/;"	m
<LocalLeader>ss	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ss         :call C_InsertTemplate("statements.switch")<CR>$/;"	m
<LocalLeader>ss	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ss    <Esc>:call C_InsertTemplate("statements.switch")<CR>$/;"	m
<LocalLeader>ss	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>ss    <Esc>:call C_InsertTemplate("statements.switch", "v")<CR>$/;"	m
<LocalLeader>sw	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sw         :call C_InsertTemplate("statements.while")<CR>$/;"	m
<LocalLeader>sw	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sw    <Esc>:call C_InsertTemplate("statements.while")<CR>$/;"	m
<LocalLeader>swh	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>swh        :call C_InsertTemplate("statements.while-block")<CR>$/;"	m
<LocalLeader>swh	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>swh   <Esc>:call C_InsertTemplate("statements.while-block")<CR>$/;"	m
<LocalLeader>swh	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>swh   <Esc>:call C_InsertTemplate("statements.while-block", "v")<CR>$/;"	m
<LocalLeader>s{	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>s{         :call C_InsertTemplate("statements.block")<CR>$/;"	m
<LocalLeader>s{	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>s{    <Esc>:call C_InsertTemplate("statements.block")<CR>$/;"	m
<LocalLeader>s{	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>s{    <Esc>:call C_InsertTemplate("statements.block", "v")<CR>$/;"	m
<Plug>(neocomplcache_snippets_expand)	autoload/neocomplcache/sources/snippets_complete.vim	/^inoremap <silent><expr> <Plug>(neocomplcache_snippets_expand)$/;"	m
<Plug>(neocomplcache_snippets_force_expand)	autoload/neocomplcache/sources/snippets_complete.vim	/^inoremap <silent><expr> <Plug>(neocomplcache_snippets_force_expand)$/;"	m
<Plug>(neocomplcache_snippets_force_jump)	autoload/neocomplcache/sources/snippets_complete.vim	/^inoremap <silent><expr> <Plug>(neocomplcache_snippets_force_jump)$/;"	m
<Plug>(neocomplcache_snippets_jump)	autoload/neocomplcache/sources/snippets_complete.vim	/^inoremap <silent><expr> <Plug>(neocomplcache_snippets_jump)$/;"	m
<Plug>CMiniBufExplorer	plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>CMiniBufExplorer :call <SID>StopExplorer(1)<CR>:<BS>$/;"	m
<Plug>CalendarH	plugin/calendar.vim	/^nnoremap <silent> <Plug>CalendarH :cal Calendar(1)<CR>$/;"	m
<Plug>CalendarV	plugin/calendar.vim	/^nnoremap <silent> <Plug>CalendarV :cal Calendar(0)<CR>$/;"	m
<Plug>MiniBufExplorer	plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>MiniBufExplorer  :call <SID>StartExplorer(1, -1)<CR>:<BS>$/;"	m
<Plug>TMiniBufExplorer	plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>TMiniBufExplorer :call <SID>ToggleExplorer()<CR>:<BS>$/;"	m
<Plug>UMiniBufExplorer	plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>UMiniBufExplorer :call <SID>AutoUpdate(-1)<CR>:<BS>$/;"	m
<S-F2>	ftplugin/c.vim	/^ map  <buffer>  <silent>  <S-F2>       :A<CR>$/;"	m
<S-F2>	ftplugin/c.vim	/^imap  <buffer>  <silent>  <S-F2>  <C-C>:A<CR>$/;"	m
<S-F9>	ftplugin/c.vim	/^ map  <buffer>  <silent>  <S-F9>       :call C_Arguments()<CR>$/;"	m
<S-F9>	ftplugin/c.vim	/^imap  <buffer>  <silent>  <S-F9>  <C-C>:call C_Arguments()<CR>$/;"	m
<S-Tab>	after/ftplugin/python_pydiction.vim	/^inoremap <silent> <buffer> <S-Tab> $/;"	m
<SID>YRGetChar	plugin/yankring.vim	/^inoremap <script> <SID>YRGetChar <c-r>=YRGetChar()<CR>$/;"	m
<SID>xx	plugin/taglist.vim	/^    map <SID>xx <SID>xx$/;"	m
<SID>yrrecord	plugin/yankring.vim	/^inoremap <silent> <SID>yrrecord <C-R>=YRRecord3()<cr>$/;"	m
<SID>yrrecord	plugin/yankring.vim	/^nnoremap <silent> <SID>yrrecord :call YRRecord3()<cr>$/;"	m
<Tab>	after/ftplugin/python_pydiction.vim	/^inoremap <silent> <buffer> <Tab> $/;"	m
<c-r><tab>	after/plugin/snipMate.vim	/^ino <silent> <c-r><tab> <c-r>=ShowAvailableSnips()<cr>$/;"	m
<s-tab>	after/plugin/snipMate.vim	/^ino <silent> <s-tab> <c-r>=BackwardsSnippet()<cr>$/;"	m
<tab>	after/plugin/snipMate.vim	/^ino <silent> <tab> <c-r>=TriggerSnippet()<cr>$/;"	m
A	plugin/a.vim	/^comm! -nargs=? -bang A call AlternateFile("n<bang>", <f-args>)$/;"	c
ALL_CFLAGS	c-support/codesnippets/Makefile	/^ALL_CFLAGS      = $(CFLAGS) $(ALL_INC_DIR)$/;"	m
ALL_INC_DIR	c-support/codesnippets/Makefile	/^ALL_INC_DIR     = $(addprefix -I, $(LOCAL_INC_DIR) $(GLOBAL_INC_DIR))$/;"	m
ALL_LFLAGS	c-support/codesnippets/Makefile	/^ALL_LFLAGS      = $(LDFLAGS) $(ALL_LIB_DIR)$/;"	m
ALL_LIB_DIR	c-support/codesnippets/Makefile	/^ALL_LIB_DIR     = $(addprefix -L, $(LOCAL_LIB_DIR) $(GLOBAL_LIB_DIR))$/;"	m
AN	plugin/a.vim	/^comm! -nargs=? -bang AN call NextAlternate("<bang>")$/;"	c
AS	plugin/a.vim	/^comm! -nargs=? -bang AS call AlternateFile("h<bang>", <f-args>)$/;"	c
AT	plugin/a.vim	/^comm! -nargs=? -bang AT call AlternateFile("t<bang>", <f-args>)$/;"	c
AV	plugin/a.vim	/^comm! -nargs=? -bang AV call AlternateFile("v<bang>", <f-args>)$/;"	c
AddAlternateExtensionMapping	plugin/a.vim	/^function! <SID>AddAlternateExtensionMapping(extension, alternates)$/;"	f
Agrep	plugin/grep.vim	/^command! -nargs=* -complete=file Agrep$/;"	c
AgrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file AgrepAdd$/;"	c
Agrep_Path	plugin/grep.vim	/^    let Agrep_Path = 'agrep'$/;"	v
AlternateFile	plugin/a.vim	/^function! AlternateFile(splitWindow, ...)$/;"	f
AlternateOpenFileUnderCursor	plugin/a.vim	/^function! AlternateOpenFileUnderCursor(splitWindow,...)$/;"	f
AlternateOpenNextFile	plugin/a.vim	/^function! AlternateOpenNextFile(bang)$/;"	f
Animate	plugin/matrix.vim	/^function! s:Animate()$/;"	f
AutoUpdate	plugin/minibufexpl.vim	/^function! <SID>AutoUpdate(delBufNum)$/;"	f
BASENAMES	c-support/codesnippets/Makefile	/^BASENAMES       = $(basename $(SOURCES))$/;"	m
BEActivateBuffer	plugin/bufexplorer.vim	/^function! s:BEActivateBuffer()$/;"	f
BEAddBuffer	plugin/bufexplorer.vim	/^function! s:BEAddBuffer()$/;"	f
BEBuildBufferList	plugin/bufexplorer.vim	/^function! s:BEBuildBufferList()$/;"	f
BECleanup	plugin/bufexplorer.vim	/^function! s:BECleanup()$/;"	f
BEClose	plugin/bufexplorer.vim	/^function! s:BEClose(mode)$/;"	f
BECreateHelp	plugin/bufexplorer.vim	/^function! s:BECreateHelp()$/;"	f
BEDeactivateBuffer	plugin/bufexplorer.vim	/^function! s:BEDeactivateBuffer(remove)$/;"	f
BEDeleteBuffer	plugin/bufexplorer.vim	/^function! s:BEDeleteBuffer(bufNbr, mode)$/;"	f
BEDeleteBufferListing	plugin/bufexplorer.vim	/^function! s:BEDeleteBufferListing(buf)$/;"	f
BEDisplayBufferList	plugin/bufexplorer.vim	/^function! s:BEDisplayBufferList()$/;"	f
BEError	plugin/bufexplorer.vim	/^function! s:BEError(msg)$/;"	f
BEGetBufferInfo	plugin/bufexplorer.vim	/^function! s:BEGetBufferInfo(bufnr)$/;"	f
BEGetHelpStatus	plugin/bufexplorer.vim	/^function! s:BEGetHelpStatus()$/;"	f
BEGetTabNbr	plugin/bufexplorer.vim	/^function! s:BEGetTabNbr(bufNbr)$/;"	f
BEGetWinNbr	plugin/bufexplorer.vim	/^function! s:BEGetWinNbr(tabNbr, bufNbr)$/;"	f
BEIgnoreBuffer	plugin/bufexplorer.vim	/^function! s:BEIgnoreBuffer(buf)$/;"	f
BEInitialize	plugin/bufexplorer.vim	/^function! s:BEInitialize()$/;"	f
BEMRUCmp	plugin/bufexplorer.vim	/^function! s:BEMRUCmp(line1, line2)$/;"	f
BEMRUListShow	plugin/bufexplorer.vim	/^function! s:BEMRUListShow()$/;"	f
BEMRUPop	plugin/bufexplorer.vim	/^function! s:BEMRUPop(buf)$/;"	f
BEMRUPush	plugin/bufexplorer.vim	/^function! s:BEMRUPush(buf)$/;"	f
BEMapKeys	plugin/bufexplorer.vim	/^function! s:BEMapKeys()$/;"	f
BEReSortListing	plugin/bufexplorer.vim	/^function! s:BEReSortListing()$/;"	f
BERebuildBufferList	plugin/bufexplorer.vim	/^function! s:BERebuildBufferList(...)$/;"	f
BERemoveBuffer	plugin/bufexplorer.vim	/^function! s:BERemoveBuffer(type, mode) range$/;"	f
BEReset	plugin/bufexplorer.vim	/^function! s:BEReset()$/;"	f
BEReverseSortSelect	plugin/bufexplorer.vim	/^function! s:BEReverseSortSelect()$/;"	f
BESelectBuffer	plugin/bufexplorer.vim	/^function! s:BESelectBuffer(...)$/;"	f
BESet	plugin/bufexplorer.vim	/^function! s:BESet(var, default)$/;"	f
BESetup	plugin/bufexplorer.vim	/^function! s:BESetup()$/;"	f
BESetupSyntax	plugin/bufexplorer.vim	/^function! s:BESetupSyntax()$/;"	f
BESortListing	plugin/bufexplorer.vim	/^function! s:BESortListing()$/;"	f
BESortReverse	plugin/bufexplorer.vim	/^function! s:BESortReverse()$/;"	f
BESortSelect	plugin/bufexplorer.vim	/^function! s:BESortSelect()$/;"	f
BETabEnter	plugin/bufexplorer.vim	/^function! s:BETabEnter()$/;"	f
BEToggleFindActive	plugin/bufexplorer.vim	/^function! s:BEToggleFindActive()$/;"	f
BEToggleHelp	plugin/bufexplorer.vim	/^function! s:BEToggleHelp()$/;"	f
BEToggleOnlyOneTab	plugin/bufexplorer.vim	/^function! s:BEToggleOnlyOneTab()$/;"	f
BEToggleShowRelativePath	plugin/bufexplorer.vim	/^function! s:BEToggleShowRelativePath()$/;"	f
BEToggleShowTabBuffer	plugin/bufexplorer.vim	/^function! s:BEToggleShowTabBuffer()$/;"	f
BEToggleShowUnlisted	plugin/bufexplorer.vim	/^function! s:BEToggleShowUnlisted()$/;"	f
BEToggleSplitOutPathName	plugin/bufexplorer.vim	/^function! s:BEToggleSplitOutPathName()$/;"	f
BEUpdateHelpStatus	plugin/bufexplorer.vim	/^function! s:BEUpdateHelpStatus()$/;"	f
BEWarning	plugin/bufexplorer.vim	/^function! s:BEWarning(msg)$/;"	f
BackwardsSnippet	plugin/snipMate.vim	/^fun! BackwardsSnippet()$/;"	f
Bgrep	plugin/grep.vim	/^command! -nargs=* Bgrep$/;"	c
BgrepAdd	plugin/grep.vim	/^command! -nargs=* BgrepAdd$/;"	c
Bookmark.AddBookmark	plugin/NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	plugin/NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.GetNodeForName	plugin/NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.GetSelected	plugin/NERD_tree.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	plugin/NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.Sort	plugin/NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.ToRoot	plugin/NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.Write	plugin/NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	plugin/NERD_tree.vim	/^function! s:Bookmark.activate()$/;"	f
Bookmark.compareTo	plugin/NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	plugin/NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	plugin/NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	plugin/NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.openInNewTab	plugin/NERD_tree.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	plugin/NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	plugin/NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	plugin/NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.validate	plugin/NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
BufExplorer	plugin/bufexplorer.vim	/^command! BufExplorer :call StartBufExplorer(has ("gui") ? "drop" : "hide edit")$/;"	c
BufExplorerHorizontalSplit	plugin/bufexplorer.vim	/^command! BufExplorerHorizontalSplit :call BufExplorerHorizontalSplit()$/;"	c
BufExplorerHorizontalSplit	plugin/bufexplorer.vim	/^function! BufExplorerHorizontalSplit()$/;"	f
BufExplorerVerticalSplit	plugin/bufexplorer.vim	/^command! BufExplorerVerticalSplit :call BufExplorerVerticalSplit()$/;"	c
BufExplorerVerticalSplit	plugin/bufexplorer.vim	/^function! BufExplorerVerticalSplit()$/;"	f
BufExplorerVimEnter	plugin/bufexplorer.vim	/^augroup BufExplorerVimEnter$/;"	a
BufExplorer_IsValid	plugin/bufexplorer.vim	/^function! BufExplorer_IsValid()$/;"	f
BufExplorer_ReSize	plugin/bufexplorer.vim	/^function! BufExplorer_ReSize()$/;"	f
BufExplorer_Refresh	plugin/bufexplorer.vim	/^function! BufExplorer_Refresh()$/;"	f
BufExplorer_Start	plugin/bufexplorer.vim	/^function! BufExplorer_Start()$/;"	f
BufferOrFileExists	plugin/a.vim	/^function! <SID>BufferOrFileExists(fileName)$/;"	f
BuildBufferList	plugin/minibufexpl.vim	/^function! <SID>BuildBufferList(delBufNum, updateBufList)$/;"	f
BuildContextStack	autoload/omni/cpp/namespaces.vim	/^function! s:BuildContextStack(namespaces, szCurrentScope)$/;"	f
BuildTabStops	autoload/snipMate.vim	/^fun s:BuildTabStops(snip, lnum, col, indent)$/;"	f
CC	c-support/codesnippets/Makefile	/^CC              := gcc$/;"	m
CFLAGS	c-support/codesnippets/Makefile	/^  CFLAGS       := ${CFLAGS}   -pg -O3$/;"	m
CFLAGS	c-support/codesnippets/Makefile	/^  CFLAGS       := ${DEBUG_CFLAGS}$/;"	m
CFLAGS	c-support/codesnippets/Makefile	/^  CFLAGS       := ${RELEASE_CFLAGS}$/;"	m
CFileSection	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_CFileSectionList        CFileSection       call C_CFileSectionListInsert   (<f-args>)$/;"	c
CMiniBufExplorer	plugin/minibufexpl.vim	/^  command! CMiniBufExplorer  call <SID>StopExplorer(1)$/;"	c
CPP_SOURCES	c-support/codesnippets/Makefile	/^CPP_SOURCES     = $(filter-out %.c, $(SOURCES))$/;"	m
CSAHi	colors/maroloccio.vim	/^   command! -nargs=+ CSAHi exe "hi" <q-args>$/;"	c
CSAHi	colors/maroloccio.vim	/^   command! -nargs=+ CSAHi exe "hi" substitute(substitute(<q-args>, "undercurl", "underline", "g"), "guisp\\\\S\\\\+", "", "g")$/;"	c
CStyle	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_StyleList               CStyle             call C_Style                    (<f-args>)$/;"	c
CXX	c-support/codesnippets/Makefile	/^CXX             := g++$/;"	m
CXXFLAGS	c-support/codesnippets/Makefile	/^  CXXFLAGS     := ${CXXFLAGS} -pg -O3$/;"	m
CXXFLAGS	c-support/codesnippets/Makefile	/^  CXXFLAGS     := ${DEBUG_CXXFLAGS}$/;"	m
CXXFLAGS	c-support/codesnippets/Makefile	/^  CXXFLAGS     := ${RELEASE_CXXFLAGS}$/;"	m
C_AdjustLineEndComm	plugin/c.vim	/^function! C_AdjustLineEndComm ( ) range$/;"	f
C_ApplyFlag	plugin/c.vim	/^function! C_ApplyFlag ( val, flag )$/;"	f
C_Arguments	plugin/c.vim	/^function! C_Arguments ()$/;"	f
C_BrowseTemplateFiles	plugin/c.vim	/^function! C_BrowseTemplateFiles ( type )$/;"	f
C_C99LibraryIncludesInsert	plugin/c.vim	/^function! C_C99LibraryIncludesInsert ( arg )$/;"	f
C_C99LibraryIncludesList	plugin/c.vim	/^function!	C_C99LibraryIncludesList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_CFileSectionList	plugin/c.vim	/^function!	C_CFileSectionList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_CFileSectionListInsert	plugin/c.vim	/^function! C_CFileSectionListInsert ( arg )$/;"	f
C_CIncludeMenus	plugin/c.vim	/^function! C_CIncludeMenus ( menupath, liblist )$/;"	f
C_CIosFlagMenus	plugin/c.vim	/^function! C_CIosFlagMenus ( menupath, flaglist )$/;"	f
C_CheckAndRereadTemplates	plugin/c.vim	/^function! C_CheckAndRereadTemplates ()$/;"	f
C_CheckForMain	plugin/c.vim	/^function! C_CheckForMain ()$/;"	f
C_CheckGlobal	plugin/c.vim	/^function! C_CheckGlobal ( name )$/;"	f
C_ChooseMakefile	plugin/c.vim	/^function! C_ChooseMakefile ()$/;"	f
C_CleanDirNameList	plugin/c.vim	/^function! C_CleanDirNameList ( list )$/;"	f
C_CodeCheck	plugin/c.vim	/^function! C_CodeCheck ()$/;"	f
C_CodeCheckArguments	plugin/c.vim	/^function! C_CodeCheckArguments ()$/;"	f
C_CodeFor	plugin/c.vim	/^function! C_CodeFor( direction ) range$/;"	f
C_CodeSnippet	plugin/c.vim	/^function! C_CodeSnippet(mode)$/;"	f
C_CodeToCommentC	plugin/c.vim	/^function! C_CodeToCommentC ( ) range$/;"	f
C_CodeToCommentCpp	plugin/c.vim	/^function! C_CodeToCommentCpp ( ) range$/;"	f
C_CommentToCode	plugin/c.vim	/^function! C_CommentToCode( ) range$/;"	f
C_CommentToggle	plugin/c.vim	/^function! C_CommentToggle () range$/;"	f
C_Comment_C_SectionAll	plugin/c.vim	/^function! C_Comment_C_SectionAll ( type )$/;"	f
C_Comment_H_SectionAll	plugin/c.vim	/^function! C_Comment_H_SectionAll ( type )$/;"	f
C_Compile	plugin/c.vim	/^function! C_Compile ()$/;"	f
C_CppCLibraryIncludesInsert	plugin/c.vim	/^function! C_CppCLibraryIncludesInsert ( arg )$/;"	f
C_CppCLibraryIncludesList	plugin/c.vim	/^function!	C_CppCLibraryIncludesList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_CppLibraryIncludesInsert	plugin/c.vim	/^function! C_CppLibraryIncludesInsert ( arg )$/;"	f
C_CppLibraryIncludesList	plugin/c.vim	/^function!	C_CppLibraryIncludesList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_CreateGuiMenus	plugin/c.vim	/^function! C_CreateGuiMenus ()$/;"	f
C_CreateMenusDelayed	plugin/c.vim	/^function! C_CreateMenusDelayed ()$/;"	f
C_DateAndTime	plugin/c.vim	/^function! C_DateAndTime ( format )$/;"	f
C_EndOfLineComment	plugin/c.vim	/^function! C_EndOfLineComment ( ) range$/;"	f
C_EscapeBlanks	plugin/c.vim	/^function! C_EscapeBlanks (arg)$/;"	f
C_ExpandSingleMacro	plugin/c.vim	/^function! C_ExpandSingleMacro ( val, macroname, replacement )$/;"	f
C_ExpandUserMacros	plugin/c.vim	/^function! C_ExpandUserMacros ( key )$/;"	f
C_ForTypeComplete	plugin/c.vim	/^function!	C_ForTypeComplete ( ArgLead, CmdLine, CursorPos )$/;"	f
C_GetLineEndCommCol	plugin/c.vim	/^function! C_GetLineEndCommCol ()$/;"	f
C_HFileSectionList	plugin/c.vim	/^function!	C_HFileSectionList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_HFileSectionListInsert	plugin/c.vim	/^function! C_HFileSectionListInsert ( arg )$/;"	f
C_Hardcopy	plugin/c.vim	/^function! C_Hardcopy () range$/;"	f
C_Help	plugin/c.vim	/^function! C_Help( type )$/;"	f
C_HelpCsupport	plugin/c.vim	/^function! C_HelpCsupport ()$/;"	f
C_HighlightJumpTargets	plugin/c.vim	/^function! C_HighlightJumpTargets ()$/;"	f
C_HlMessage	plugin/c.vim	/^function! C_HlMessage ( ... )$/;"	f
C_IncludesInsert	plugin/c.vim	/^function! C_IncludesInsert ( arg, List )$/;"	f
C_IncludesList	plugin/c.vim	/^function!	C_IncludesList ( ArgLead, CmdLine, CursorPos, List )$/;"	f
C_Indent	plugin/c.vim	/^function! C_Indent ( )$/;"	f
C_InitMenus	plugin/c.vim	/^function! C_InitMenus ()$/;"	f
C_Input	plugin/c.vim	/^function! C_Input ( promp, text, ... )$/;"	f
C_InsertDateAndTime	plugin/c.vim	/^function! C_InsertDateAndTime ( format )$/;"	f
C_InsertMacroValue	plugin/c.vim	/^function! C_InsertMacroValue ( key )$/;"	f
C_InsertTemplate	plugin/c.vim	/^function! C_InsertTemplate ( key, ... )$/;"	f
C_InsertTemplateWrapper	plugin/c.vim	/^function! C_InsertTemplateWrapper ()$/;"	f
C_JumpCtrlJ	plugin/c.vim	/^function! C_JumpCtrlJ ()$/;"	f
C_KeywordCommentList	plugin/c.vim	/^function!	C_KeywordCommentList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_KeywordCommentListInsert	plugin/c.vim	/^function! C_KeywordCommentListInsert ( arg )$/;"	f
C_LegalizeName	plugin/c.vim	/^function! C_LegalizeName ( name )$/;"	f
C_Link	plugin/c.vim	/^function! C_Link ()$/;"	f
C_Make	plugin/c.vim	/^function! C_Make()$/;"	f
C_MakeArguments	plugin/c.vim	/^function! C_MakeArguments ()$/;"	f
C_MakeClean	plugin/c.vim	/^function! C_MakeClean()$/;"	f
C_MakeExeToRun	plugin/c.vim	/^function! C_MakeExeToRun ()$/;"	f
C_MenuTitle	plugin/c.vim	/^function! C_MenuTitle ()$/;"	f
C_OpenFold	plugin/c.vim	/^function! C_OpenFold ( mode )$/;"	f
C_PPIf0	plugin/c.vim	/^function! C_PPIf0 (mode)$/;"	f
C_PPIf0Remove	plugin/c.vim	/^function! C_PPIf0Remove ()$/;"	f
C_ProtoClear	plugin/c.vim	/^function! C_ProtoClear ()$/;"	f
C_ProtoInsert	plugin/c.vim	/^function! C_ProtoInsert ()$/;"	f
C_ProtoPick	plugin/c.vim	/^function! C_ProtoPick( type ) range$/;"	f
C_ProtoShow	plugin/c.vim	/^function! C_ProtoShow ()$/;"	f
C_ReadTemplates	plugin/c.vim	/^function! C_ReadTemplates ( templatefile )$/;"	f
C_RemoveCComment	plugin/c.vim	/^function! C_RemoveCComment( start, end )$/;"	f
C_RemoveGuiMenus	plugin/c.vim	/^function! C_RemoveGuiMenus ()$/;"	f
C_RemoveSpecialCharacters	plugin/c.vim	/^function! s:C_RemoveSpecialCharacters ( )$/;"	f
C_RereadTemplates	plugin/c.vim	/^function! C_RereadTemplates ( msg )$/;"	f
C_Run	plugin/c.vim	/^function! C_Run ()$/;"	f
C_SOURCES	c-support/codesnippets/Makefile	/^C_SOURCES       = $(filter     %.c, $(SOURCES))$/;"	m
C_SetSmallCommentStyle	plugin/c.vim	/^function! C_SetSmallCommentStyle ()$/;"	f
C_Settings	plugin/c.vim	/^function! C_Settings ()$/;"	f
C_SpecialCommentList	plugin/c.vim	/^function!	C_SpecialCommentList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_SpecialCommentListInsert	plugin/c.vim	/^function! C_SpecialCommentListInsert ( arg )$/;"	f
C_SplintArguments	plugin/c.vim	/^function! C_SplintArguments ()$/;"	f
C_SplintCheck	plugin/c.vim	/^function! C_SplintCheck ()$/;"	f
C_StdLibraryIncludesInsert	plugin/c.vim	/^function! C_StdLibraryIncludesInsert ( arg )$/;"	f
C_StdLibraryIncludesList	plugin/c.vim	/^function!	C_StdLibraryIncludesList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_Style	plugin/c.vim	/^function! C_Style ( style )$/;"	f
C_StyleList	plugin/c.vim	/^function!	C_StyleList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_Toggle_Gvim_Xterm	plugin/c.vim	/^function! C_Toggle_Gvim_Xterm ()$/;"	f
C_ToolMenu	plugin/c.vim	/^function! C_ToolMenu ()$/;"	f
C_XtermSize	plugin/c.vim	/^function! C_XtermSize ()$/;"	f
Calendar	plugin/calendar.vim	/^command! -nargs=* Calendar  call Calendar(0,<f-args>)$/;"	c
Calendar	plugin/calendar.vim	/^function! Calendar(...)$/;"	f
CalendarBuildKeymap	plugin/calendar.vim	/^function! s:CalendarBuildKeymap(dir, vyear, vmnth)$/;"	f
CalendarDiary	plugin/calendar.vim	/^function! s:CalendarDiary(day, month, year, week, dir)$/;"	f
CalendarDoAction	plugin/calendar.vim	/^function! s:CalendarDoAction(...)$/;"	f
CalendarH	plugin/calendar.vim	/^command! -nargs=* CalendarH call Calendar(1,<f-args>)$/;"	c
CalendarHelp	plugin/calendar.vim	/^function! s:CalendarHelp()$/;"	f
CalendarMakeDir	plugin/calendar.vim	/^function! s:CalendarMakeDir(dir)$/;"	f
CalendarSign	plugin/calendar.vim	/^function! s:CalendarSign(day, month, year)$/;"	f
CalendarVar	plugin/calendar.vim	/^function! s:CalendarVar(var)$/;"	f
CanUseOmnicompletion	autoload/omni/cpp/maycomplete.vim	/^function! s:CanUseOmnicompletion()$/;"	f
ChooseSnippet	plugin/snipMate.vim	/^fun s:ChooseSnippet(scope, trigger)$/;"	f
Cleanup	plugin/matrix.vim	/^function! s:Cleanup()$/;"	f
Close	ftplugin/html_snip_helper.vim	/^fun! Close()$/;"	f
Count	autoload/snipMate.vim	/^fun s:Count(haystack, needle)$/;"	f
CreateObject	plugin/matrix.vim	/^function! s:CreateObject(i)$/;"	f
CycleBuffer	plugin/minibufexpl.vim	/^function! <SID>CycleBuffer(forward)$/;"	f
DEBUG	c-support/codesnippets/Makefile	/^DEBUG          := YES$/;"	m
DEBUG	plugin/minibufexpl.vim	/^function! <SID>DEBUG(msg, level)$/;"	f
DEBUG_CFLAGS	c-support/codesnippets/Makefile	/^DEBUG_CFLAGS    := -Wall -ansi -pedantic -O0 -g$/;"	m
DEBUG_LDFLAGS	c-support/codesnippets/Makefile	/^DEBUG_LDFLAGS    := -g$/;"	m
DefineSnips	plugin/snipMate.vim	/^fun s:DefineSnips(dir, aliasft, realft)$/;"	f
DetermineExtension	plugin/a.vim	/^function! DetermineExtension(path) $/;"	f
DisplayBuffers	plugin/minibufexpl.vim	/^function! <SID>DisplayBuffers(delBufNum)$/;"	f
DisplayIncludeTree	autoload/omni/cpp/includes.vim	/^function! s:DisplayIncludeTree(szFilePath, indent, ...)$/;"	f
DrawObject	plugin/matrix.vim	/^function! s:DrawObject(i)$/;"	f
E2T	colors/vividchalk.vim	/^function! E2T(a)$/;"	f
EXECUTABLE	c-support/codesnippets/Makefile	/^EXECUTABLE      := main$/;"	m
EXE_CMDLINE	c-support/codesnippets/Makefile	/^EXE_CMDLINE     =$/;"	m
EXE_START	c-support/codesnippets/Makefile	/^EXE_START       = no$/;"	m
Egrep	plugin/grep.vim	/^command! -nargs=* -complete=file Egrep$/;"	c
EgrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file EgrepAdd$/;"	c
Egrep_Path	plugin/grep.vim	/^    let Egrep_Path = 'egrep'$/;"	v
EnumerateFilesByExtension	plugin/a.vim	/^function! EnumerateFilesByExtension(path, baseName, extension)$/;"	f
EnumerateFilesByExtensionInPath	plugin/a.vim	/^function! EnumerateFilesByExtensionInPath(baseName, extension, pathList, relPathBase)$/;"	f
EqualFilePaths	plugin/a.vim	/^function! <SID>EqualFilePaths(path1, path2)$/;"	f
ExpandAlternatePath	plugin/a.vim	/^function! <SID>ExpandAlternatePath(pathSpec, sfPath) $/;"	f
ExtendTagItemToPopupItem	autoload/omni/cpp/complete.vim	/^function! s:ExtendTagItemToPopupItem(tagItem, szTypeName)$/;"	f
ExtractScopeFromTypeInfo	autoload/omni/cpp/utils.vim	/^function! s:ExtractScopeFromTypeInfo(szTypeInfo)$/;"	f
ExtractSnips	plugin/snipMate.vim	/^fun! ExtractSnips(dir, ft)$/;"	f
ExtractSnipsFile	plugin/snipMate.vim	/^fun! ExtractSnipsFile(file, ft)$/;"	f
ExtractTypeInfoFromDecl	autoload/omni/cpp/items.vim	/^function! s:ExtractTypeInfoFromDecl(tokens)$/;"	f
Fgrep	plugin/grep.vim	/^command! -nargs=* -complete=file Fgrep$/;"	c
FgrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file FgrepAdd$/;"	c
Fgrep_Path	plugin/grep.vim	/^    let Fgrep_Path = 'fgrep'$/;"	v
Filename	autoload/snipMate.vim	/^fun! Filename(...)$/;"	f
FilterClassMembers	autoload/omni/cpp/complete.vim	/^function! s:FilterClassMembers(tagPopupList, szAccessFilter)$/;"	f
FilterClassScopeMembers	autoload/omni/cpp/complete.vim	/^function! s:FilterClassScopeMembers(tagPopupList, szAccessFilter)$/;"	f
FilterNamespaceScopeMembers	autoload/omni/cpp/complete.vim	/^function! s:FilterNamespaceScopeMembers(tagPopupList)$/;"	f
FilterOverloadedFunctions	autoload/omni/cpp/complete.vim	/^function! s:FilterOverloadedFunctions(tagPopupList)$/;"	f
FilterStaticClassMembers	autoload/omni/cpp/complete.vim	/^function! s:FilterStaticClassMembers(tagPopupList, szAccessFilter)$/;"	f
FindCreateWindow	plugin/minibufexpl.vim	/^function! <SID>FindCreateWindow(bufName, forceEdge, isExplorer, doDebug)$/;"	f
FindFileInSearchPath	plugin/a.vim	/^function! <SID>FindFileInSearchPath(fileName, pathList, relPathBase)$/;"	f
FindFileInSearchPathEx	plugin/a.vim	/^function! <SID>FindFileInSearchPathEx(fileName, pathList, relPathBase, count)$/;"	f
FindOrCreateBuffer	plugin/a.vim	/^function! <SID>FindOrCreateBuffer(fileName, doSplit, findSimilar)$/;"	f
FindStartPositionOfCompletion	autoload/omni/cpp/complete.vim	/^function! s:FindStartPositionOfCompletion()$/;"	f
FindWindow	plugin/minibufexpl.vim	/^function! <SID>FindWindow(bufName, doDebug)$/;"	f
GLOBAL_INC_DIR	c-support/codesnippets/Makefile	/^GLOBAL_INC_DIR  =$/;"	m
GLOBAL_LIBS	c-support/codesnippets/Makefile	/^GLOBAL_LIBS     =$/;"	m
GLOBAL_LIBSS	c-support/codesnippets/Makefile	/^GLOBAL_LIBSS    = $(addprefix $(GLOBAL_LIB_DIR)\/, $(GLOBAL_LIBS))$/;"	m
GLOBAL_LIB_DIR	c-support/codesnippets/Makefile	/^GLOBAL_LIB_DIR  =$/;"	m
GetAccessFilter	autoload/omni/cpp/complete.vim	/^function! s:GetAccessFilter(szFilter, szAccessFilter)$/;"	f
GetAllUsingNamespaceMapFromCurrentBuffer	autoload/omni/cpp/namespaces.vim	/^function! s:GetAllUsingNamespaceMapFromCurrentBuffer(...)$/;"	f
GetAllUsingNamespaceMapFromFile	autoload/omni/cpp/namespaces.vim	/^function! s:GetAllUsingNamespaceMapFromFile(szFilePath, ...)$/;"	f
GetClassScopeAtCursor	autoload/omni/cpp/namespaces.vim	/^function! s:GetClassScopeAtCursor()$/;"	f
GetGooglePythonIndent	syntax/google_python_style.vim	/^function GetGooglePythonIndent(lnum)$/;"	f
GetIncludeListFromCurrentBuffer	autoload/omni/cpp/includes.vim	/^function! s:GetIncludeListFromCurrentBuffer()$/;"	f
GetIncludeListFromFile	autoload/omni/cpp/includes.vim	/^function! s:GetIncludeListFromFile(szFilePath, bUpdate) $/;"	f
GetNamespaceAliasListFromLine	autoload/omni/cpp/namespaces.vim	/^function! s:GetNamespaceAliasListFromLine(szLine)$/;"	f
GetNamespaceAliasMap	autoload/omni/cpp/namespaces.vim	/^function! s:GetNamespaceAliasMap()$/;"	f
GetNamespaceListFromLine	autoload/omni/cpp/namespaces.vim	/^function! s:GetNamespaceListFromLine(szLine)$/;"	f
GetNthItemFromList	plugin/a.vim	/^function! <SID>GetNthItemFromList(list, n) $/;"	f
GetSelectedBuffer	plugin/minibufexpl.vim	/^function! <SID>GetSelectedBuffer()$/;"	f
GetSnippet	plugin/snipMate.vim	/^fun s:GetSnippet(word, scope)$/;"	f
GetSnippets	plugin/snipMate.vim	/^fun! GetSnippets(dir, filetypes)$/;"	f
GetStopPositionForLocalSearch	autoload/omni/cpp/namespaces.vim	/^function! s:GetStopPositionForLocalSearch()$/;"	f
GetSymbol	autoload/omni/cpp/items.vim	/^function! s:GetSymbol(tokens)$/;"	f
GetTagOfSameScope	autoload/omni/cpp/utils.vim	/^function! s:GetTagOfSameScope(listTags, szScopeToMatch)$/;"	f
GetToken	plugin/calendar.vim	/^function! s:GetToken(src,dlm,cnt)$/;"	f
GetTypeInfoOfReturnedType	autoload/omni/cpp/items.vim	/^function! s:GetTypeInfoOfReturnedType(contextStack, szFunctionName)$/;"	f
GetTypeInfoOfVariable	autoload/omni/cpp/items.vim	/^function! s:GetTypeInfoOfVariable(contextStack, szVariable, bSearchDecl)$/;"	f
GetUsingNamespaceListFromMap	autoload/omni/cpp/namespaces.vim	/^function! s:GetUsingNamespaceListFromMap(namespaceMap, ...)$/;"	f
Grep	plugin/grep.vim	/^command! -nargs=* -complete=file Grep$/;"	c
GrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file GrepAdd$/;"	c
GrepArgs	plugin/grep.vim	/^command! -nargs=* GrepArgs$/;"	c
GrepArgsAdd	plugin/grep.vim	/^command! -nargs=* GrepArgsAdd$/;"	c
GrepBuffer	plugin/grep.vim	/^command! -nargs=* GrepBuffer$/;"	c
GrepBufferAdd	plugin/grep.vim	/^command! -nargs=* GrepBufferAdd$/;"	c
Grep_Cygwin_Find	plugin/grep.vim	/^    let Grep_Cygwin_Find = 0$/;"	v
Grep_Default_Filelist	plugin/grep.vim	/^    let Grep_Default_Filelist = '*'$/;"	v
Grep_Default_Options	plugin/grep.vim	/^    let Grep_Default_Options = ''$/;"	v
Grep_Find_Path	plugin/grep.vim	/^    let Grep_Find_Path = 'find'$/;"	v
Grep_Find_Use_Xargs	plugin/grep.vim	/^    let Grep_Find_Use_Xargs = 1$/;"	v
Grep_Null_Device	plugin/grep.vim	/^        let Grep_Null_Device = 'NUL'$/;"	v
Grep_Null_Device	plugin/grep.vim	/^        let Grep_Null_Device = '\/dev\/null'$/;"	v
Grep_OpenQuickfixWindow	plugin/grep.vim	/^    let Grep_OpenQuickfixWindow = 1$/;"	v
Grep_Path	plugin/grep.vim	/^    let Grep_Path = 'grep'$/;"	v
Grep_Shell_Escape_Char	plugin/grep.vim	/^        let Grep_Shell_Escape_Char = ''$/;"	v
Grep_Shell_Escape_Char	plugin/grep.vim	/^        let Grep_Shell_Escape_Char = '\\'$/;"	v
Grep_Shell_Quote_Char	plugin/grep.vim	/^        let Grep_Shell_Quote_Char = "'"$/;"	v
Grep_Shell_Quote_Char	plugin/grep.vim	/^        let Grep_Shell_Quote_Char = ''$/;"	v
Grep_Skip_Dirs	plugin/grep.vim	/^    let Grep_Skip_Dirs = 'RCS CVS SCCS'$/;"	v
Grep_Skip_Files	plugin/grep.vim	/^    let Grep_Skip_Files = '*~ *,v s.*'$/;"	v
Grep_Xargs_Options	plugin/grep.vim	/^    let Grep_Xargs_Options = '--null'$/;"	v
Grep_Xargs_Path	plugin/grep.vim	/^    let Grep_Xargs_Path = 'xargs'$/;"	v
HFileSection	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_HFileSectionList        HFileSection       call C_HFileSectionListInsert   (<f-args>)$/;"	c
HasATagFileOrTagEnvChanged	autoload/omni/cpp/complete.vim	/^function! s:HasATagFileOrTagEnvChanged()$/;"	f
HasEligibleBuffers	plugin/minibufexpl.vim	/^function! <SID>HasEligibleBuffers(delBufNum)$/;"	f
HasTagEnvChanged	autoload/omni/cpp/complete.vim	/^function! s:HasTagEnvChanged()$/;"	f
HiLink	syntax/python3.0.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/python3.0.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
IH	plugin/a.vim	/^comm! -nargs=? -bang IH call AlternateOpenFileUnderCursor("n<bang>", <f-args>)$/;"	c
IHN	plugin/a.vim	/^comm! -nargs=? -bang IHN call AlternateOpenNextFile("<bang>")$/;"	c
IHS	plugin/a.vim	/^comm! -nargs=? -bang IHS call AlternateOpenFileUnderCursor("h<bang>", <f-args>)$/;"	c
IHT	plugin/a.vim	/^comm! -nargs=? -bang IHT call AlternateOpenFileUnderCursor("t<bang>", <f-args>)$/;"	c
IHV	plugin/a.vim	/^comm! -nargs=? -bang IHV call AlternateOpenFileUnderCursor("v<bang>", <f-args>)$/;"	c
IncludeC99Library	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_C99LibraryIncludesList  IncludeC99Library  call C_C99LibraryIncludesInsert (<f-args>)$/;"	c
IncludeCppCLibrary	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_CppCLibraryIncludesList IncludeCppCLibrary call C_CppCLibraryIncludesInsert(<f-args>)$/;"	c
IncludeCppLibrary	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_CppLibraryIncludesList  IncludeCppLibrary  call C_CppLibraryIncludesInsert (<f-args>)$/;"	c
IncludeStdLibrary	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_StdLibraryIncludesList  IncludeStdLibrary  call C_StdLibraryIncludesInsert (<f-args>)$/;"	c
Init	plugin/matrix.vim	/^function! s:Init()$/;"	f
InitComplete	autoload/omni/cpp/complete.vim	/^function! s:InitComplete()$/;"	f
IsCached	autoload/omni/cpp/complete.vim	/^function! s:IsCached(cache, szKey1, szKey2)$/;"	f
IsTypeInfoResolved	autoload/omni/cpp/utils.vim	/^function! s:IsTypeInfoResolved(szTypeInfo)$/;"	f
IsUnnamedType	autoload/omni/cpp/items.vim	/^function! s:IsUnnamedType(tagItem)$/;"	f
KeyMap.All	plugin/NERD_tree.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	plugin/NERD_tree.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Create	plugin/NERD_tree.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.bind	plugin/NERD_tree.vim	/^function! s:KeyMap.bind()$/;"	f
KeywordComment	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_KeywordCommentList      KeywordComment     call C_KeywordCommentListInsert (<f-args>)$/;"	c
LDFLAGS	c-support/codesnippets/Makefile	/^  LDFLAGS      := ${DEBUG_LDFLAGS}$/;"	m
LDFLAGS	c-support/codesnippets/Makefile	/^  LDFLAGS      := ${LDFLAGS}  -pg$/;"	m
LDFLAGS	c-support/codesnippets/Makefile	/^  LDFLAGS      := ${RELEASE_LDFLAGS}$/;"	m
LOCAL_INC_DIR	c-support/codesnippets/Makefile	/^LOCAL_INC_DIR   = $(HOME)\/include$/;"	m
LOCAL_LIBS	c-support/codesnippets/Makefile	/^LOCAL_LIBS      =$/;"	m
LOCAL_LIBSS	c-support/codesnippets/Makefile	/^LOCAL_LIBSS     = $(addprefix $(LOCAL_LIB_DIR)\/, $(LOCAL_LIBS))$/;"	m
LOCAL_LIB_DIR	c-support/codesnippets/Makefile	/^LOCAL_LIB_DIR   = $(HOME)\/lib$/;"	m
Large	plugin/LargeFile.vim	/^com! -bang Large		call s:LargeFile(<bang>0,expand("%"))$/;"	c
LargeFile	plugin/LargeFile.vim	/^augroup LargeFile$/;"	a
LargeFile	plugin/LargeFile.vim	/^fun! s:LargeFile(force,fname)$/;"	f
LocalSearchDecl	autoload/omni/cpp/items.vim	/^function! s:LocalSearchDecl(name)$/;"	f
M	colors/inkpot.vim	/^fun! <SID>M(a)$/;"	f
M	colors/vividchalk.vim	/^fun! s:M(a)$/;"	f
MBEClick	plugin/minibufexpl.vim	/^function! s:MBEClick()$/;"	f
MBEDeleteBuffer	plugin/minibufexpl.vim	/^function! <SID>MBEDeleteBuffer()$/;"	f
MBEDoubleClick	plugin/minibufexpl.vim	/^function! s:MBEDoubleClick()$/;"	f
MBESelectBuffer	plugin/minibufexpl.vim	/^function! <SID>MBESelectBuffer()$/;"	f
MBEbn	plugin/minibufexpl.vim	/^  command! MBEbn call <SID>CycleBuffer(1)$/;"	c
MBEbp	plugin/minibufexpl.vim	/^  command! MBEbp call <SID>CycleBuffer(0)$/;"	c
MRU	plugin/mru.vim	/^command! -nargs=? -complete=customlist,s:MRU_Complete MRU$/;"	c
MRU_AddFile	plugin/mru.vim	/^function! s:MRU_AddFile(acmd_bufnr)$/;"	f
MRU_Add_Menu	plugin/mru.vim	/^    let MRU_Add_Menu = 1$/;"	v
MRU_Auto_Close	plugin/mru.vim	/^    let MRU_Auto_Close = 1$/;"	v
MRU_Cmd	plugin/mru.vim	/^function! s:MRU_Cmd(pat)$/;"	f
MRU_Complete	plugin/mru.vim	/^function! s:MRU_Complete(ArgLead, CmdLine, CursorPos)$/;"	f
MRU_Edit_File	plugin/mru.vim	/^function! s:MRU_Edit_File(filename, sanitized)$/;"	f
MRU_Exclude_Files	plugin/mru.vim	/^    let MRU_Exclude_Files = ''$/;"	v
MRU_File	plugin/mru.vim	/^                let MRU_File = $USERPROFILE . '\\_vim_mru_files'$/;"	v
MRU_File	plugin/mru.vim	/^        let MRU_File = $HOME . '\/.vim_mru_files'$/;"	v
MRU_File	plugin/mru.vim	/^        let MRU_File = $VIM . '\/_vim_mru_files'$/;"	v
MRU_Include_Files	plugin/mru.vim	/^    let MRU_Include_Files = ''$/;"	v
MRU_LoadList	plugin/mru.vim	/^function! s:MRU_LoadList()$/;"	f
MRU_Max_Entries	plugin/mru.vim	/^    let MRU_Max_Entries = 100$/;"	v
MRU_Max_Menu_Entries	plugin/mru.vim	/^    let MRU_Max_Menu_Entries = 10$/;"	v
MRU_Max_Submenu_Entries	plugin/mru.vim	/^    let MRU_Max_Submenu_Entries = 10$/;"	v
MRU_Open_File_In_Tab	plugin/mru.vim	/^function! s:MRU_Open_File_In_Tab(fname, esc_fname)$/;"	f
MRU_Open_File_Use_Tabs	plugin/mru.vim	/^    let MRU_Open_File_Use_Tabs = 0$/;"	v
MRU_Open_Window	plugin/mru.vim	/^function! s:MRU_Open_Window(...)$/;"	f
MRU_Refresh_Menu	plugin/mru.vim	/^function! s:MRU_Refresh_Menu()$/;"	f
MRU_SaveList	plugin/mru.vim	/^function! s:MRU_SaveList()$/;"	f
MRU_Select_File_Cmd	plugin/mru.vim	/^function! s:MRU_Select_File_Cmd(opt) range$/;"	f
MRU_Use_Current_Window	plugin/mru.vim	/^    let MRU_Use_Current_Window = 0$/;"	v
MRU_Warn_Msg	plugin/mru.vim	/^function! s:MRU_Warn_Msg(msg)$/;"	f
MRU_Window_Edit_File	plugin/mru.vim	/^function! s:MRU_Window_Edit_File(fname, multi, edit_type, open_type)$/;"	f
MRU_Window_Height	plugin/mru.vim	/^    let MRU_Window_Height = 8$/;"	v
MRU_Window_Open_Always	plugin/mru.vim	/^    let MRU_Window_Open_Always = 0$/;"	v
MRU_add_files_to_menu	plugin/mru.vim	/^function! s:MRU_add_files_to_menu(prefix, file_list)$/;"	f
MRU_escape_filename	plugin/mru.vim	/^function! s:MRU_escape_filename(fname)$/;"	f
MakeSnip	plugin/snipMate.vim	/^fun! MakeSnip(scope, trigger, content, ...)$/;"	f
Marklar	colors/marklar.vim	/^        command! -nargs=*  Marklar  :call s:Marklar(<f-args>)$/;"	c
Marklar	colors/marklar.vim	/^        function! s:Marklar(...)$/;"	f
Matrix	plugin/matrix.vim	/^   command! Matrix call Matrix()$/;"	c
Matrix	plugin/matrix.vim	/^function! Matrix()$/;"	f
Max	plugin/minibufexpl.vim	/^function! <SID>Max(argOne, argTwo)$/;"	f
MenuController.New	plugin/NERD_tree.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	plugin/NERD_tree.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	plugin/NERD_tree.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	plugin/NERD_tree.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	plugin/NERD_tree.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	plugin/NERD_tree.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	plugin/NERD_tree.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	plugin/NERD_tree.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	plugin/NERD_tree.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	plugin/NERD_tree.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	plugin/NERD_tree.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.showMenu	plugin/NERD_tree.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuItem.All	plugin/NERD_tree.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	plugin/NERD_tree.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	plugin/NERD_tree.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	plugin/NERD_tree.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	plugin/NERD_tree.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	plugin/NERD_tree.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	plugin/NERD_tree.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
MiniBufExplorer	plugin/minibufexpl.vim	/^  command! MiniBufExplorer  call <SID>StartExplorer(1, -1)$/;"	c
MiniBufExplorer	plugin/minibufexpl.vim	/^augroup MiniBufExplorer$/;"	a
Mru	plugin/mru.vim	/^command! -nargs=? -complete=customlist,s:MRU_Complete Mru$/;"	c
NERDTree	plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeAddKeyMap	plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddSubmenu	plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeClose	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeCopyNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeDeleteNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeFind	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeFind call s:findAndRevealPath()$/;"	c
NERDTreeFromBookmark	plugin/NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeHijackNetrw	plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeMoveNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeQuickLook	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRender	plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRevealInFinder	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeToggle	plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
NextAlternate	plugin/a.vim	/^function! NextAlternate(bang)$/;"	f
OBJECTS	c-support/codesnippets/Makefile	/^OBJECTS         = $(addsuffix .o,$(BASENAMES))$/;"	m
PREREQUISITES	c-support/codesnippets/Makefile	/^PREREQUISITES   = $(addprefix .,$(addsuffix .d,$(BASENAMES)))$/;"	m
PROFILE	c-support/codesnippets/Makefile	/^PROFILE        := NO$/;"	m
PYDICTION_DICT	after/ftplugin/pydiction.py	/^PYDICTION_DICT = r'complete-dict'$/;"	v
PYDICTION_DICT_BACKUP	after/ftplugin/pydiction.py	/^PYDICTION_DICT_BACKUP = r'complete-dict.last'$/;"	v
Path.AbsolutePathFor	plugin/NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	plugin/NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	plugin/NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	plugin/NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	plugin/NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.Slash	plugin/NERD_tree.vim	/^function! s:Path.Slash()$/;"	f
Path.WinToUnixPath	plugin/NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._str	plugin/NERD_tree.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	plugin/NERD_tree.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	plugin/NERD_tree.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	plugin/NERD_tree.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	plugin/NERD_tree.vim	/^function! s:Path._strForUI()$/;"	f
Path.bookmarkNames	plugin/NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	plugin/NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	plugin/NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	plugin/NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	plugin/NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	plugin/NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.delete	plugin/NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	plugin/NERD_tree.vim	/^function! s:Path.displayString()$/;"	f
Path.equals	plugin/NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	plugin/NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	plugin/NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	plugin/NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	plugin/NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	plugin/NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortOrderIndex	plugin/NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	plugin/NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.isUnder	plugin/NERD_tree.vim	/^function! s:Path.isUnder(path)$/;"	f
Path.readInfoFromDisk	plugin/NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	plugin/NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	plugin/NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	plugin/NERD_tree.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	plugin/NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
ProcessFile	plugin/snipMate.vim	/^fun s:ProcessFile(file, ft, ...)$/;"	f
ProcessSnippet	autoload/snipMate.vim	/^fun s:ProcessSnippet(snip)$/;"	f
RELEASE_CFLAGS	c-support/codesnippets/Makefile	/^RELEASE_CFLAGS  := -Wall -ansi -pedantic -O3$/;"	m
RELEASE_LDFLAGS	c-support/codesnippets/Makefile	/^RELEASE_LDFLAGS  :=$/;"	m
Ragrep	plugin/grep.vim	/^command! -nargs=* -complete=file Ragrep$/;"	c
RagrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file RagrepAdd$/;"	c
Rand	plugin/matrix.vim	/^function! s:Rand()$/;"	f
Regrep	plugin/grep.vim	/^command! -nargs=* -complete=file Regrep$/;"	c
RegrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file RegrepAdd$/;"	c
RemoveCComments	autoload/omni/cpp/utils.vim	/^function! s:RemoveCComments(szLine)$/;"	f
RemoveSnippet	autoload/snipMate.vim	/^fun s:RemoveSnippet()$/;"	f
Reset	plugin/matrix.vim	/^function! s:Reset()$/;"	f
ResetSnippets	plugin/snipMate.vim	/^fun! ResetSnippets()$/;"	f
ResizeWindow	plugin/minibufexpl.vim	/^function! <SID>ResizeWindow()$/;"	f
ResolveAliasInNamespaceList	autoload/omni/cpp/namespaces.vim	/^function! s:ResolveAliasInNamespaceList(mapNamespaceAlias, listNamespaces)$/;"	f
ResolveAliasKey	autoload/omni/cpp/namespaces.vim	/^function! s:ResolveAliasKey(mapNamespaceAlias, szAlias)$/;"	f
ResolveAliasKeys	autoload/omni/cpp/namespaces.vim	/^function! s:ResolveAliasKeys(mapNamespaceAlias)$/;"	f
ResolveCCast	autoload/omni/cpp/items.vim	/^function! s:ResolveCCast(tokens)$/;"	f
ResolveCast	autoload/omni/cpp/items.vim	/^function! s:ResolveCast(tokens, startChar, endChar)$/;"	f
ResolveCppCast	autoload/omni/cpp/items.vim	/^function! s:ResolveCppCast(tokens)$/;"	f
ResolveNamespace	autoload/omni/cpp/namespaces.vim	/^function! s:ResolveNamespace(namespace, mapCurrentContexts)$/;"	f
ResolveSymbol	autoload/omni/cpp/items.vim	/^function! s:ResolveSymbol(contextStack, szSymbol, szTagFilter)$/;"	f
RestoreVals	after/ftplugin/python_pydiction.vim	/^    function! s:RestoreVals()$/;"	f
Rfgrep	plugin/grep.vim	/^command! -nargs=* -complete=file Rfgrep$/;"	c
RfgrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file RfgrepAdd$/;"	c
Rgrep	plugin/grep.vim	/^command! -nargs=* -complete=file Rgrep$/;"	c
RgrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file RgrepAdd$/;"	c
RunGrep	plugin/grep.vim	/^function! s:RunGrep(cmd_name, grep_cmd, action, ...)$/;"	f
RunGrepCmd	plugin/grep.vim	/^function! s:RunGrepCmd(cmd, pattern, action)$/;"	f
RunGrepRecursive	plugin/grep.vim	/^function! s:RunGrepRecursive(cmd_name, grep_cmd, action, ...)$/;"	f
RunGrepSpecial	plugin/grep.vim	/^function! s:RunGrepSpecial(cmd_name, which, action, ...)$/;"	f
SID_PREFIX	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:SID_PREFIX()$/;"	f
SOURCES	c-support/codesnippets/Makefile	/^SOURCES         := main.c $/;"	m
STDOUT_ONLY	after/ftplugin/pydiction.py	/^        STDOUT_ONLY = True$/;"	v
STDOUT_ONLY	after/ftplugin/pydiction.py	/^STDOUT_ONLY = False$/;"	v
SYS_LIBS	c-support/codesnippets/Makefile	/^SYS_LIBS        = -lm$/;"	m
SearchDecl	autoload/omni/cpp/items.vim	/^function! s:SearchDecl(szVariable)$/;"	f
SearchGlobalMembers	autoload/omni/cpp/complete.vim	/^function! s:SearchGlobalMembers(szBase)$/;"	f
SearchMembers	autoload/omni/cpp/complete.vim	/^function! s:SearchMembers(resolvedTagItem, szBase)$/;"	f
SearchTypeInfoOfDecl	autoload/omni/cpp/items.vim	/^function! s:SearchTypeInfoOfDecl(szVariable)$/;"	f
SelectWord	autoload/snipMate.vim	/^fun s:SelectWord()$/;"	f
SetVals	after/ftplugin/python_pydiction.vim	/^    function! s:SetVals()$/;"	f
ShowAvailableSnips	plugin/snipMate.vim	/^fun! ShowAvailableSnips()$/;"	f
ShowBuffers	plugin/minibufexpl.vim	/^function! <SID>ShowBuffers(delBufNum)$/;"	f
SnippetsIndent	indent/snippet.vim	/^function! SnippetsIndent()"{{{$/;"	f
SpecialComment	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_SpecialCommentList      SpecialComment     call C_SpecialCommentListInsert (<f-args>)$/;"	c
StartBufExplorer	plugin/bufexplorer.vim	/^function! StartBufExplorer(open)$/;"	f
StartExplorer	plugin/minibufexpl.vim	/^function! <SID>StartExplorer(sticky, delBufNum)$/;"	f
StopExplorer	plugin/minibufexpl.vim	/^function! <SID>StopExplorer(sticky)$/;"	f
Syntax_extensions	colors/lettuce.vim	/^augroup Syntax_extensions$/;"	a
TARBALL_EXCLUDE	c-support/codesnippets/Makefile	/^TARBALL_EXCLUDE = *.{o,gz,zip}$/;"	m
TMiniBufExplorer	plugin/minibufexpl.vim	/^  command! TMiniBufExplorer  call <SID>ToggleExplorer()$/;"	c
TabComplete	after/ftplugin/python_pydiction.vim	/^    function! s:TabComplete(direction)$/;"	f
Tabula	colors/tabula.vim	/^function! Tabula()$/;"	f
Tabula_1	colors/tabula.vim	/^function! Tabula_1()$/;"	f
Tabula_2	colors/tabula.vim	/^function! Tabula_2()$/;"	f
Tabula_3	colors/tabula.vim	/^function! Tabula_3()$/;"	f
Tabula_4	colors/tabula.vim	/^function! Tabula_4()$/;"	f
Tabula_5	colors/tabula.vim	/^function! Tabula_5()$/;"	f
Tabula_6	colors/tabula.vim	/^function! Tabula_6()$/;"	f
Tabula_7	colors/tabula.vim	/^function! Tabula_7()$/;"	f
Tabula_8	colors/tabula.vim	/^function! Tabula_8()$/;"	f
Tabula_9	colors/tabula.vim	/^function! Tabula_9()$/;"	f
TagList_IsValid	plugin/taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	plugin/taglist.vim	/^function! TagList_Start()$/;"	f
TagList_WrapUp	plugin/taglist.vim	/^function! TagList_WrapUp()$/;"	f
TagList_title	plugin/taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
TagPopupList	autoload/omni/cpp/complete.vim	/^function! s:TagPopupList(szTypeName, szBase)$/;"	f
Tlist	plugin/taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	plugin/taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	plugin/taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistDebug	plugin/taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistHighlightTag	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistLock	plugin/taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistMessages	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
TlistOpen	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
TlistSessionLoad	plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistShowPrototype	plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSync	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistToggle	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistUndebug	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistUnlock	plugin/taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistUpdate	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
Tlist_Add_Files	plugin/taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	plugin/taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	plugin/taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	plugin/taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	plugin/taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	plugin/taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	plugin/taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	plugin/taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	plugin/taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	plugin/taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	plugin/taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	plugin/taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	plugin/taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	plugin/taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	plugin/taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	plugin/taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	plugin/taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	plugin/taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	plugin/taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	plugin/taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	plugin/taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tag_Scope	plugin/taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Extract_Tagtype	plugin/taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_FileType_Init	plugin/taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	plugin/taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	plugin/taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	plugin/taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	plugin/taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	plugin/taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Tag_Linenum	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	plugin/taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tagname_By_Line	plugin/taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	plugin/taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	plugin/taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	plugin/taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	plugin/taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	plugin/taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	plugin/taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	plugin/taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	plugin/taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	plugin/taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	plugin/taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	plugin/taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	plugin/taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	plugin/taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	plugin/taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Post_Close_Cleanup	plugin/taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	plugin/taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	plugin/taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_File_Always	plugin/taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Process_Filelist	plugin/taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Refresh	plugin/taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	plugin/taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	plugin/taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	plugin/taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	plugin/taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	plugin/taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	plugin/taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	plugin/taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	plugin/taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Sort_Type	plugin/taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	plugin/taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	plugin/taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	plugin/taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_Use_Horiz_Window	plugin/taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	plugin/taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	plugin/taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_User_Removed_File	plugin/taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Vim_Session_Load	plugin/taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	plugin/taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_WinHeight	plugin/taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	plugin/taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_Window_Check_Auto_Open	plugin/taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	plugin/taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	plugin/taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	plugin/taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	plugin/taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	plugin/taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	plugin/taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	plugin/taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	plugin/taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	plugin/taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	plugin/taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	plugin/taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	plugin/taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	plugin/taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	plugin/taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	plugin/taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	plugin/taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	plugin/taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	plugin/taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	plugin/taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Help_Text	plugin/taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	plugin/taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	plugin/taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	plugin/taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
ToggleExplorer	plugin/minibufexpl.vim	/^function! <SID>ToggleExplorer()$/;"	f
TokensToString	autoload/omni/cpp/items.vim	/^function! s:TokensToString(tokens)$/;"	f
TreeDirNode.AbsoluteTreeRoot	plugin/NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	plugin/NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	plugin/NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode._initChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	plugin/NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode.activate	plugin/NERD_tree.vim	/^function! s:TreeDirNode.activate(forceKeepWinOpen)$/;"	f
TreeDirNode.addChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	plugin/NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	plugin/NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.open	plugin/NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	plugin/NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	plugin/NERD_tree.vim	/^function! s:TreeDirNode.reveal(path)$/;"	f
TreeDirNode.sortChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	plugin/NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetRootLineNum	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	plugin/NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode._renderToString	plugin/NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode.activate	plugin/NERD_tree.vim	/^function! s:TreeFileNode.activate(forceKeepWinOpen)$/;"	f
TreeFileNode.bookmark	plugin/NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	plugin/NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	plugin/NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	plugin/NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	plugin/NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	plugin/NERD_tree.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	plugin/NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	plugin/NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.isRoot	plugin/NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	plugin/NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	plugin/NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.open	plugin/NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openInNewTab	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	plugin/NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	plugin/NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	plugin/NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	plugin/NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TriggerSnippet	plugin/snipMate.vim	/^fun! TriggerSnippet()$/;"	f
UMiniBufExplorer	plugin/minibufexpl.vim	/^  command! UMiniBufExplorer  call <SID>AutoUpdate(-1)$/;"	c
Unlarge	plugin/LargeFile.vim	/^com! Unlarge			call s:Unlarge()$/;"	c
Unlarge	plugin/LargeFile.vim	/^fun! s:Unlarge()$/;"	f
UpdateChangedSnip	autoload/snipMate.vim	/^fun s:UpdateChangedSnip(entering)$/;"	f
UpdatePlaceholderTabStops	autoload/snipMate.vim	/^fun s:UpdatePlaceholderTabStops()$/;"	f
UpdateTabStops	autoload/snipMate.vim	/^fun s:UpdateTabStops()$/;"	f
UpdateVars	autoload/snipMate.vim	/^fun s:UpdateVars()$/;"	f
X	colors/desert256.vim	/^    fun <SID>X(group, fg, bg, attr)$/;"	f
X	colors/inkpot.vim	/^fun! <SID>X(a)$/;"	f
X	colors/jellybeans.vim	/^fun! s:X(group, fg, bg, attr, lcfg, lcbg)$/;"	f
X	colors/summerfruit256.vim	/^    fun <SID>X(group, fg, bg, attr)$/;"	f
X	colors/vividchalk.vim	/^fun! s:X(a)$/;"	f
X	colors/wombat256.vim	/^fun <SID>X(group, fg, bg, attr)$/;"	f
YRCheckClipboard	plugin/yankring.vim	/^command!                  -nargs=? YRCheckClipboard call s:YRCheckClipboard(<args>)$/;"	c
YRCheckClipboard	plugin/yankring.vim	/^function! s:YRCheckClipboard()$/;"	f
YRClear	plugin/yankring.vim	/^command!                           YRClear          call s:YRClear()$/;"	c
YRClear	plugin/yankring.vim	/^function! s:YRClear()$/;"	f
YRDeleteRange	plugin/yankring.vim	/^command! -range -bang     -nargs=? YRDeleteRange    <line1>,<line2>call s:YRYankRange(<bang>1, <args>)$/;"	c
YRDisplayElem	plugin/yankring.vim	/^function! s:YRDisplayElem(disp_nbr, script_var)$/;"	f
YRDoRepeat	plugin/yankring.vim	/^function! s:YRDoRepeat()$/;"	f
YRErrorMsg	plugin/yankring.vim	/^function! s:YRErrorMsg(msg)$/;"	f
YRFocusGained	plugin/yankring.vim	/^function! s:YRFocusGained()$/;"	f
YRGetChar	plugin/yankring.vim	/^function! s:YRGetChar()$/;"	f
YRGetElem	plugin/yankring.vim	/^command!                  -nargs=* YRGetElem        call s:YRGetElem(<args>)$/;"	c
YRGetElem	plugin/yankring.vim	/^function! s:YRGetElem(...)$/;"	f
YRGetMultiple	plugin/yankring.vim	/^command!        -bang     -nargs=? YRGetMultiple    call s:YRGetMultiple(<bang>0, <args>)$/;"	c
YRGetMultiple	plugin/yankring.vim	/^function! s:YRGetMultiple(reverse_order, ...)$/;"	f
YRGetNextElem	plugin/yankring.vim	/^function! s:YRGetNextElem(start, iter)$/;"	f
YRGetValElemNbr	plugin/yankring.vim	/^function! s:YRGetValElemNbr( position, type )$/;"	f
YRHistoryDelete	plugin/yankring.vim	/^function! s:YRHistoryDelete()$/;"	f
YRHistoryRead	plugin/yankring.vim	/^function! s:YRHistoryRead()$/;"	f
YRHistorySave	plugin/yankring.vim	/^function! s:YRHistorySave()$/;"	f
YRHistoryUpgrade	plugin/yankring.vim	/^function! s:YRHistoryUpgrade(version)$/;"	f
YRInit	plugin/yankring.vim	/^function! s:YRInit(...)$/;"	f
YRInsertLeave	plugin/yankring.vim	/^function! s:YRInsertLeave()$/;"	f
YRMRUAdd	plugin/yankring.vim	/^function! s:YRMRUAdd( mru_list, element, element_type )$/;"	f
YRMRUDel	plugin/yankring.vim	/^function! s:YRMRUDel( mru_list, elem_nbr )$/;"	f
YRMRUElemFormat	plugin/yankring.vim	/^function! s:YRMRUElemFormat( element, element_type )$/;"	f
YRMRUGet	plugin/yankring.vim	/^function! s:YRMRUGet( mru_list, position )$/;"	f
YRMRUHas	plugin/yankring.vim	/^function! s:YRMRUHas( mru_list, find_str )$/;"	f
YRMRUReset	plugin/yankring.vim	/^function! s:YRMRUReset( mru_list )$/;"	f
YRMRUSize	plugin/yankring.vim	/^function! s:YRMRUSize( mru_list )$/;"	f
YRMapsCreate	plugin/yankring.vim	/^command!                  -nargs=0 YRMapsCreate     call s:YRMapsCreate()$/;"	c
YRMapsCreate	plugin/yankring.vim	/^function! s:YRMapsCreate(...)$/;"	f
YRMapsDelete	plugin/yankring.vim	/^command!                  -nargs=0 YRMapsDelete     call s:YRMapsDelete()$/;"	c
YRMapsDelete	plugin/yankring.vim	/^function! s:YRMapsDelete(...)$/;"	f
YRMapsExpression	plugin/yankring.vim	/^function! YRMapsExpression(sid, motion, ...)$/;"	f
YRMapsMacro	plugin/yankring.vim	/^command! -count=1 -bang   -nargs=0 YRMapsMacro      call s:YRMapsMacro(<bang>0, <args>)$/;"	c
YRMapsMacro	plugin/yankring.vim	/^function! s:YRMapsMacro(bang, ...)$/;"	f
YRPaste	plugin/yankring.vim	/^command! -count -register -nargs=* YRPaste          call s:YRPaste(0,1,<args>)$/;"	c
YRPaste	plugin/yankring.vim	/^function! s:YRPaste(replace_last_paste_selection, nextvalue, direction, ...)$/;"	f
YRPop	plugin/yankring.vim	/^command!                  -nargs=? YRPop            <line1>,<line2>call s:YRPop(<args>)$/;"	c
YRPop	plugin/yankring.vim	/^function! s:YRPop(...)$/;"	f
YRPush	plugin/yankring.vim	/^command!        -register -nargs=? YRPush           call s:YRPush(<args>)$/;"	c
YRPush	plugin/yankring.vim	/^function! s:YRPush(...)$/;"	f
YRRecord	plugin/yankring.vim	/^function! YRRecord(...)$/;"	f
YRRecord3	plugin/yankring.vim	/^function! YRRecord3(...)$/;"	f
YRRegister	plugin/yankring.vim	/^function! s:YRRegister()$/;"	f
YRReplace	plugin/yankring.vim	/^command!                  -nargs=* YRReplace        call s:YRPaste(1,<f-args>)$/;"	c
YRReset	plugin/yankring.vim	/^function! s:YRReset()$/;"	f
YRSearch	plugin/yankring.vim	/^command!                  -nargs=? YRSearch         call s:YRSearch(<q-args>)$/;"	c
YRSearch	plugin/yankring.vim	/^function! s:YRSearch(...)$/;"	f
YRSetNumberedReg	plugin/yankring.vim	/^function! s:YRSetNumberedReg()$/;"	f
YRSetPrevOP	plugin/yankring.vim	/^function! s:YRSetPrevOP(op_code, count, reg, mode)$/;"	f
YRShow	plugin/yankring.vim	/^command!                  -nargs=? YRShow           call s:YRShow(<args>)$/;"	c
YRShow	plugin/yankring.vim	/^function! s:YRShow(...)$/;"	f
YRToggle	plugin/yankring.vim	/^command!                  -nargs=? YRToggle         call s:YRToggle(<args>)$/;"	c
YRToggle	plugin/yankring.vim	/^function! s:YRToggle(...)$/;"	f
YRWarningMsg	plugin/yankring.vim	/^function! s:YRWarningMsg(msg)$/;"	f
YRWinLeave	plugin/yankring.vim	/^function! s:YRWinLeave()$/;"	f
YRWindowAction	plugin/yankring.vim	/^function! s:YRWindowAction(op, cmd_mode) range$/;"	f
YRWindowActionN	plugin/yankring.vim	/^function! s:YRWindowActionN(op, cmd_mode)$/;"	f
YRWindowOpen	plugin/yankring.vim	/^function! s:YRWindowOpen(results)$/;"	f
YRWindowStatus	plugin/yankring.vim	/^function! s:YRWindowStatus(show_help)$/;"	f
YRWindowUpdate	plugin/yankring.vim	/^function! s:YRWindowUpdate()$/;"	f
YRYankCount	plugin/yankring.vim	/^command! -count -register -nargs=* YRYankCount      call s:YRYankCount(<args>)$/;"	c
YRYankCount	plugin/yankring.vim	/^function! s:YRYankCount(...) range$/;"	f
YRYankRange	plugin/yankring.vim	/^command! -range -bang     -nargs=? YRYankRange      <line1>,<line2>call s:YRYankRange(<bang>0, <args>)$/;"	c
YRYankRange	plugin/yankring.vim	/^function! s:YRYankRange(do_delete_selection, ...) range$/;"	f
YankRing	plugin/yankring.vim	/^augroup YankRing$/;"	a
ZIP_EXCLUDE	c-support/codesnippets/Makefile	/^ZIP_EXCLUDE     = *.{o,gz,zip}$/;"	m
__author__	after/ftplugin/pydiction.py	/^__author__ = "Ryan Kulla (rkulla AT gmail DOT com)"$/;"	v
__copyright__	after/ftplugin/pydiction.py	/^__copyright__ = "Copyright (c) 2003-2009 Ryan Kulla"$/;"	v
__curry_stub	autoload/vital/_f9b384/functor.vim	/^function! s:__curry_stub(...) dict$/;"	f
__get_map_command	autoload/vital/_f9b384/mapping.vim	/^function! s:__get_map_command(type, mode, dict, lhs, rhs)$/;"	f
__get_unmap_command	autoload/vital/_f9b384/mapping.vim	/^function! s:__get_unmap_command(type, mode, dict, lhs)$/;"	f
__matchNode	autoload/vital/_f9b384/web/xml.vim	/^function! s:__matchNode(node, cond)$/;"	f
__parse_tree	autoload/vital/_f9b384/web/xml.vim	/^function! s:__parse_tree(ctx, top)$/;"	f
__sid	autoload/vital/_f9b384/functor.vim	/^function! s:__sid()$/;"	f
__template.childNode	autoload/vital/_f9b384/web/xml.vim	/^function! s:__template.childNode(...) dict$/;"	f
__template.childNodes	autoload/vital/_f9b384/web/xml.vim	/^function! s:__template.childNodes(...) dict$/;"	f
__template.find	autoload/vital/_f9b384/web/xml.vim	/^function! s:__template.find(...) dict$/;"	f
__template.findAll	autoload/vital/_f9b384/web/xml.vim	/^function! s:__template.findAll(...) dict$/;"	f
__template.toString	autoload/vital/_f9b384/web/xml.vim	/^function! s:__template.toString() dict$/;"	f
__template.value	autoload/vital/_f9b384/web/xml.vim	/^function! s:__template.value(...) dict$/;"	f
__urlencode_char	autoload/vital/_f9b384/web/http.vim	/^function! s:__urlencode_char(c)$/;"	f
__version__	after/ftplugin/pydiction.py	/^__version__ = "1.2"$/;"	v
_build_module	autoload/vital/_f9b384.vim	/^function! s:_build_module(sid)$/;"	f
_compare	autoload/vital/_f9b384/data/list.vim	/^function! s:_compare(a, b)$/;"	f
_encode_name	autoload/vital/_f9b384/system/cache.vim	/^function! s:_encode_name(cache_dir, filename)$/;"	f
_import	autoload/vital/_f9b384.vim	/^function! s:_import(name, scripts)$/;"	f
_redir	autoload/vital/_f9b384.vim	/^function! s:_redir(cmd)$/;"	f
_scripts	autoload/vital/_f9b384.vim	/^function! s:_scripts()$/;"	f
_split_by_wcswitdh	autoload/vital/_f9b384/data/string.vim	/^function! s:_split_by_wcswitdh(body, x)$/;"	f
_split_by_wcswitdh_once	autoload/vital/_f9b384/data/string.vim	/^function! s:_split_by_wcswitdh_once(body, x)$/;"	f
_unify_path	autoload/vital/_f9b384.vim	/^function! s:_unify_path(path)$/;"	f
_wcwidth	autoload/vital/_f9b384/prelude.vim	/^  function! s:_wcwidth(ucs)"{{{$/;"	f
action_table.expand.func	autoload/unite/sources/snippet.vim	/^function! s:action_table.expand.func(candidate)"{{{$/;"	f
action_table.preview.func	autoload/unite/sources/snippet.vim	/^function! s:action_table.preview.func(candidates)"{{{$/;"	f
activateNode	plugin/NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
alternateExtensionsDict	plugin/a.vim	/^let alternateExtensionsDict = {}$/;"	v
analyze_dictionary_variable_line	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:analyze_dictionary_variable_line(line, keyword_dict, var_name)"{{{$/;"	f
analyze_function_line	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:analyze_function_line(line, keyword_dict, prototype)"{{{$/;"	f
analyze_variable_line	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:analyze_variable_line(line, keyword_dict)"{{{$/;"	f
answer	after/ftplugin/pydiction.py	/^                                    PYDICTION_DICT_BACKUP)$/;"	v
apply_opts	colors/marklar.vim	/^        function! s:apply_opts()$/;"	f
async_load	autoload/neocomplcache/cache.vim	/^function! s:async_load(argv, cache_dir, filename)"{{{$/;"	f
b:current_syntax	syntax/python3.0.vim	/^let b:current_syntax = "python"$/;"	v
b:did_C_ftplugin	ftplugin/c.vim	/^let b:did_C_ftplugin = 1$/;"	v
b:did_indent	indent/snippet.vim	/^let b:did_indent = 1$/;"	v
b:did_make_ftplugin	ftplugin/make.vim	/^let b:did_make_ftplugin = 1$/;"	v
b:undo_ftplugin	ftplugin/snippet.vim	/^    let b:undo_ftplugin = ''$/;"	v
b:undo_ftplugin	ftplugin/snippet.vim	/^let b:undo_ftplugin .= '$/;"	v
b:undo_indent	indent/snippet.vim	/^    let b:undo_indent = ''$/;"	v
b:undo_indent	indent/snippet.vim	/^let b:undo_indent .= '$/;"	v
bind	autoload/vital/_f9b384/functor.vim	/^function! s:bind(callable, this)$/;"	f
bindMappings	plugin/NERD_tree.vim	/^function! s:bindMappings()$/;"	f
bookmarkNode	plugin/NERD_tree.vim	/^function! s:bookmarkNode(...)$/;"	f
break	autoload/vital/_f9b384/data/list.vim	/^function! s:break(f, xs)$/;"	f
bufInWindows	plugin/NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
caching	autoload/neocomplcache/sources/dictionary_complete.vim	/^function! s:caching()"{{{$/;"	f
caching	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:caching()"{{{$/;"	f
caching	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:caching()"{{{$/;"	f
caching_buffer	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:caching_buffer(name)"{{{$/;"	f
caching_completion_from_dict	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:caching_completion_from_dict(dict_name)"{{{$/;"	f
caching_current_buffer	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:caching_current_buffer(start, end, is_auto)"{{{$/;"	f
caching_current_buffer	autoload/neocomplcache/sources/member_complete.vim	/^function! s:caching_current_buffer(start, end)"{{{$/;"	f
caching_current_files	autoload/neocomplcache/sources/filename_complete.vim	/^function! s:caching_current_files()$/;"	f
caching_dictionary	autoload/neocomplcache/sources/dictionary_complete.vim	/^function! s:caching_dictionary(filetype)$/;"	f
caching_from_dict	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:caching_from_dict(dict_name, kind)"{{{$/;"	f
caching_from_syn	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:caching_from_syn(filetype)"{{{$/;"	f
caching_include	autoload/neocomplcache/sources/include_complete.vim	/^function! s:caching_include(bufname)"{{{$/;"	f
caching_prototype_from_dict	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:caching_prototype_from_dict(dict_name)"{{{$/;"	f
caching_snippets	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:caching_snippets(filetype)"{{{$/;"	f
caching_tags	autoload/neocomplcache/sources/tags_complete.vim	/^function! s:caching_tags(bufname, force)"{{{$/;"	f
calc_frequency	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:calc_frequency()"{{{$/;"	f
call	autoload/vital/_f9b384/functor.vim	/^function! s:call(callable, args, ...)$/;"	f
calloc_double_matrix	c-support/codesnippets/calloc_double_matrix.c	/^calloc_double_matrix ( int rows, int columns )$/;"	f	signature:( int rows, int columns )
calloc_int_matrix	c-support/codesnippets/calloc_int_matrix.c	/^calloc_int_matrix ( int rows, int columns )$/;"	f	signature:( int rows, int columns )
centerView	plugin/NERD_tree.vim	/^function! s:centerView()$/;"	f
chCwd	plugin/NERD_tree.vim	/^function! s:chCwd()$/;"	f
chRoot	plugin/NERD_tree.vim	/^function! s:chRoot()$/;"	f
char_range	autoload/vital/_f9b384/data/list.vim	/^function! s:char_range(from, to)$/;"	f
checkForActivate	plugin/NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	plugin/NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
check_buffer	autoload/neocomplcache/sources/include_complete.vim	/^function! s:check_buffer(bufnumber, is_force)"{{{$/;"	f
check_changed_buffer	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:check_changed_buffer(bufnumber)"{{{$/;"	f
check_deleted_buffer	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:check_deleted_buffer()"{{{$/;"	f
check_old_cache	autoload/vital/_f9b384/system/cache.vim	/^function! s:check_old_cache(cache_dir, filename)$/;"	f
check_source	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:check_source()"{{{$/;"	f
checkargs	colors/calmar256-dark.vim	/^function! s:checkargs(arg)$/;"	f
checkargs	colors/calmar256-light.vim	/^function! s:checkargs(arg)$/;"	f
choose	colors/vividchalk.vim	/^function! s:choose(mediocre,good)$/;"	f
chop	autoload/vital/_f9b384/data/string.vim	/^function! s:chop(str) "{{{$/;"	f
clearBookmarks	plugin/NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
closeChildren	plugin/NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	plugin/NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closeTree	plugin/NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	plugin/NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	plugin/NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	plugin/NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
color	colors/desert256.vim	/^    fun <SID>color(r, g, b)$/;"	f
color	colors/jellybeans.vim	/^fun! s:color(r, g, b)$/;"	f
color	colors/summerfruit256.vim	/^    fun <SID>color(r, g, b)$/;"	f
color	colors/wombat256.vim	/^fun <SID>color(r, g, b)$/;"	f
colors_name	colors/adaryn.vim	/^let colors_name = "adaryn"$/;"	v
colors_name	colors/autumn.vim	/^let colors_name = "autumn"$/;"	v
colors_name	colors/autumn2.vim	/^let colors_name = "autumn"$/;"	v
colors_name	colors/autumnleaf.vim	/^let colors_name="AutumnLeaf"$/;"	v
colors_name	colors/breeze.vim	/^let colors_name = "breeze"$/;"	v
colors_name	colors/buttercream.vim	/^let colors_name = "buttercream"$/;"	v
colors_name	colors/candy.vim	/^let colors_name = "candy"$/;"	v
colors_name	colors/cleanphp.vim	/^let colors_name = "cleanphp"$/;"	v
colors_name	colors/dawn.vim	/^let colors_name = "dawn"$/;"	v
colors_name	colors/dusk.vim	/^let colors_name = "dusk"$/;"	v
colors_name	colors/earendel.vim	/^let colors_name = "earendel"$/;"	v
colors_name	colors/fine_blue.vim	/^let colors_name = "fine_blue"$/;"	v
colors_name	colors/fine_blue2.vim	/^let colors_name = "fine_blue"$/;"	v
colors_name	colors/fnaqevan.vim	/^let colors_name = "fnaqevan"$/;"	v
colors_name	colors/fog.vim	/^let colors_name = "fog"$/;"	v
colors_name	colors/freya.vim	/^let colors_name = "freya"$/;"	v
colors_name	colors/fruit.vim	/^let colors_name = "fruit"$/;"	v
colors_name	colors/fruity.vim	/^let colors_name = "fruity"$/;"	v
colors_name	colors/guardian.vim	/^let colors_name   = "Guardian"$/;"	v
colors_name	colors/herald.vim	/^let colors_name = "herald"$/;"	v
colors_name	colors/inkpot.vim	/^let colors_name = "inkpot"$/;"	v
colors_name	colors/ironman.vim	/^let colors_name = "ironman"$/;"	v
colors_name	colors/jellybeans.vim	/^let colors_name = "jellybeans"$/;"	v
colors_name	colors/kellys.vim	/^let colors_name = "kellys"$/;"	v
colors_name	colors/lucius.vim	/^let colors_name="lucius"$/;"	v
colors_name	colors/martin_krischik.vim	/^let colors_name = "martin_krischik"$/;"	v
colors_name	colors/moria.vim	/^let colors_name = "moria"$/;"	v
colors_name	colors/mustang.vim	/^let colors_name = "mustang"$/;"	v
colors_name	colors/neon.vim	/^let colors_name = "neon"$/;"	v
colors_name	colors/night.vim	/^let colors_name = "night"$/;"	v
colors_name	colors/no_quarter.vim	/^let colors_name = "no_quarter"$/;"	v
colors_name	colors/pyte.vim	/^let colors_name = "pyte"$/;"	v
colors_name	colors/rdark.vim	/^let colors_name = "rdark"$/;"	v
colors_name	colors/satori.vim	/^let colors_name = "satori"$/;"	v
colors_name	colors/sea.vim	/^let colors_name = "sea"$/;"	v
colors_name	colors/spring.vim	/^let colors_name = "spring"$/;"	v
colors_name	colors/tango.vim	/^let colors_name = "tango"$/;"	v
colors_name	colors/tango2.vim	/^let colors_name = "tango2"$/;"	v
colors_name	colors/taqua.vim	/^let colors_name="taqua"$/;"	v
colors_name	colors/tcsoft.vim	/^let colors_name = "TCSoft"$/;"	v
colors_name	colors/tir_black.vim	/^let colors_name = "tir_black"$/;"	v
colors_name	colors/twilight.vim	/^let colors_name = "twilight"$/;"	v
colors_name	colors/vividchalk.vim	/^let colors_name = "vividchalk"$/;"	v
colors_name	colors/winter.vim	/^let colors_name = "winter"$/;"	v
colors_name	colors/wombat.vim	/^let colors_name = "wombat"$/;"	v
colors_name	colors/xoria256.vim	/^let colors_name = "xoria256"$/;"	v
colors_name	colors/xterm16.vim	/^let colors_name = 'xterm16'$/;"	v
compareBookmarks	plugin/NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	plugin/NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
compare_length	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:compare_length(i1, i2)$/;"	f
compare_pos	autoload/neocomplcache.vim	/^function! s:compare_pos(i1, i2)$/;"	f
compare_words	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:compare_words(i1, i2)$/;"	f
compare_words	autoload/unite/sources/snippet.vim	/^function! s:compare_words(i1, i2)"{{{$/;"	f
completeBookmarks	plugin/NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
concat	autoload/vital/_f9b384/data/list.vim	/^function! s:concat(list)$/;"	f
copy_file	autoload/vital/_f9b384/system/file.vim	/^function! s:copy_file(src, dest) "{{{$/;"	f
copy_file_exe	autoload/vital/_f9b384/system/file.vim	/^function! s:copy_file_exe(src, dest)$/;"	f
copy_file_pure	autoload/vital/_f9b384/system/file.vim	/^function! s:copy_file_pure(src, dest) "{{{$/;"	f
createElement	autoload/vital/_f9b384/web/xml.vim	/^function! s:createElement(name)$/;"	f
createTreeWin	plugin/NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
create_hash	autoload/vital/_f9b384/system/cache.vim	/^function! s:create_hash(dir, str)$/;"	f
curry	autoload/vital/_f9b384/functor.vim	/^function! s:curry(callable, v)$/;"	f
decode	autoload/vital/_f9b384/web/json.vim	/^function! s:decode(json)$/;"	f
decodeEntityReference	autoload/vital/_f9b384/web/html.vim	/^function! s:decodeEntityReference(str)$/;"	f
decodeEntityReference	autoload/vital/_f9b384/web/xml.vim	/^function! s:decodeEntityReference(str)$/;"	f
decodeURI	autoload/vital/_f9b384/web/http.vim	/^function! s:decodeURI(str)$/;"	f
delete	autoload/vital/_f9b384/system/cache.vim	/^function! s:delete(cache_dir, filename)$/;"	f
deleteBookmark	plugin/NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
did_python_syn_inits	syntax/python3.0.vim	/^    let did_python_syn_inits = 1$/;"	v
dirname	autoload/vital/_f9b384/system/filepath.vim	/^function! s:dirname(path)$/;"	f
disable_caching	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:disable_caching(name)"{{{$/;"	f
displayHelp	plugin/NERD_tree.vim	/^function! s:displayHelp()$/;"	f
display_neco	autoload/neocomplcache.vim	/^function! s:display_neco(number)"{{{$/;"	f
doc_dict.search	autoload/neocomplcache/sources/include_complete.vim	/^function! s:doc_dict.search(cur_text)"{{{$/;"	f
doc_dict.search	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:doc_dict.search(cur_text)"{{{$/;"	f
doc_dict.search	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:doc_dict.search(cur_text)"{{{$/;"	f
dumpHelp	plugin/NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
echo	nerdtree_plugin/fs_menu.vim	/^function! s:echo(msg)$/;"	f
echo	plugin/NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echoError	plugin/NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	nerdtree_plugin/fs_menu.vim	/^function! s:echoWarning(msg)$/;"	f
echoWarning	plugin/NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
edit_snippets	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:edit_snippets(filetype, isruntime)"{{{$/;"	f
enable_caching	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:enable_caching(name)"{{{$/;"	f
encode	autoload/vital/_f9b384/web/json.vim	/^function! s:encode(obj)$/;"	f
encodeEntityReference	autoload/vital/_f9b384/web/html.vim	/^function! s:encodeEntityReference(str)$/;"	f
encodeEntityReference	autoload/vital/_f9b384/web/xml.vim	/^function! s:encodeEntityReference(str)$/;"	f
encodeURI	autoload/vital/_f9b384/web/http.vim	/^function! s:encodeURI(items)$/;"	f
encodeURIComponent	autoload/vital/_f9b384/web/http.vim	/^function! s:encodeURIComponent(items)$/;"	f
escape	autoload/vital/_f9b384/web/http.vim	/^function! s:escape(str)$/;"	f
escape_file_searching	autoload/vital/_f9b384/prelude.vim	/^function! s:escape_file_searching(buffer_name)"{{{$/;"	f
escape_pattern	autoload/vital/_f9b384/prelude.vim	/^function! s:escape_pattern(str)"{{{$/;"	f
eval_snippet	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:eval_snippet(snippet_text)"{{{$/;"	f
exec	plugin/NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
execute_abbr_command	autoload/vital/_f9b384/mapping.vim	/^function! s:execute_abbr_command(mode, dict, lhs, rhs)$/;"	f
execute_map_command	autoload/vital/_f9b384/mapping.vim	/^function! s:execute_map_command(mode, dict, lhs, rhs)$/;"	f
execute_unmap_command	autoload/vital/_f9b384/mapping.vim	/^function! s:execute_unmap_command(mode, dict, lhs)$/;"	f
exists_current_source	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:exists_current_source()"{{{$/;"	f
expand_newline	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:expand_newline()"{{{$/;"	f
expand_placeholder	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:expand_placeholder(start, end, holder_cnt, line)"{{{$/;"	f
expand_tabline	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:expand_tabline()"{{{$/;"	f
f	after/ftplugin/pydiction.py	/^            f = open(PYDICTION_DICT, 'r')$/;"	v
file_lines	after/ftplugin/pydiction.py	/^            file_lines = f.readlines()$/;"	v
filereadable	autoload/vital/_f9b384/system/cache.vim	/^function! s:filereadable(cache_dir, filename)$/;"	f
findAndRevealPath	plugin/NERD_tree.vim	/^function! s:findAndRevealPath()$/;"	f
firstUsableWindow	plugin/NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
flatten	autoload/vital/_f9b384/data/list.vim	/^function! s:flatten(list)$/;"	f
foldl	autoload/vital/_f9b384/data/list.vim	/^function! s:foldl(f, init, xs)$/;"	f
foldl1	autoload/vital/_f9b384/data/list.vim	/^function! s:foldl1(f, xs)$/;"	f
foldr	autoload/vital/_f9b384/data/list.vim	/^function! s:foldr(f, init, xs)$/;"	f
foldr1	autoload/vital/_f9b384/data/list.vim	/^function! s:foldr1(f, xs)$/;"	f
free_double_matrix	c-support/codesnippets/calloc_double_matrix.c	/^free_double_matrix ( double **m )$/;"	f	signature:( double **m )
free_int_matrix	c-support/codesnippets/calloc_int_matrix.c	/^free_int_matrix ( int **m )$/;"	f	signature:( int **m )
g:BufExplorer_title	plugin/bufexplorer.vim	/^let g:BufExplorer_title = "\\[Buf\\ List\\]"$/;"	v
g:C_Dictionary_File	plugin/c.vim	/^  let g:C_Dictionary_File = s:plugin_dir.'\/c-support\/wordlists\/c-c++-keywords.list,'.$/;"	v
g:C_Version	plugin/c.vim	/^let g:C_Version= "5.17"  							" version number of this script; do not change$/;"	v
g:LargeFile	plugin/LargeFile.vim	/^ let g:LargeFile= 20	" in megabytes$/;"	v
g:NERDTreeBookmark	plugin/NERD_tree.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeDirNode	plugin/NERD_tree.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeFileNode	plugin/NERD_tree.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeIgnore	plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreePath	plugin/NERD_tree.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreeSortOrder	plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}"$/;"	v
g:alternateNoDefaultAlternate	plugin/a.vim	/^   let g:alternateNoDefaultAlternate = 0$/;"	v
g:alternateRelativeFiles	plugin/a.vim	/^   let g:alternateRelativeFiles = 0$/;"	v
g:alternateSearchPath	plugin/a.vim	/^  let g:alternateSearchPath = 'sfr:..\/source,sfr:..\/src,sfr:..\/include,sfr:..\/inc'$/;"	v
g:astronaut_bold	colors/astronaut.vim	/^ let g:astronaut_bold= 0$/;"	v
g:astronaut_dark	colors/astronaut.vim	/^ let g:astronaut_dark= 0$/;"	v
g:astronaut_italic	colors/astronaut.vim	/^ let g:astronaut_italic= 0$/;"	v
g:astronaut_underline	colors/astronaut.vim	/^ let g:astronaut_underline= 1$/;"	v
g:bufexplorer_version	plugin/bufexplorer.vim	/^let g:bufexplorer_version = "7.2.8"$/;"	v
g:calendar_action	plugin/calendar.vim	/^  let g:calendar_action = "<SID>CalendarDiary"$/;"	v
g:calendar_datetime	plugin/calendar.vim	/^  let g:calendar_datetime = 'title'$/;"	v
g:calendar_diary	plugin/calendar.vim	/^  let g:calendar_diary = "~\/diary"$/;"	v
g:calendar_focus_today	plugin/calendar.vim	/^  let g:calendar_focus_today = 0$/;"	v
g:calendar_mark	plugin/calendar.vim	/^  let g:calendar_mark = 'left'$/;"	v
g:calendar_navi	plugin/calendar.vim	/^  let g:calendar_navi = 'top'$/;"	v
g:calendar_navi_label	plugin/calendar.vim	/^  let g:calendar_navi_label = "Prev,Today,Next"$/;"	v
g:calendar_options	plugin/calendar.vim	/^    let g:calendar_options .= " nornu"$/;"	v
g:calendar_options	plugin/calendar.vim	/^  let g:calendar_options="fdc=0 nonu"$/;"	v
g:calendar_sign	plugin/calendar.vim	/^  let g:calendar_sign = "<SID>CalendarSign"$/;"	v
g:calendar_version	plugin/calendar.vim	/^let g:calendar_version = "2.5"$/;"	v
g:colors_name	colors/adrian.vim	/^let g:colors_name = "adrian"$/;"	v
g:colors_name	colors/aiseered.vim	/^let g:colors_name="aiseered"$/;"	v
g:colors_name	colors/anotherdark.vim	/^let g:colors_name="anotherdark"$/;"	v
g:colors_name	colors/aqua.vim	/^let g:colors_name="aqua"$/;"	v
g:colors_name	colors/astronaut.vim	/^let g:colors_name      = "astronaut"$/;"	v
g:colors_name	colors/asu1dark.vim	/^let g:colors_name="asu1dark"$/;"	v
g:colors_name	colors/baycomb.vim	/^let g:colors_name="baycomb"$/;"	v
g:colors_name	colors/bclear.vim	/^let g:colors_name = "bclear"$/;"	v
g:colors_name	colors/biogoo.vim	/^let g:colors_name = "biogoo"$/;"	v
g:colors_name	colors/blacksea.vim	/^let g:colors_name = "BlackSea"$/;"	v
g:colors_name	colors/bluegreen.vim	/^let g:colors_name="mine"$/;"	v
g:colors_name	colors/borland.vim	/^let g:colors_name="borland"$/;"	v
g:colors_name	colors/brookstream.vim	/^let g:colors_name="brookstream"$/;"	v
g:colors_name	colors/calmar256-dark.vim	/^let g:colors_name = "calmar256-dark"$/;"	v
g:colors_name	colors/calmar256-light.vim	/^let g:colors_name = "calmar256-light"$/;"	v
g:colors_name	colors/camo.vim	/^let g:colors_name="camo"$/;"	v
g:colors_name	colors/candycode.vim	/^let g:colors_name="candycode"$/;"	v
g:colors_name	colors/chela_light.vim	/^let g:colors_name="chela_light"$/;"	v
g:colors_name	colors/chocolateliquor.vim	/^let g:colors_name = "ChocolateLiquor"$/;"	v
g:colors_name	colors/clarity.vim	/^let g:colors_name="clarity"$/;"	v
g:colors_name	colors/colorer.vim	/^let g:colors_name = "colorer"$/;"	v
g:colors_name	colors/dante.vim	/^let g:colors_name = "dante"$/;"	v
g:colors_name	colors/darkZ.vim	/^let g:colors_name="darkZ"$/;"	v
g:colors_name	colors/darkblue2.vim	/^let g:colors_name = "darkblue2"$/;"	v
g:colors_name	colors/darkbone.vim	/^let g:colors_name = 'darkbone'$/;"	v
g:colors_name	colors/darkslategray.vim	/^let g:colors_name = "darkslategray"$/;"	v
g:colors_name	colors/darkspectrum.vim	/^let g:colors_name="darkspectrum"$/;"	v
g:colors_name	colors/denim.vim	/^let g:colors_name="denim"$/;"	v
g:colors_name	colors/desert256.vim	/^let g:colors_name="desert256"$/;"	v
g:colors_name	colors/desertEx.vim	/^let g:colors_name="desertEx"$/;"	v
g:colors_name	colors/dw_blue.vim	/^let g:colors_name="dw_blue"$/;"	v
g:colors_name	colors/dw_cyan.vim	/^let g:colors_name="dw_cyan"$/;"	v
g:colors_name	colors/dw_green.vim	/^let g:colors_name="dw_green"$/;"	v
g:colors_name	colors/dw_orange.vim	/^let g:colors_name="dw_orange"$/;"	v
g:colors_name	colors/dw_purple.vim	/^let g:colors_name="dw_purple"$/;"	v
g:colors_name	colors/dw_red.vim	/^let g:colors_name="dw_red"$/;"	v
g:colors_name	colors/dw_yellow.vim	/^let g:colors_name="dw_yellow"$/;"	v
g:colors_name	colors/eclipse.vim	/^let g:colors_name = "eclipse"$/;"	v
g:colors_name	colors/ekvoli.vim	/^let g:colors_name = "ekvoli"$/;"	v
g:colors_name	colors/golden.vim	/^let g:colors_name = "golden"$/;"	v
g:colors_name	colors/google.vim	/^let g:colors_name = "google"$/;"	v
g:colors_name	colors/guardian.vim	/^let g:colors_name = "Guardian"$/;"	v
g:colors_name	colors/habilight.vim	/^let g:colors_name = "habiLight"$/;"	v
g:colors_name	colors/impact.vim	/^let g:colors_name="impact"$/;"	v
g:colors_name	colors/jammy.vim	/^let g:colors_name="jammy"$/;"	v
g:colors_name	colors/leo.vim	/^let g:colors_name = "leo256"$/;"	v
g:colors_name	colors/lettuce.vim	/^let g:colors_name="lettuce"$/;"	v
g:colors_name	colors/manxome.vim	/^let g:colors_name = "manxome"$/;"	v
g:colors_name	colors/marklar.vim	/^let g:colors_name = "marklar"$/;"	v
g:colors_name	colors/maroloccio.vim	/^let g:colors_name="maroloccio"$/;"	v
g:colors_name	colors/matrix.vim	/^let g:colors_name = 'matrix'$/;"	v
g:colors_name	colors/molokai.vim	/^let g:colors_name="molokai"$/;"	v
g:colors_name	colors/moss.vim	/^let g:colors_name = "moss"$/;"	v
g:colors_name	colors/motus.vim	/^let g:colors_name = "motus"$/;"	v
g:colors_name	colors/navajo-night.vim	/^let g:colors_name = "navajo-night"$/;"	v
g:colors_name	colors/navajo.vim	/^let g:colors_name = "navajo"$/;"	v
g:colors_name	colors/neverness.vim	/^let g:colors_name = 'neverness'$/;"	v
g:colors_name	colors/nightshimmer.vim	/^let g:colors_name = "nightshimmer"$/;"	v
g:colors_name	colors/northland.vim	/^let g:colors_name="northland"$/;"	v
g:colors_name	colors/nuvola.vim	/^let g:colors_name = "nuvola"$/;"	v
g:colors_name	colors/oceanblack.vim	/^let g:colors_name = "oceanblack"$/;"	v
g:colors_name	colors/oceandeep.vim	/^let g:colors_name = "oceandeep"$/;"	v
g:colors_name	colors/oceanlight.vim	/^let g:colors_name = "oceanlight"$/;"	v
g:colors_name	colors/olive.vim	/^let g:colors_name="olive"$/;"	v
g:colors_name	colors/papayawhip.vim	/^let g:colors_name = "PapayaWhip"$/;"	v
g:colors_name	colors/peaksea.vim	/^let g:colors_name = expand("<sfile>:t:r")$/;"	v
g:colors_name	colors/print_bw.vim	/^let g:colors_name = "print_bw"$/;"	v
g:colors_name	colors/railscasts.vim	/^let g:colors_name = "railscasts"$/;"	v
g:colors_name	colors/railscasts2.vim	/^let g:colors_name = "railscasts"$/;"	v
g:colors_name	colors/relaxedgreen.vim	/^let g:colors_name = "relaxedgreen"$/;"	v
g:colors_name	colors/robinhood.vim	/^let g:colors_name = "robinhood"$/;"	v
g:colors_name	colors/rootwater.vim	/^let g:colors_name = 'rootwater'$/;"	v
g:colors_name	colors/settlemyer.vim	/^let g:colors_name="settlemyer"$/;"	v
g:colors_name	colors/sienna.vim	/^let g:colors_name = 'sienna'$/;"	v
g:colors_name	colors/silent.vim	/^let g:colors_name = "silent"$/;"	v
g:colors_name	colors/simpleandfriendly.vim	/^let g:colors_name = "simpleandfriendly"$/;"	v
g:colors_name	colors/skittles_dark.vim	/^let g:colors_name="skittles_dark"$/;"	v
g:colors_name	colors/softblue.vim	/^let g:colors_name="softblue"$/;"	v
g:colors_name	colors/soso.vim	/^let g:colors_name="soso"$/;"	v
g:colors_name	colors/summerfruit256.vim	/^let g:colors_name="summerfruit256"$/;"	v
g:colors_name	colors/synic.vim	/^let g:colors_name = "synic"$/;"	v
g:colors_name	colors/tabula.vim	/^let g:colors_name = "tabula"$/;"	v
g:colors_name	colors/tolerable.vim	/^let g:colors_name="tolerable"$/;"	v
g:colors_name	colors/torte.vim	/^let g:colors_name = "torte"$/;"	v
g:colors_name	colors/two2tango.vim	/^let g:colors_name="two2tango"$/;"	v
g:colors_name	colors/vc.vim	/^let g:colors_name="vc"$/;"	v
g:colors_name	colors/vibrantink.vim	/^let g:colors_name = "vibrantink"$/;"	v
g:colors_name	colors/vylight.vim	/^let g:colors_name="vylight"$/;"	v
g:colors_name	colors/wombat256.vim	/^let g:colors_name = "wombat256"$/;"	v
g:colors_name	colors/wood.vim	/^let g:colors_name="wood"$/;"	v
g:colors_name	colors/wuye.vim	/^let g:colors_name = "wuye"$/;"	v
g:colors_name	colors/xemacs.vim	/^let g:colors_name="xemacs"$/;"	v
g:colors_name	colors/zenburn.vim	/^let g:colors_name="zenburn"$/;"	v
g:colors_name	colors/zmrok.vim	/^let g:colors_name="zmrok"$/;"	v
g:did_ft	plugin/snipMate.vim	/^let g:did_ft = {}$/;"	v
g:inkpot_black_background	colors/inkpot.vim	/^    let g:inkpot_black_background = 0$/;"	v
g:loaded_LargeFile	plugin/LargeFile.vim	/^let g:loaded_LargeFile = "v4"$/;"	v
g:loaded_astronaut	colors/astronaut.vim	/^let g:loaded_astronaut = "v7"$/;"	v
g:loaded_nerdtree_exec_menuitem	nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:miniBufExplBufList	plugin/minibufexpl.vim	/^  let g:miniBufExplBufList = ''$/;"	v
g:miniBufExplDoneClickSave	plugin/minibufexpl.vim	/^    let  g:miniBufExplDoneClickSave = 1$/;"	v
g:miniBufExplForceDisplay	plugin/minibufexpl.vim	/^  let g:miniBufExplForceDisplay = 0$/;"	v
g:miniBufExplForceSyntaxEnable	plugin/minibufexpl.vim	/^  let g:miniBufExplForceSyntaxEnable = 0$/;"	v
g:miniBufExplInAutoUpdate	plugin/minibufexpl.vim	/^  let g:miniBufExplInAutoUpdate = 0$/;"	v
g:miniBufExplMapCTabSwitchBufs	plugin/minibufexpl.vim	/^  let g:miniBufExplMapCTabSwitchBufs = 0$/;"	v
g:miniBufExplMapCTabSwitchWindows	plugin/minibufexpl.vim	/^  let g:miniBufExplMapCTabSwitchWindows = 0$/;"	v
g:miniBufExplMapWindowNav	plugin/minibufexpl.vim	/^  let g:miniBufExplMapWindowNav = 0$/;"	v
g:miniBufExplMapWindowNavArrows	plugin/minibufexpl.vim	/^  let g:miniBufExplMapWindowNavArrows = 0$/;"	v
g:miniBufExplMapWindowNavVim	plugin/minibufexpl.vim	/^  let g:miniBufExplMapWindowNavVim = 0$/;"	v
g:miniBufExplMaxHeight	plugin/minibufexpl.vim	/^  let g:miniBufExplMaxHeight = 0$/;"	v
g:miniBufExplMaxSize	plugin/minibufexpl.vim	/^  let g:miniBufExplMaxSize = g:miniBufExplMaxHeight$/;"	v
g:miniBufExplMinHeight	plugin/minibufexpl.vim	/^  let g:miniBufExplMinHeight = 1$/;"	v
g:miniBufExplMinSize	plugin/minibufexpl.vim	/^  let g:miniBufExplMinSize = g:miniBufExplMinHeight$/;"	v
g:miniBufExplModSelTarget	plugin/minibufexpl.vim	/^  let g:miniBufExplModSelTarget = 0$/;"	v
g:miniBufExplSplitBelow	plugin/minibufexpl.vim	/^  let g:miniBufExplSplitBelow = &splitbelow$/;"	v
g:miniBufExplSplitToEdge	plugin/minibufexpl.vim	/^  let g:miniBufExplSplitToEdge = 1$/;"	v
g:miniBufExplTabWrap	plugin/minibufexpl.vim	/^  let g:miniBufExplTabWrap = 0$/;"	v
g:miniBufExplUseSingleClick	plugin/minibufexpl.vim	/^  let g:miniBufExplUseSingleClick = 0$/;"	v
g:miniBufExplVSplit	plugin/minibufexpl.vim	/^  let g:miniBufExplVSplit = 0$/;"	v
g:miniBufExplorerAutoUpdate	plugin/minibufexpl.vim	/^  let g:miniBufExplorerAutoUpdate = 0$/;"	v
g:miniBufExplorerDebugLevel	plugin/minibufexpl.vim	/^  let g:miniBufExplorerDebugLevel = 0 $/;"	v
g:miniBufExplorerDebugMode	plugin/minibufexpl.vim	/^  let g:miniBufExplorerDebugMode = 3 $/;"	v
g:miniBufExplorerDebugOutput	plugin/minibufexpl.vim	/^  let g:miniBufExplorerDebugOutput = ''$/;"	v
g:miniBufExplorerMoreThanOne	plugin/minibufexpl.vim	/^  let g:miniBufExplorerMoreThanOne = 2$/;"	v
g:neocomplcache_include_exprs	autoload/neocomplcache/sources/filename_complete.vim	/^  let g:neocomplcache_include_exprs = {}$/;"	v
g:neocomplcache_include_paths	autoload/neocomplcache/sources/filename_complete.vim	/^  let g:neocomplcache_include_paths = {}$/;"	v
g:neocomplcache_include_patterns	autoload/neocomplcache/sources/filename_complete.vim	/^  let g:neocomplcache_include_patterns = {}$/;"	v
g:neocomplcache_include_suffixes	autoload/neocomplcache/sources/filename_complete.vim	/^  let g:neocomplcache_include_suffixes = {}$/;"	v
g:neocomplcache_min_syntax_length	autoload/neocomplcache/sources/syntax_complete.vim	/^  let g:neocomplcache_min_syntax_length = 4$/;"	v
g:omni#cpp#includes#CACHE_FILE_TIME	autoload/omni/cpp/includes.vim	/^let g:omni#cpp#includes#CACHE_FILE_TIME = {}$/;"	v
g:omni#cpp#includes#CACHE_INCLUDES	autoload/omni/cpp/includes.vim	/^let g:omni#cpp#includes#CACHE_INCLUDES = {}$/;"	v
g:omni#cpp#namespaces#CacheResolve	autoload/omni/cpp/namespaces.vim	/^let g:omni#cpp#namespaces#CacheResolve = {}$/;"	v
g:omni#cpp#namespaces#CacheUsing	autoload/omni/cpp/namespaces.vim	/^let g:omni#cpp#namespaces#CacheUsing = {}$/;"	v
g:omni#cpp#utils#CACHE_TAG_INHERITS	autoload/omni/cpp/utils.vim	/^let g:omni#cpp#utils#CACHE_TAG_INHERITS = {}$/;"	v
g:omni#cpp#utils#szFilterGlobalScope	autoload/omni/cpp/utils.vim	/^let g:omni#cpp#utils#szFilterGlobalScope .= "&& (!has_key(v:val, 'enum') || (has_key(v:val, 'enum') && v:val.enum =~ '^\\\\w\\\\+$')))"$/;"	v
g:omni#cpp#utils#szFilterGlobalScope	autoload/omni/cpp/utils.vim	/^let g:omni#cpp#utils#szFilterGlobalScope = "(!has_key(v:val, 'class') && !has_key(v:val, 'struct') && !has_key(v:val, 'union') && !has_key(v:val, 'namespace')"$/;"	v
g:yankring_clipboard_monitor	plugin/yankring.vim	/^    let g:yankring_clipboard_monitor = (has('clipboard')?1:0)$/;"	v
g:yankring_default_menu_mode	plugin/yankring.vim	/^    let g:yankring_default_menu_mode = 3$/;"	v
g:yankring_del_v_key	plugin/yankring.vim	/^    let g:yankring_del_v_key = 'd x'$/;"	v
g:yankring_dot_repeat_yank	plugin/yankring.vim	/^    let g:yankring_dot_repeat_yank = (s:cpo_save=~'y'?1:0)$/;"	v
g:yankring_enabled	plugin/yankring.vim	/^    let g:yankring_enabled = 1$/;"	v
g:yankring_history_dir	plugin/yankring.vim	/^    let g:yankring_history_dir = expand('$HOME')$/;"	v
g:yankring_history_dir	plugin/yankring.vim	/^    let g:yankring_history_dir = expand(g:yankring_history_dir)$/;"	v
g:yankring_history_file	plugin/yankring.vim	/^    let g:yankring_history_file = 'yankring_history'$/;"	v
g:yankring_ignore_duplicate	plugin/yankring.vim	/^    let g:yankring_ignore_duplicate = 1$/;"	v
g:yankring_ignore_operator	plugin/yankring.vim	/^    let g:yankring_ignore_operator = 'g~ gu gU ! = gq g? > < zf g@'$/;"	v
g:yankring_ignore_operator	plugin/yankring.vim	/^let g:yankring_ignore_operator = ' '.g:yankring_ignore_operator.' '$/;"	v
g:yankring_manage_numbered_reg	plugin/yankring.vim	/^    let g:yankring_manage_numbered_reg = 0$/;"	v
g:yankring_manual_clipboard_check	plugin/yankring.vim	/^            let g:yankring_manual_clipboard_check = 0$/;"	v
g:yankring_manual_clipboard_check	plugin/yankring.vim	/^            let g:yankring_manual_clipboard_check = 1$/;"	v
g:yankring_manual_clipboard_check	plugin/yankring.vim	/^    let g:yankring_manual_clipboard_check = 0$/;"	v
g:yankring_map_dot	plugin/yankring.vim	/^    let g:yankring_map_dot = 1$/;"	v
g:yankring_max_display	plugin/yankring.vim	/^    let g:yankring_max_display = 0$/;"	v
g:yankring_max_element_length	plugin/yankring.vim	/^    let g:yankring_max_element_length = 1048576$/;"	v
g:yankring_max_history	plugin/yankring.vim	/^    let g:yankring_max_history = 100$/;"	v
g:yankring_min_element_length	plugin/yankring.vim	/^    let g:yankring_min_element_length = 1$/;"	v
g:yankring_n_keys	plugin/yankring.vim	/^        let g:yankring_n_keys = 'Y D x X'$/;"	v
g:yankring_n_keys	plugin/yankring.vim	/^        let g:yankring_n_keys = 'x yy dd yw dw ye de yE dE yiw diw yaw daw y$ d$ Y D yG dG ygg dgg'$/;"	v
g:yankring_o_keys	plugin/yankring.vim	/^    let g:yankring_o_keys  = 'b B w W e E d h j k l H M L y G ^ 0 $ , ;'$/;"	v
g:yankring_o_keys	plugin/yankring.vim	/^    let g:yankring_o_keys .= ' g_  g^ gm g$ gk gj gg ge gE - + _ '$/;"	v
g:yankring_o_keys	plugin/yankring.vim	/^    let g:yankring_o_keys .= ' iw iW aw aW as is ap ip a] a[ i] i[ a) a( ab i) i( ib a> a< i> i< at it a} a{ aB i} i{ iB a" a'' a` i" i'' i`'$/;"	v
g:yankring_paste_check_default_buffer	plugin/yankring.vim	/^    let g:yankring_paste_check_default_buffer = 1$/;"	v
g:yankring_paste_n_akey	plugin/yankring.vim	/^    let g:yankring_paste_n_akey = 'p'$/;"	v
g:yankring_paste_n_bkey	plugin/yankring.vim	/^    let g:yankring_paste_n_bkey = 'P'$/;"	v
g:yankring_paste_using_g	plugin/yankring.vim	/^    let g:yankring_paste_using_g = 1$/;"	v
g:yankring_paste_v_akey	plugin/yankring.vim	/^    let g:yankring_paste_v_akey = 'p'$/;"	v
g:yankring_paste_v_bkey	plugin/yankring.vim	/^    let g:yankring_paste_v_bkey = 'P'$/;"	v
g:yankring_persist	plugin/yankring.vim	/^    let g:yankring_persist = 1$/;"	v
g:yankring_replace_n_nkey	plugin/yankring.vim	/^    let g:yankring_replace_n_nkey = '<C-N>'$/;"	v
g:yankring_replace_n_pkey	plugin/yankring.vim	/^    let g:yankring_replace_n_pkey = '<C-P>'$/;"	v
g:yankring_share_between_instances	plugin/yankring.vim	/^    let g:yankring_share_between_instances = 1$/;"	v
g:yankring_v_key	plugin/yankring.vim	/^    let g:yankring_v_key = 'y'$/;"	v
g:yankring_warn_on_truncate	plugin/yankring.vim	/^    let g:yankring_warn_on_truncate = 1$/;"	v
g:yankring_window_auto_close	plugin/yankring.vim	/^    let g:yankring_window_auto_close = 1$/;"	v
g:yankring_window_height	plugin/yankring.vim	/^    let g:yankring_window_height = 8$/;"	v
g:yankring_window_increment	plugin/yankring.vim	/^    let g:yankring_window_increment = 50$/;"	v
g:yankring_window_use_bottom	plugin/yankring.vim	/^    let g:yankring_window_use_bottom = 1$/;"	v
g:yankring_window_use_horiz	plugin/yankring.vim	/^    let g:yankring_window_use_horiz = 1$/;"	v
g:yankring_window_use_right	plugin/yankring.vim	/^    let g:yankring_window_use_right = 1$/;"	v
g:yankring_window_use_separate	plugin/yankring.vim	/^    let g:yankring_window_use_separate = 1$/;"	v
g:yankring_window_width	plugin/yankring.vim	/^    let g:yankring_window_width = 30$/;"	v
g:yankring_zap_keys	plugin/yankring.vim	/^    let g:yankring_zap_keys = 'f F t T \/ ?'$/;"	v
get	autoload/vital/_f9b384/web/http.vim	/^function! s:get(url, ...)$/;"	f
getPath	plugin/NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getTreeWinNum	plugin/NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
get_abbr_command	autoload/vital/_f9b384/mapping.vim	/^function! s:get_abbr_command(...)$/;"	f
get_all_modes	autoload/vital/_f9b384/mapping.vim	/^function! s:get_all_modes()$/;"	f
get_all_modes_list	autoload/vital/_f9b384/mapping.vim	/^function! s:get_all_modes_list()$/;"	f
get_augrouplist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_augrouplist()"{{{$/;"	f
get_buffer_include_files	autoload/neocomplcache/sources/include_complete.vim	/^function! s:get_buffer_include_files(bufnumber)"{{{$/;"	f
get_cached_script_candidates	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_cached_script_candidates()"{{{$/;"	f
get_cmdlist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_cmdlist()"{{{$/;"	f
get_completefunc_list	autoload/neocomplcache/sources/completefunc_complete.vim	/^function! s:get_completefunc_list(list)"{{{$/;"	f
get_context_filetype	autoload/neocomplcache.vim	/^function! s:get_context_filetype(filetype)"{{{$/;"	f
get_cur_text	autoload/neocomplcache.vim	/^function! s:get_cur_text()"{{{$/;"	f
get_cursor_keyword_snippet	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:get_cursor_keyword_snippet(snippets, cur_text)"{{{$/;"	f
get_cursor_snippet	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:get_cursor_snippet(snippets, cur_text)"{{{$/;"	f
get_endlist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_endlist()"{{{$/;"	f
get_envlist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_envlist()"{{{$/;"	f
get_functionlist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_functionlist()"{{{$/;"	f
get_glob_files	autoload/neocomplcache/sources/filename_complete.vim	/^function! s:get_glob_files(cur_keyword_str, path)"{{{$/;"	f
get_include_files	autoload/neocomplcache/sources/filename_complete.vim	/^function! s:get_include_files(cur_keyword_str)"{{{$/;"	f
get_include_files	autoload/neocomplcache/sources/include_complete.vim	/^function! s:get_include_files(nestlevel, lines, filetype, pattern, path, expr)"{{{$/;"	f
get_keyword_pos	autoload/unite/sources/snippet.vim	/^function! s:get_keyword_pos(cur_text)"{{{$/;"	f
get_last_status	autoload/vital/_f9b384/prelude.vim	/^function! s:get_last_status()"{{{$/;"	f
get_local_dictionary_variables	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_local_dictionary_variables(var_name)"{{{$/;"	f
get_local_variables	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_local_variables()"{{{$/;"	f
get_map_command	autoload/vital/_f9b384/mapping.vim	/^function! s:get_map_command(...)$/;"	f
get_mappinglist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_mappinglist()"{{{$/;"	f
get_member_list	autoload/neocomplcache/sources/member_complete.vim	/^function! s:get_member_list(cur_text, var_name)"{{{$/;"	f
get_member_pattern	autoload/neocomplcache/sources/member_complete.vim	/^function! s:get_member_pattern(filetype)"{{{$/;"	f
get_omni_list	autoload/neocomplcache/sources/omni_complete.vim	/^function! s:get_omni_list(list)"{{{$/;"	f
get_script_candidates	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_script_candidates(bufnumber)"{{{$/;"	f
get_sources_list	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:get_sources_list()"{{{$/;"	f
get_sources_list	autoload/neocomplcache/sources/member_complete.vim	/^function! s:get_sources_list()"{{{$/;"	f
get_submodules	after/ftplugin/pydiction.py	/^def get_submodules(module_name, submodules):$/;"	f	access:public
get_unabbr_command	autoload/vital/_f9b384/mapping.vim	/^function! s:get_unabbr_command(...)$/;"	f
get_unmap_command	autoload/vital/_f9b384/mapping.vim	/^function! s:get_unmap_command(...)$/;"	f
get_variable_type	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_variable_type(expression)"{{{$/;"	f
get_variablelist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_variablelist(dict, prefix)"{{{$/;"	f
get_yesno	after/ftplugin/pydiction.py	/^def get_yesno(msg="[Y\/n]?"):$/;"	f	access:public
getchar	autoload/vital/_f9b384/prelude.vim	/^function! s:getchar(...)$/;"	f
getchar_safe	autoload/vital/_f9b384/prelude.vim	/^function! s:getchar_safe(...)$/;"	f
getfilename	autoload/vital/_f9b384/system/cache.vim	/^function! s:getfilename(cache_dir, filename)$/;"	f
glob	autoload/vital/_f9b384/prelude.vim	/^function! s:glob(...)$/;"	f
globpath	autoload/vital/_f9b384/prelude.vim	/^function! s:globpath(...)$/;"	f
grey_color	colors/desert256.vim	/^    fun <SID>grey_color(n)$/;"	f
grey_color	colors/jellybeans.vim	/^fun! s:grey_color(n)$/;"	f
grey_color	colors/summerfruit256.vim	/^    fun <SID>grey_color(n)$/;"	f
grey_color	colors/wombat256.vim	/^fun <SID>grey_color(n)$/;"	f
grey_level	colors/desert256.vim	/^    fun <SID>grey_level(n)$/;"	f
grey_level	colors/jellybeans.vim	/^fun! s:grey_level(n)$/;"	f
grey_level	colors/summerfruit256.vim	/^    fun <SID>grey_level(n)$/;"	f
grey_level	colors/wombat256.vim	/^fun <SID>grey_level(n)$/;"	f
grey_number	colors/desert256.vim	/^    fun <SID>grey_number(x)$/;"	f
grey_number	colors/jellybeans.vim	/^fun! s:grey_number(x)$/;"	f
grey_number	colors/summerfruit256.vim	/^    fun <SID>grey_number(x)$/;"	f
grey_number	colors/wombat256.vim	/^fun <SID>grey_number(x)$/;"	f
guisetcolor	colors/calmar256-dark.vim	/^function! s:guisetcolor(colarg)$/;"	f
guisetcolor	colors/calmar256-light.vim	/^function! s:guisetcolor(colarg)$/;"	f
handleMiddleMouse	plugin/NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
has	autoload/vital/_f9b384/data/list.vim	/^function! s:has(list, Value)$/;"	f
has_index	autoload/vital/_f9b384/data/list.vim	/^function! s:has_index(list, index)$/;"	f
has_vimproc	autoload/vital/_f9b384/prelude.vim	/^function! s:has_vimproc()"{{{$/;"	f
hibg	colors/vividchalk.vim	/^function! s:hibg(group,guibg,first,second)$/;"	f
hifg	colors/vividchalk.vim	/^function! s:hifg(group,guifg,first,second,...)$/;"	f
html_my_rendering	colors/tabula.vim	/^let html_my_rendering=1$/;"	v
iconv	autoload/vital/_f9b384/prelude.vim	/^function! s:iconv(expr, from, to)$/;"	f
import	autoload/vital/_f9b384.vim	/^function! s:import(name, ...)$/;"	f
indentLevelFor	plugin/NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
initNerdTree	plugin/NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	plugin/NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	plugin/NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initVariable	plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
initialize_include	autoload/neocomplcache/sources/include_complete.vim	/^function! s:initialize_include(filename, filetype)"{{{$/;"	f
initialize_source	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:initialize_source(srcname)"{{{$/;"	f
initialize_source	autoload/neocomplcache/sources/member_complete.vim	/^function! s:initialize_source(srcname)"{{{$/;"	f
initialize_tags	autoload/neocomplcache/sources/tags_complete.vim	/^function! s:initialize_tags(filename)"{{{$/;"	f
input_helper	autoload/vital/_f9b384/prelude.vim	/^function! s:input_helper(funcname, args)$/;"	f
input_safe	autoload/vital/_f9b384/prelude.vim	/^function! s:input_safe(...)$/;"	f
isTreeOpen	plugin/NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	plugin/NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
is_absolute	autoload/vital/_f9b384/system/filepath.vim	/^  function! s:is_absolute(path)$/;"	f
is_case_tolerant	autoload/vital/_f9b384/system/filepath.vim	/^function! s:is_case_tolerant()$/;"	f
is_cygwin	autoload/vital/_f9b384/prelude.vim	/^function! s:is_cygwin()"{{{$/;"	f
is_dict	autoload/vital/_f9b384/prelude.vim	/^function! s:is_dict(Value)$/;"	f
is_float	autoload/vital/_f9b384/prelude.vim	/^function! s:is_float(Value)$/;"	f
is_funcref	autoload/vital/_f9b384/prelude.vim	/^function! s:is_funcref(Value)$/;"	f
is_integer	autoload/vital/_f9b384/prelude.vim	/^function! s:is_integer(Value)$/;"	f
is_list	autoload/vital/_f9b384/prelude.vim	/^function! s:is_list(Value)$/;"	f
is_mac	autoload/vital/_f9b384/prelude.vim	/^function! s:is_mac()"{{{$/;"	f
is_mode_char	autoload/vital/_f9b384/mapping.vim	/^function! s:is_mode_char(char)$/;"	f
is_number	autoload/vital/_f9b384/prelude.vim	/^function! s:is_number(Value)$/;"	f
is_numeric	autoload/vital/_f9b384/prelude.vim	/^function! s:is_numeric(Value)$/;"	f
is_string	autoload/vital/_f9b384/prelude.vim	/^function! s:is_string(Value)$/;"	f
is_windows	autoload/vital/_f9b384/prelude.vim	/^function! s:is_windows()"{{{$/;"	f
join	autoload/vital/_f9b384/system/filepath.vim	/^function! s:join(...)$/;"	f
jumpToChild	plugin/NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	plugin/NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	plugin/NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	plugin/NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	plugin/NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	plugin/NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
keyword_filter	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:keyword_filter(list, cur_keyword_str)"{{{$/;"	f
leader	plugin/yankring.vim	/^        let leader = g:mapleader$/;"	v
leader	plugin/yankring.vim	/^    let leader = '\\'$/;"	v
leader	plugin/yankring.vim	/^    let leader = escape(leader, '\\')$/;"	v
load	autoload/vital/_f9b384.vim	/^function! s:load(...) dict$/;"	f
load_from_file	autoload/neocomplcache/async_cache.vim	/^function! s:load_from_file(filename, pattern_file_name, mark, minlen, maxfilename, fileencoding)"{{{$/;"	f
load_from_tags	autoload/neocomplcache/async_cache.vim	/^function! s:load_from_tags(filename, pattern_file_name, mark, minlen, maxfilename, fileencoding)"{{{$/;"	f
load_snippets	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:load_snippets(snippet, snippets_file)"{{{$/;"	f
loaded_alternateFile	plugin/a.vim	/^let loaded_alternateFile = 1$/;"	v
loaded_grep	plugin/grep.vim	/^let loaded_grep = 1$/;"	v
loaded_minibufexplorer	plugin/minibufexpl.vim	/^let loaded_minibufexplorer = 1$/;"	v
loaded_mru	plugin/mru.vim	/^let loaded_mru=1$/;"	v
loaded_nerd_tree	plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_snips	plugin/snipMate.vim	/^let loaded_snips = 1$/;"	v
loaded_taglist	plugin/taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	plugin/taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	plugin/taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	plugin/taglist.vim	/^let loaded_taglist = 'available'$/;"	v
loaded_yankring	plugin/yankring.vim	/^let loaded_yankring = 140$/;"	v
localfunc	autoload/vital/_f9b384/functor.vim	/^function! s:localfunc(funcname, sid)$/;"	f
main	after/ftplugin/pydiction.py	/^def main(write_to):$/;"	f	access:public
main	autoload/neocomplcache/async_cache.vim	/^function! s:main(argv)"{{{$/;"	f
main	c-support/codesnippets/main.c	/^main ( int argc, char *argv[] )$/;"	f	signature:( int argc, char *argv[] )
main	c-support/codesnippets/main.cc	/^main ( int argc, char *argv[] )$/;"	f	signature:( int argc, char *argv[] )
main	colors/marklar.vim	/^    function! s:main()$/;"	f
make-prerequisite-c	c-support/codesnippets/Makefile	/^define	make-prerequisite-c$/;"	m
make-prerequisite-cplusplus	c-support/codesnippets/Makefile	/^define	make-prerequisite-cplusplus$/;"	m
make_completion_list	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:make_completion_list(list, menu_pattern, kind)"{{{$/;"	f
maplocalleader	ftplugin/c.vim	/^  let maplocalleader  = g:C_MapLeader$/;"	v
match_pair	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:match_pair(string, start_pattern, end_pattern, start_cnt)"{{{$/;"	f
match_wildcard	autoload/neocomplcache.vim	/^function! s:match_wildcard(cur_text, pattern, cur_keyword_pos)"{{{$/;"	f
menuPriority	plugin/yankring.vim	/^        let menuPriority = ''$/;"	v
menuPriority	plugin/yankring.vim	/^        let menuPriority = exists("g:yankring_menu_priority") ? yankring_menu_priority : ''$/;"	v
menuRoot	plugin/yankring.vim	/^        let menuRoot = '&Plugin.&YankRing'$/;"	v
menuRoot	plugin/yankring.vim	/^        let menuRoot = '&YankRing'$/;"	v
menuRoot	plugin/yankring.vim	/^        let menuRoot = 'YankRing'$/;"	v
menuRoot	plugin/yankring.vim	/^        let menuRoot = exists("g:yankring_menu_root") ? g:yankring_menu_root : '&Plugin.&YankRing'$/;"	v
mkdir_nothrow	autoload/vital/_f9b384/system/file.vim	/^function! s:mkdir_nothrow(...) "{{{$/;"	f
move_file	autoload/vital/_f9b384/system/file.vim	/^function! s:move_file(src, dest) "{{{$/;"	f
move_file_exe	autoload/vital/_f9b384/system/file.vim	/^function! s:move_file_exe(src, dest)$/;"	f
move_file_pure	autoload/vital/_f9b384/system/file.vim	/^function! s:move_file_pure(src, dest) "{{{$/;"	f
my_import	after/ftplugin/pydiction.py	/^def my_import(name):$/;"	f	access:public
neocomplcache#add_dictionaries	autoload/neocomplcache.vim	/^function! neocomplcache#add_dictionaries(dictionaries)"{{{$/;"	f
neocomplcache#async_cache#main	autoload/neocomplcache/async_cache.vim	/^  function! neocomplcache#async_cache#main(argv)"{{{$/;"	f
neocomplcache#auto_complete	autoload/neocomplcache.vim	/^function! neocomplcache#auto_complete(findstart, base)"{{{$/;"	f
neocomplcache#available_complfuncs	autoload/neocomplcache.vim	/^function! neocomplcache#available_complfuncs()"{{{$/;"	f
neocomplcache#available_ftplugins	autoload/neocomplcache.vim	/^function! neocomplcache#available_ftplugins()"{{{$/;"	f
neocomplcache#available_loaded_ftplugins	autoload/neocomplcache.vim	/^function! neocomplcache#available_loaded_ftplugins()"{{{$/;"	f
neocomplcache#available_plugins	autoload/neocomplcache.vim	/^function! neocomplcache#available_plugins()"{{{$/;"	f
neocomplcache#available_sources	autoload/neocomplcache.vim	/^function! neocomplcache#available_sources()"{{{$/;"	f
neocomplcache#cache#async_load_from_file	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#async_load_from_file(cache_dir, filename, pattern, mark)"{{{$/;"	f
neocomplcache#cache#async_load_from_tags	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#async_load_from_tags(cache_dir, filename, filetype, mark, is_create_tags)"{{{$/;"	f
neocomplcache#cache#check_cache	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#check_cache(cache_dir, key, async_cache_dictionary,$/;"	f
neocomplcache#cache#check_old_cache	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#check_old_cache(cache_dir, filename)"{{{$/;"	f
neocomplcache#cache#encode_name	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#encode_name(cache_dir, filename)$/;"	f
neocomplcache#cache#filereadable	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#filereadable(cache_dir, filename)"{{{$/;"	f
neocomplcache#cache#getfilename	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#getfilename(cache_dir, filename)"{{{$/;"	f
neocomplcache#cache#index_load_from_cache	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#index_load_from_cache(cache_dir, filename, completion_length)"{{{$/;"	f
neocomplcache#cache#list2index	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#list2index(list, dictionary, completion_length)"{{{$/;"	f
neocomplcache#cache#load_from_cache	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#load_from_cache(cache_dir, filename)"{{{$/;"	f
neocomplcache#cache#readfile	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#readfile(cache_dir, filename)"{{{$/;"	f
neocomplcache#cache#save_cache	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#save_cache(cache_dir, filename, keyword_list)"{{{$/;"	f
neocomplcache#cache#test_async	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#test_async()"{{{$/;"	f
neocomplcache#cache#writefile	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#writefile(cache_dir, filename, list)"{{{$/;"	f
neocomplcache#cancel_popup	autoload/neocomplcache.vim	/^function! neocomplcache#cancel_popup()"{{{$/;"	f
neocomplcache#check_completion_length_match	autoload/neocomplcache.vim	/^function! neocomplcache#check_completion_length_match(cur_keyword_str, completion_length)"{{{$/;"	f
neocomplcache#check_match_filter	autoload/neocomplcache.vim	/^function! neocomplcache#check_match_filter(cur_keyword_str)"{{{$/;"	f
neocomplcache#close_popup	autoload/neocomplcache.vim	/^function! neocomplcache#close_popup()"{{{$/;"	f
neocomplcache#compare_rank	autoload/neocomplcache.vim	/^function! neocomplcache#compare_rank(i1, i2)$/;"	f
neocomplcache#complete_common_string	autoload/neocomplcache.vim	/^function! neocomplcache#complete_common_string()"{{{$/;"	f
neocomplcache#dictionary_filter	autoload/neocomplcache.vim	/^function! neocomplcache#dictionary_filter(dictionary, cur_keyword_str, completion_length)"{{{$/;"	f
neocomplcache#disable	autoload/neocomplcache.vim	/^function! neocomplcache#disable()"{{{$/;"	f
neocomplcache#do_auto_complete	autoload/neocomplcache.vim	/^function! neocomplcache#do_auto_complete()"{{{$/;"	f
neocomplcache#dup_filter	autoload/neocomplcache.vim	/^function! neocomplcache#dup_filter(list)"{{{$/;"	f
neocomplcache#enable	autoload/neocomplcache.vim	/^function! neocomplcache#enable() "{{{$/;"	f
neocomplcache#escape_match	autoload/neocomplcache.vim	/^function! neocomplcache#escape_match(str)"{{{$/;"	f
neocomplcache#exists_echodoc	autoload/neocomplcache.vim	/^function! neocomplcache#exists_echodoc()"{{{$/;"	f
neocomplcache#filetype_complete	autoload/neocomplcache.vim	/^function! neocomplcache#filetype_complete(arglead, cmdline, cursorpos)"{{{$/;"	f
neocomplcache#fuzzy_filter	autoload/neocomplcache.vim	/^function! neocomplcache#fuzzy_filter(list, cur_keyword_str)"{{{$/;"	f
neocomplcache#get_auto_completion_length	autoload/neocomplcache.vim	/^function! neocomplcache#get_auto_completion_length(plugin_name)"{{{$/;"	f
neocomplcache#get_complete_results	autoload/neocomplcache.vim	/^function! neocomplcache#get_complete_results(cur_text, ...)"{{{$/;"	f
neocomplcache#get_complete_words	autoload/neocomplcache.vim	/^function! neocomplcache#get_complete_words(complete_results, is_sort,$/;"	f
neocomplcache#get_completion_length	autoload/neocomplcache.vim	/^function! neocomplcache#get_completion_length(plugin_name)"{{{$/;"	f
neocomplcache#get_context_filetype	autoload/neocomplcache.vim	/^function! neocomplcache#get_context_filetype(...)"{{{$/;"	f
neocomplcache#get_cur_keyword_pos	autoload/neocomplcache.vim	/^function! neocomplcache#get_cur_keyword_pos(complete_results)"{{{$/;"	f
neocomplcache#get_cur_text	autoload/neocomplcache.vim	/^function! neocomplcache#get_cur_text(...)"{{{$/;"	f
neocomplcache#get_keyword_pattern	autoload/neocomplcache.vim	/^function! neocomplcache#get_keyword_pattern(...)"{{{$/;"	f
neocomplcache#get_keyword_pattern_end	autoload/neocomplcache.vim	/^function! neocomplcache#get_keyword_pattern_end(...)"{{{$/;"	f
neocomplcache#get_next_keyword	autoload/neocomplcache.vim	/^function! neocomplcache#get_next_keyword()"{{{$/;"	f
neocomplcache#get_next_keyword_pattern	autoload/neocomplcache.vim	/^function! neocomplcache#get_next_keyword_pattern(...)"{{{$/;"	f
neocomplcache#get_plugin_rank	autoload/neocomplcache.vim	/^function! neocomplcache#get_plugin_rank(plugin_name)"{{{$/;"	f
neocomplcache#get_prev_word	autoload/neocomplcache.vim	/^function! neocomplcache#get_prev_word(cur_keyword_str)"{{{$/;"	f
neocomplcache#get_source_filetypes	autoload/neocomplcache.vim	/^function! neocomplcache#get_source_filetypes(filetype)"{{{$/;"	f
neocomplcache#get_sources_list	autoload/neocomplcache.vim	/^function! neocomplcache#get_sources_list(dictionary, filetype)"{{{$/;"	f
neocomplcache#get_syn_name	autoload/neocomplcache.vim	/^function! neocomplcache#get_syn_name(is_trans)"{{{$/;"	f
neocomplcache#has_vimproc	autoload/neocomplcache.vim	/^function! neocomplcache#has_vimproc(...)"{{{$/;"	f
neocomplcache#head_filter	autoload/neocomplcache.vim	/^function! neocomplcache#head_filter(list, cur_keyword_str)"{{{$/;"	f
neocomplcache#head_match	autoload/neocomplcache.vim	/^function! neocomplcache#head_match(checkstr, headstr)"{{{$/;"	f
neocomplcache#is_auto_complete	autoload/neocomplcache.vim	/^function! neocomplcache#is_auto_complete()"{{{$/;"	f
neocomplcache#is_auto_select	autoload/neocomplcache.vim	/^function! neocomplcache#is_auto_select()"{{{$/;"	f
neocomplcache#is_enabled	autoload/neocomplcache.vim	/^function! neocomplcache#is_enabled()"{{{$/;"	f
neocomplcache#is_eskk_enabled	autoload/neocomplcache.vim	/^function! neocomplcache#is_eskk_enabled()"{{{$/;"	f
neocomplcache#is_locked	autoload/neocomplcache.vim	/^function! neocomplcache#is_locked(...)"{{{$/;"	f
neocomplcache#is_plugin_locked	autoload/neocomplcache.vim	/^function! neocomplcache#is_plugin_locked(plugin_name)"{{{$/;"	f
neocomplcache#is_source_enabled	autoload/neocomplcache.vim	/^function! neocomplcache#is_source_enabled(plugin_name)"{{{$/;"	f
neocomplcache#is_sources_complete	autoload/neocomplcache.vim	/^function! neocomplcache#is_sources_complete()"{{{$/;"	f
neocomplcache#is_text_mode	autoload/neocomplcache.vim	/^function! neocomplcache#is_text_mode()"{{{$/;"	f
neocomplcache#is_win	autoload/neocomplcache.vim	/^function! neocomplcache#is_win()"{{{$/;"	f
neocomplcache#keyword_escape	autoload/neocomplcache.vim	/^function! neocomplcache#keyword_escape(cur_keyword_str)"{{{$/;"	f
neocomplcache#keyword_filter	autoload/neocomplcache.vim	/^function! neocomplcache#keyword_filter(list, cur_keyword_str)"{{{$/;"	f
neocomplcache#lock	autoload/neocomplcache.vim	/^function! neocomplcache#lock(...)"{{{$/;"	f
neocomplcache#lock_plugin	autoload/neocomplcache.vim	/^function! neocomplcache#lock_plugin(plugin_name)"{{{$/;"	f
neocomplcache#manual_complete	autoload/neocomplcache.vim	/^function! neocomplcache#manual_complete(findstart, base)"{{{$/;"	f
neocomplcache#manual_filename_complete	autoload/neocomplcache.vim	/^function! neocomplcache#manual_filename_complete()"{{{$/;"	f
neocomplcache#manual_keyword_complete	autoload/neocomplcache.vim	/^function! neocomplcache#manual_keyword_complete()"{{{$/;"	f
neocomplcache#manual_omni_complete	autoload/neocomplcache.vim	/^function! neocomplcache#manual_omni_complete()"{{{$/;"	f
neocomplcache#match_word	autoload/neocomplcache.vim	/^function! neocomplcache#match_word(cur_text, ...)"{{{$/;"	f
neocomplcache#popup_post	autoload/neocomplcache.vim	/^function! neocomplcache#popup_post()"{{{$/;"	f
neocomplcache#print_caching	autoload/neocomplcache.vim	/^function! neocomplcache#print_caching(string)"{{{$/;"	f
neocomplcache#print_debug	autoload/neocomplcache.vim	/^function! neocomplcache#print_debug(expr)"{{{$/;"	f
neocomplcache#print_error	autoload/neocomplcache.vim	/^function! neocomplcache#print_error(string)"{{{$/;"	f
neocomplcache#print_warning	autoload/neocomplcache.vim	/^function! neocomplcache#print_warning(string)"{{{$/;"	f
neocomplcache#rand	autoload/neocomplcache.vim	/^function! neocomplcache#rand(max)"{{{$/;"	f
neocomplcache#set_completion_length	autoload/neocomplcache.vim	/^function! neocomplcache#set_completion_length(plugin_name, length)"{{{$/;"	f
neocomplcache#set_dictionary_helper	autoload/neocomplcache.vim	/^function! neocomplcache#set_dictionary_helper(variable, keys, pattern)"{{{$/;"	f
neocomplcache#smart_close_popup	autoload/neocomplcache.vim	/^function! neocomplcache#smart_close_popup()"{{{$/;"	f
neocomplcache#sources#abbrev_complete#define	autoload/neocomplcache/sources/abbrev_complete.vim	/^function! neocomplcache#sources#abbrev_complete#define()"{{{$/;"	f
neocomplcache#sources#buffer_complete#caching_current_line	autoload/neocomplcache/sources/buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#caching_current_line()"{{{$/;"	f
neocomplcache#sources#buffer_complete#caching_word	autoload/neocomplcache/sources/buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#caching_word(keyword)"{{{$/;"	f
neocomplcache#sources#buffer_complete#define	autoload/neocomplcache/sources/buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#define()"{{{$/;"	f
neocomplcache#sources#buffer_complete#get_frequencies	autoload/neocomplcache/sources/buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#get_frequencies()"{{{$/;"	f
neocomplcache#sources#completefunc_complete#define	autoload/neocomplcache/sources/completefunc_complete.vim	/^function! neocomplcache#sources#completefunc_complete#define()"{{{$/;"	f
neocomplcache#sources#dictionary_complete#define	autoload/neocomplcache/sources/dictionary_complete.vim	/^function! neocomplcache#sources#dictionary_complete#define()"{{{$/;"	f
neocomplcache#sources#filename_complete#define	autoload/neocomplcache/sources/filename_complete.vim	/^function! neocomplcache#sources#filename_complete#define()"{{{$/;"	f
neocomplcache#sources#filename_complete#get_complete_words	autoload/neocomplcache/sources/filename_complete.vim	/^function! neocomplcache#sources#filename_complete#get_complete_words(cur_keyword_str, path)"{{{$/;"	f
neocomplcache#sources#include_complete#analyze_ruby_include_files	autoload/neocomplcache/sources/include_complete.vim	/^function! neocomplcache#sources#include_complete#analyze_ruby_include_files(lines, path)"{{{$/;"	f
neocomplcache#sources#include_complete#analyze_vim_include_files	autoload/neocomplcache/sources/include_complete.vim	/^function! neocomplcache#sources#include_complete#analyze_vim_include_files(lines, path)"{{{$/;"	f
neocomplcache#sources#include_complete#define	autoload/neocomplcache/sources/include_complete.vim	/^function! neocomplcache#sources#include_complete#define()"{{{$/;"	f
neocomplcache#sources#include_complete#get_current_include_files	autoload/neocomplcache/sources/include_complete.vim	/^function! neocomplcache#sources#include_complete#get_current_include_files()"{{{$/;"	f
neocomplcache#sources#include_complete#get_include_files	autoload/neocomplcache/sources/include_complete.vim	/^function! neocomplcache#sources#include_complete#get_include_files(bufnumber)"{{{$/;"	f
neocomplcache#sources#keyword_complete#define	autoload/neocomplcache/sources/keyword_complete.vim	/^function! neocomplcache#sources#keyword_complete#define()"{{{$/;"	f
neocomplcache#sources#member_complete#caching_current_line	autoload/neocomplcache/sources/member_complete.vim	/^function! neocomplcache#sources#member_complete#caching_current_line()"{{{$/;"	f
neocomplcache#sources#member_complete#define	autoload/neocomplcache/sources/member_complete.vim	/^function! neocomplcache#sources#member_complete#define()"{{{$/;"	f
neocomplcache#sources#omni_complete#define	autoload/neocomplcache/sources/omni_complete.vim	/^function! neocomplcache#sources#omni_complete#define()"{{{$/;"	f
neocomplcache#sources#snippets_complete#define	autoload/neocomplcache/sources/snippets_complete.vim	/^function! neocomplcache#sources#snippets_complete#define()"{{{$/;"	f
neocomplcache#sources#snippets_complete#expand	autoload/neocomplcache/sources/snippets_complete.vim	/^function! neocomplcache#sources#snippets_complete#expand(cur_text, col, trigger_name)"{{{$/;"	f
neocomplcache#sources#snippets_complete#expandable	autoload/neocomplcache/sources/snippets_complete.vim	/^function! neocomplcache#sources#snippets_complete#expandable()"{{{$/;"	f
neocomplcache#sources#snippets_complete#get_snippets	autoload/neocomplcache/sources/snippets_complete.vim	/^function! neocomplcache#sources#snippets_complete#get_snippets()"{{{$/;"	f
neocomplcache#sources#syntax_complete#define	autoload/neocomplcache/sources/syntax_complete.vim	/^function! neocomplcache#sources#syntax_complete#define()"{{{$/;"	f
neocomplcache#sources#tags_complete#define	autoload/neocomplcache/sources/tags_complete.vim	/^function! neocomplcache#sources#tags_complete#define()"{{{$/;"	f
neocomplcache#sources#vim_complete#define	autoload/neocomplcache/sources/vim_complete.vim	/^function! neocomplcache#sources#vim_complete#define()"{{{$/;"	f
neocomplcache#sources#vim_complete#get_command	autoload/neocomplcache/sources/vim_complete.vim	/^function! neocomplcache#sources#vim_complete#get_command(cur_text)"{{{$/;"	f
neocomplcache#sources#vim_complete#get_cur_text	autoload/neocomplcache/sources/vim_complete.vim	/^function! neocomplcache#sources#vim_complete#get_cur_text()"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#augroup	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#augroup(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#autocmd_args	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#autocmd_args(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#buffer	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#buffer(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#colorscheme_args	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#colorscheme_args(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#command	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#command(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#command_args	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#command_args(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#custom	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#custom(command_name, cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#customlist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#customlist(command_name, cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#dir	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#dir(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#environment	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#environment(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#event	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#event(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#execute	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#execute(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#expand	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#expand(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#expression	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#expression(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#feature	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#feature(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#file	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#file(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#filetype	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#filetype(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#function	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#function(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#get_command_completion	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#get_command_completion(command_name, cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#get_completion_name	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#get_completion_name(command_name)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#help	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#help(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#highlight	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#highlight(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#let	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#let(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#mapping	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#mapping(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#menu	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#menu(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#on_filetype	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#on_filetype()"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#option	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#option(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#recaching	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#recaching(bufname)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#shellcmd	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#shellcmd(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#tag	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#tag(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#tag_listfiles	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#tag_listfiles(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#var	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#var(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#var_dictionary	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#var_dictionary(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources_manual_complete	autoload/neocomplcache.vim	/^function! neocomplcache#sources_manual_complete(findstart, base)"{{{$/;"	f
neocomplcache#start_manual_complete	autoload/neocomplcache.vim	/^function! neocomplcache#start_manual_complete(...)"{{{$/;"	f
neocomplcache#start_manual_complete_list	autoload/neocomplcache.vim	/^function! neocomplcache#start_manual_complete_list(cur_keyword_pos, cur_keyword_str, complete_words)"{{{$/;"	f
neocomplcache#system	autoload/neocomplcache.vim	/^function! neocomplcache#system(...)"{{{$/;"	f
neocomplcache#toggle_lock	autoload/neocomplcache.vim	/^function! neocomplcache#toggle_lock()"{{{$/;"	f
neocomplcache#trunk_string	autoload/neocomplcache.vim	/^function! neocomplcache#trunk_string(string, max)"{{{$/;"	f
neocomplcache#undo_completion	autoload/neocomplcache.vim	/^function! neocomplcache#undo_completion()"{{{$/;"	f
neocomplcache#unlock	autoload/neocomplcache.vim	/^function! neocomplcache#unlock(...)"{{{$/;"	f
neocomplcache#unlock_plugin	autoload/neocomplcache.vim	/^function! neocomplcache#unlock_plugin(plugin_name)"{{{$/;"	f
neocomplcache#unpack_dictionary	autoload/neocomplcache.vim	/^function! neocomplcache#unpack_dictionary(dict)"{{{$/;"	f
neocomplcache#util#expand	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#expand(path)"{{{$/;"	f
neocomplcache#util#get_last_status	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#get_last_status(...)"{{{$/;"	f
neocomplcache#util#glob	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#glob(pattern, ...)"{{{$/;"	f
neocomplcache#util#has_vimproc	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#has_vimproc(...)"{{{$/;"	f
neocomplcache#util#is_mac	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#is_mac(...)"{{{$/;"	f
neocomplcache#util#is_win	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#is_win(...)"{{{$/;"	f
neocomplcache#util#mb_strlen	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#mb_strlen(...)"{{{$/;"	f
neocomplcache#util#strchars	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#strchars(...)"{{{$/;"	f
neocomplcache#util#strwidthpart	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#strwidthpart(...)"{{{$/;"	f
neocomplcache#util#strwidthpart_reverse	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#strwidthpart_reverse(...)"{{{$/;"	f
neocomplcache#util#substitute_path_separator	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#substitute_path_separator(...)"{{{$/;"	f
neocomplcache#util#system	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#system(...)"{{{$/;"	f
neocomplcache#util#truncate	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#truncate(...)"{{{$/;"	f
neocomplcache#util#truncate_smart	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#truncate_smart(...)"{{{$/;"	f
neocomplcache#util#uniq	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#uniq(list)"{{{$/;"	f
neocomplcache#util#wcswidth	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#wcswidth(...)"{{{$/;"	f
neocomplcache#within_comment	autoload/neocomplcache.vim	/^function! neocomplcache#within_comment()"{{{$/;"	f
neocomplcache_source.gather_candidates	autoload/unite/sources/neocomplcache.vim	/^function! s:neocomplcache_source.gather_candidates(args, context) "{{{$/;"	f
neocomplcache_source.hooks.on_init	autoload/unite/sources/neocomplcache.vim	/^function! s:neocomplcache_source.hooks.on_init(args, context) "{{{$/;"	f
new	autoload/vital/_f9b384/data/ordered_set.vim	/^function! s:new(...) "{{{$/;"	f
nextBufferName	plugin/NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
omni#common#debug#End	autoload/omni/common/debug.vim	/^function! omni#common#debug#End()$/;"	f
omni#common#debug#Start	autoload/omni/common/debug.vim	/^function! omni#common#debug#Start()$/;"	f
omni#common#debug#Trace	autoload/omni/common/debug.vim	/^function! omni#common#debug#Trace(szFuncName, ...)$/;"	f
omni#common#utils#CompareNumber	autoload/omni/common/utils.vim	/^function! omni#common#utils#CompareNumber(i1, i2)$/;"	f
omni#common#utils#GetWordUnderCursor	autoload/omni/common/utils.vim	/^function! omni#common#utils#GetWordUnderCursor()$/;"	f
omni#common#utils#TagList	autoload/omni/common/utils.vim	/^function! omni#common#utils#TagList(szTagQuery)$/;"	f
omni#common#utils#TagListNoThrow	autoload/omni/common/utils.vim	/^function! omni#common#utils#TagListNoThrow(szTagQuery)$/;"	f
omni#cpp#complete#Init	autoload/omni/cpp/complete.vim	/^function! omni#cpp#complete#Init()$/;"	f
omni#cpp#complete#Main	autoload/omni/cpp/complete.vim	/^function! omni#cpp#complete#Main(findstart, base)$/;"	f
omni#cpp#includes#Display	autoload/omni/cpp/includes.vim	/^function! omni#cpp#includes#Display()$/;"	f
omni#cpp#includes#GetList	autoload/omni/cpp/includes.vim	/^function! omni#cpp#includes#GetList(...)$/;"	f
omni#cpp#items#Get	autoload/omni/cpp/items.vim	/^function! omni#cpp#items#Get(tokens, ...)$/;"	f
omni#cpp#items#ResolveItemsTypeInfo	autoload/omni/cpp/items.vim	/^function! omni#cpp#items#ResolveItemsTypeInfo(contextStack, items)$/;"	f
omni#cpp#maycomplete#Arrow	autoload/omni/cpp/maycomplete.vim	/^function! omni#cpp#maycomplete#Arrow()$/;"	f
omni#cpp#maycomplete#Complete	autoload/omni/cpp/maycomplete.vim	/^function! omni#cpp#maycomplete#Complete()$/;"	f
omni#cpp#maycomplete#Dot	autoload/omni/cpp/maycomplete.vim	/^function! omni#cpp#maycomplete#Dot()$/;"	f
omni#cpp#maycomplete#Scope	autoload/omni/cpp/maycomplete.vim	/^function! omni#cpp#maycomplete#Scope()$/;"	f
omni#cpp#namespaces#GetContexts	autoload/omni/cpp/namespaces.vim	/^function! omni#cpp#namespaces#GetContexts()$/;"	f
omni#cpp#namespaces#GetListFromCurrentBuffer	autoload/omni/cpp/namespaces.vim	/^function! omni#cpp#namespaces#GetListFromCurrentBuffer(...)$/;"	f
omni#cpp#namespaces#GetMapFromBuffer	autoload/omni/cpp/namespaces.vim	/^function! omni#cpp#namespaces#GetMapFromBuffer(szFilePath, ...)$/;"	f
omni#cpp#namespaces#GetMapFromCurrentBuffer	autoload/omni/cpp/namespaces.vim	/^function! omni#cpp#namespaces#GetMapFromCurrentBuffer()$/;"	f
omni#cpp#namespaces#GetUsingNamespaces	autoload/omni/cpp/namespaces.vim	/^function! omni#cpp#namespaces#GetUsingNamespaces()$/;"	f
omni#cpp#namespaces#ResolveAlias	autoload/omni/cpp/namespaces.vim	/^function! omni#cpp#namespaces#ResolveAlias(mapNamespaceAlias, szNamespace)$/;"	f
omni#cpp#namespaces#ResolveAll	autoload/omni/cpp/namespaces.vim	/^function! omni#cpp#namespaces#ResolveAll(namespacesUsed)$/;"	f
omni#cpp#settings#Init	autoload/omni/cpp/settings.vim	/^function! omni#cpp#settings#Init()$/;"	f
omni#cpp#tokenizer#Tokenize	autoload/omni/cpp/tokenizer.vim	/^function! omni#cpp#tokenizer#Tokenize(szCode)$/;"	f
omni#cpp#utils#BuildParenthesisGroups	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#BuildParenthesisGroups(tokens)$/;"	f
omni#cpp#utils#CreateTypeInfo	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#CreateTypeInfo(param)$/;"	f
omni#cpp#utils#ExtractCmdFromTagItem	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#ExtractCmdFromTagItem(tagItem)$/;"	f
omni#cpp#utils#ExtractScope	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#ExtractScope(tagItem)$/;"	f
omni#cpp#utils#ExtractTypeInfoFromTag	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#ExtractTypeInfoFromTag(tagItem)$/;"	f
omni#cpp#utils#ExtractTypeInfoFromTokens	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#ExtractTypeInfoFromTokens(tokens)$/;"	f
omni#cpp#utils#GetCastType	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetCastType(tokens)$/;"	f
omni#cpp#utils#GetClassInheritanceList	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetClassInheritanceList(namespaces, typeInfo)$/;"	f
omni#cpp#utils#GetCode	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetCode(posStart, posEnd)$/;"	f
omni#cpp#utils#GetCodeFromLine	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetCodeFromLine(szSingleLine)$/;"	f
omni#cpp#utils#GetPreviewWindowStringFromTagItem	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetPreviewWindowStringFromTagItem(tagItem)$/;"	f
omni#cpp#utils#GetResolvedTagItem	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetResolvedTagItem(namespaces, typeInfo)$/;"	f
omni#cpp#utils#GetResolvedTags	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetResolvedTags(namespaces, typeInfo)$/;"	f
omni#cpp#utils#GetTypeInfoString	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetTypeInfoString(typeInfo)$/;"	f
omni#cpp#utils#IsCursorInCommentOrString	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#IsCursorInCommentOrString()$/;"	f
omni#cpp#utils#IsTypeInfoValid	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#IsTypeInfoValid(typeInfo)$/;"	f
omni#cpp#utils#ResolveFilePath	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#ResolveFilePath(szFile)$/;"	f
omni#cpp#utils#SimplifyParenthesis	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#SimplifyParenthesis(tokens)$/;"	f
omni#cpp#utils#SimplifyScope	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#SimplifyScope(szScope)$/;"	f
omni#cpp#utils#TokenizeCurrentInstruction	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#TokenizeCurrentInstruction(...)$/;"	f
omni#cpp#utils#TokenizeCurrentInstructionUntilWord	autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#TokenizeCurrentInstructionUntilWord()$/;"	f
omni#cpp#utils#expIgnoreComments	autoload/omni/cpp/utils.vim	/^let omni#cpp#utils#expIgnoreComments = 'getline(".") =~ g:omni#cpp#utils#reIgnoreComment'$/;"	v
omni#cpp#utils#reIgnoreComment	autoload/omni/cpp/utils.vim	/^let omni#cpp#utils#reIgnoreComment = escape('\\\/\\\/\\|\\\/\\*\\|\\*\\\/', '*\/\\')$/;"	v
omni#cpp#utils#szEscapedCharacters	autoload/omni/cpp/utils.vim	/^let omni#cpp#utils#szEscapedCharacters = ' %#'$/;"	v
on_hold_i	autoload/neocomplcache.vim	/^function! s:on_hold_i()"{{{$/;"	f
on_insert_leave	autoload/neocomplcache.vim	/^function! s:on_insert_leave()"{{{$/;"	f
on_moved_i	autoload/neocomplcache.vim	/^function! s:on_moved_i()"{{{$/;"	f
open	autoload/vital/_f9b384/system/file.vim	/^function! s:open(filename) "{{{$/;"	f
openBookmark	plugin/NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	plugin/NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	plugin/NERD_tree.vim	/^function! s:openExplorer()$/;"	f
openInNewTab	plugin/NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	plugin/NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
options_chars2dict	autoload/vital/_f9b384/mapping.vim	/^function! s:options_chars2dict(chars)$/;"	f
options_chars2raw	autoload/vital/_f9b384/mapping.vim	/^function! s:options_chars2raw(chars)$/;"	f
options_dict2chars	autoload/vital/_f9b384/mapping.vim	/^function! s:options_dict2chars(dict)$/;"	f
options_dict2raw	autoload/vital/_f9b384/mapping.vim	/^function! s:options_dict2raw(dict)$/;"	f
ordered_set.clear	autoload/vital/_f9b384/data/ordered_set.vim	/^function! s:ordered_set.clear() "{{{$/;"	f
ordered_set.empty	autoload/vital/_f9b384/data/ordered_set.vim	/^function! s:ordered_set.empty() "{{{$/;"	f
ordered_set.has	autoload/vital/_f9b384/data/ordered_set.vim	/^function! s:ordered_set.has(elem) "{{{$/;"	f
ordered_set.has_id	autoload/vital/_f9b384/data/ordered_set.vim	/^function! s:ordered_set.has_id(id) "{{{$/;"	f
ordered_set.push	autoload/vital/_f9b384/data/ordered_set.vim	/^function s:ordered_set.push(elem) "{{{$/;"	f
ordered_set.remove	autoload/vital/_f9b384/data/ordered_set.vim	/^function! s:ordered_set.remove(elem) "{{{$/;"	f
ordered_set.size	autoload/vital/_f9b384/data/ordered_set.vim	/^function! s:ordered_set.size() "{{{$/;"	f
ordered_set.to_list	autoload/vital/_f9b384/data/ordered_set.vim	/^function! s:ordered_set.to_list() "{{{$/;"	f
ordered_set.unshift	autoload/vital/_f9b384/data/ordered_set.vim	/^function! s:ordered_set.unshift(elem) "{{{$/;"	f
output_keyword	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:output_keyword(name)"{{{$/;"	f
parse	autoload/vital/_f9b384/web/html.vim	/^function! s:parse(content)$/;"	f
parse	autoload/vital/_f9b384/web/xml.vim	/^function! s:parse(xml)$/;"	f
parseFile	autoload/vital/_f9b384/web/html.vim	/^function! s:parseFile(fname)$/;"	f
parseFile	autoload/vital/_f9b384/web/xml.vim	/^function! s:parseFile(fname)$/;"	f
parseURL	autoload/vital/_f9b384/web/html.vim	/^function! s:parseURL(url)$/;"	f
parseURL	autoload/vital/_f9b384/web/xml.vim	/^function! s:parseURL(url)$/;"	f
path2directory	autoload/vital/_f9b384/prelude.vim	/^function! s:path2directory(path)"{{{$/;"	f
path2project_directory	autoload/vital/_f9b384/prelude.vim	/^function! s:path2project_directory(path)"{{{$/;"	f
post	autoload/vital/_f9b384/web/http.vim	/^function! s:post(url, ...)$/;"	f
previewNode	plugin/NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
print_error	autoload/vital/_f9b384/prelude.vim	/^function! s:print_error(message)"{{{$/;"	f
print_opts	colors/marklar.vim	/^        function! s:print_opts(...)$/;"	f
print_source	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:print_source(name)"{{{$/;"	f
promptToDelBuffer	nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
promptToDelBuffer	plugin/NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
putCursorInTreeWin	plugin/NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	plugin/NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
pyindent_nested_paren	syntax/google_python_style.vim	/^let pyindent_nested_paren="&sw*2"$/;"	v
pyindent_open_paren	syntax/google_python_style.vim	/^let pyindent_open_paren="&sw*2"$/;"	v
python_highlight_all	colors/google.vim	/^let python_highlight_all = 1$/;"	v
python_highlight_builtin_funcs	syntax/python3.0.vim	/^      let python_highlight_builtin_funcs = 1$/;"	v
python_highlight_builtin_objs	syntax/python3.0.vim	/^      let python_highlight_builtin_objs = 1$/;"	v
python_highlight_doctests	syntax/python3.0.vim	/^    let python_highlight_doctests = 1$/;"	v
python_highlight_exceptions	syntax/python3.0.vim	/^    let python_highlight_exceptions = 1$/;"	v
python_highlight_indent_errors	syntax/python3.0.vim	/^    let python_highlight_indent_errors = 1$/;"	v
python_highlight_space_errors	syntax/python3.0.vim	/^    let python_highlight_space_errors = 1$/;"	v
python_highlight_string_format	syntax/python3.0.vim	/^    let python_highlight_string_format = 1$/;"	v
python_highlight_string_formatting	syntax/python3.0.vim	/^    let python_highlight_string_formatting = 1$/;"	v
python_highlight_string_templates	syntax/python3.0.vim	/^    let python_highlight_string_templates = 1$/;"	v
readfile	autoload/vital/_f9b384/system/cache.vim	/^function! s:readfile(cache_dir, filename)$/;"	f
recaching	autoload/neocomplcache/sources/dictionary_complete.vim	/^function! s:recaching(filetype)"{{{$/;"	f
recaching	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:recaching(filetype)"{{{$/;"	f
refreshCurrent	plugin/NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
refreshRoot	plugin/NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
remove_duplicates	after/ftplugin/pydiction.py	/^def remove_duplicates(seq, keep=()):$/;"	f	access:public
remove_last_separator	autoload/vital/_f9b384/system/filepath.vim	/^function! s:remove_last_separator(path)$/;"	f
remove_next_keyword	autoload/neocomplcache.vim	/^function! s:remove_next_keyword(plugin_name, list)"{{{$/;"	f
renderBookmarks	plugin/NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	plugin/NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	plugin/NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
replace	autoload/vital/_f9b384/data/string.vim	/^function! s:replace(str, from, to)$/;"	f
replace_once	autoload/vital/_f9b384/data/string.vim	/^function! s:replace_once(str, from, to)$/;"	f
restoreScreenState	plugin/NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
revealBookmark	plugin/NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
rgb	colors/desert256.vim	/^    fun <SID>rgb(rgb)$/;"	f
rgb	colors/jellybeans.vim	/^fun! s:rgb(rgb)$/;"	f
rgb	colors/summerfruit256.vim	/^    fun <SID>rgb(rgb)$/;"	f
rgb	colors/wombat256.vim	/^fun <SID>rgb(rgb)$/;"	f
rgb_color	colors/desert256.vim	/^    fun <SID>rgb_color(x, y, z)$/;"	f
rgb_color	colors/jellybeans.vim	/^fun! s:rgb_color(x, y, z)$/;"	f
rgb_color	colors/summerfruit256.vim	/^    fun <SID>rgb_color(x, y, z)$/;"	f
rgb_color	colors/wombat256.vim	/^fun <SID>rgb_color(x, y, z)$/;"	f
rgb_level	colors/desert256.vim	/^    fun <SID>rgb_level(n)$/;"	f
rgb_level	colors/jellybeans.vim	/^fun! s:rgb_level(n)$/;"	f
rgb_level	colors/summerfruit256.vim	/^    fun <SID>rgb_level(n)$/;"	f
rgb_level	colors/wombat256.vim	/^fun <SID>rgb_level(n)$/;"	f
rgb_number	colors/desert256.vim	/^    fun <SID>rgb_number(x)$/;"	f
rgb_number	colors/jellybeans.vim	/^fun! s:rgb_number(x)$/;"	f
rgb_number	colors/summerfruit256.vim	/^    fun <SID>rgb_number(x)$/;"	f
rgb_number	colors/wombat256.vim	/^fun <SID>rgb_number(x)$/;"	f
ruby_operators	colors/herald.vim	/^let ruby_operators = 1$/;"	v
s:Aluminium	colors/two2tango.vim	/^let s:Aluminium		= ['#eeeeec', '#d3d7cf', '#babdb6',$/;"	v
s:Attribute	plugin/c.vim	/^let s:Attribute                = { 'below':'', 'above':'', 'start':'', 'append':'', 'insert':'' }$/;"	v
s:Background	colors/two2tango.vim	/^let s:Background    = '#212628'$/;"	v
s:BoldStatement	colors/tabula.vim	/^  let s:BoldStatement = g:Tabula_BoldStatement$/;"	v
s:BoldStatement	colors/tabula.vim	/^let s:BoldStatement = 0$/;"	v
s:Bookmark	plugin/NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:Butter	colors/two2tango.vim	/^let s:Butter		= ['#fce94f', '#edd400', '#c4a000']$/;"	v
s:CACHE_DEBUG_TRACE	autoload/omni/common/debug.vim	/^let s:CACHE_DEBUG_TRACE = []$/;"	v
s:CACHE_OVERLOADED_FUNCTIONS	autoload/omni/cpp/complete.vim	/^let s:CACHE_OVERLOADED_FUNCTIONS = {}$/;"	v
s:CACHE_TAG_ENV	autoload/omni/cpp/complete.vim	/^let s:CACHE_TAG_ENV = ''$/;"	v
s:CACHE_TAG_FILES	autoload/omni/cpp/complete.vim	/^let s:CACHE_TAG_FILES = {}$/;"	v
s:CACHE_TAG_POPUP_ITEMS	autoload/omni/cpp/complete.vim	/^let s:CACHE_TAG_POPUP_ITEMS = {}$/;"	v
s:CFileSection	plugin/c.vim	/^let s:CFileSection	= { $/;"	v
s:C_ActualStyle	plugin/c.vim	/^let s:C_ActualStyle					= 'default'$/;"	v
s:C_ActualStyleLast	plugin/c.vim	/^let s:C_ActualStyleLast			= s:C_ActualStyle$/;"	v
s:C_Attribute	plugin/c.vim	/^let s:C_Attribute              = {}$/;"	v
s:C_C99Libs	plugin/c.vim	/^let s:C_C99Libs       = [$/;"	v
s:C_C99LibsClean	plugin/c.vim	/^let	s:C_C99LibsClean					= C_CleanDirNameList( s:C_C99Libs )$/;"	v
s:C_CComment	plugin/c.vim	/^let s:C_CComment         = '\\\/\\*.\\{-}\\*\\\/\\s*'		" C comment with trailing whitespaces$/;"	v
s:C_CCompiler	plugin/c.vim	/^	let s:C_CCompiler           = 'gcc'      " the C   compiler$/;"	v
s:C_CCompiler	plugin/c.vim	/^	let s:C_CCompiler           = 'gcc.exe'  " the C   compiler$/;"	v
s:C_CExtension	plugin/c.vim	/^let s:C_CExtension     				= 'c'                    " C file extension; everything else is C++$/;"	v
s:C_CFlags	plugin/c.vim	/^let s:C_CFlags         				= '-Wall -g -O0 -c'      " compiler flags: compile, don't optimize$/;"	v
s:C_CodeCheckExeName	plugin/c.vim	/^let s:C_CodeCheckExeName      = 'check'$/;"	v
s:C_CodeCheckIsExecutable	plugin/c.vim	/^	let s:C_CodeCheckIsExecutable	= 1$/;"	v
s:C_CodeCheckIsExecutable	plugin/c.vim	/^let s:C_CodeCheckIsExecutable	= 0$/;"	v
s:C_CodeCheckOptions	plugin/c.vim	/^let s:C_CodeCheckOptions      = '-K13'$/;"	v
s:C_CodeSnippets	plugin/c.vim	/^let s:C_CodeSnippets  				= s:plugin_dir.'\/c-support\/codesnippets\/'$/;"	v
s:C_Com1	plugin/c.vim	/^let s:C_Com1          				 = '\/*'     " C-style : comment start$/;"	v
s:C_Com2	plugin/c.vim	/^let s:C_Com2          				 = '*\/'     " C-style : comment end$/;"	v
s:C_CplusCompiler	plugin/c.vim	/^	let s:C_CplusCompiler       = 'g++'      " the C++ compiler$/;"	v
s:C_CplusCompiler	plugin/c.vim	/^	let s:C_CplusCompiler       = 'g++.exe'  " the C++ compiler$/;"	v
s:C_CppComment	plugin/c.vim	/^let s:C_CppComment       = '\\\/\\\/.*$'						" C++ comment$/;"	v
s:C_CreateMenusDelayed	plugin/c.vim	/^let s:C_CreateMenusDelayed     = 'no'$/;"	v
s:C_Ctrl_j	plugin/c.vim	/^let s:C_Ctrl_j								= 'on'$/;"	v
s:C_DocBufferName	plugin/c.vim	/^let s:C_DocBufferName       = "C_HELP"$/;"	v
s:C_DocHelpBufferNumber	plugin/c.vim	/^let s:C_DocHelpBufferNumber = -1$/;"	v
s:C_ExeExtension	plugin/c.vim	/^	let s:C_ExeExtension        = ''         " file extension for executables (leading point required)$/;"	v
s:C_ExeExtension	plugin/c.vim	/^	let s:C_ExeExtension        = '.exe'     " file extension for executables (leading point required)$/;"	v
s:C_ExpansionCounter	plugin/c.vim	/^let s:C_ExpansionCounter       = {}$/;"	v
s:C_ExpansionLimit	plugin/c.vim	/^let s:C_ExpansionLimit         = 10$/;"	v
s:C_ExpansionRegex	plugin/c.vim	/^let s:C_ExpansionRegex				 = '|?'.s:C_MacroNameRegex.'\\(:\\a\\)\\?|'$/;"	v
s:C_FileVisited	plugin/c.vim	/^let s:C_FileVisited            = []$/;"	v
s:C_FilenameEscChar	plugin/c.vim	/^  let s:C_FilenameEscChar 			= ' \\%#[]'$/;"	v
s:C_FilenameEscChar	plugin/c.vim	/^  let s:C_FilenameEscChar 			= ''$/;"	v
s:C_FilenameEscChar	plugin/c.vim	/^let s:C_FilenameEscChar 		= ''$/;"	v
s:C_ForTypes	plugin/c.vim	/^let s:C_ForTypes     = [$/;"	v
s:C_ForTypes_Check_Order	plugin/c.vim	/^let s:C_ForTypes_Check_Order     = [$/;"	v
s:C_FormatDate	plugin/c.vim	/^let s:C_FormatDate						= '%x'$/;"	v
s:C_FormatTime	plugin/c.vim	/^let s:C_FormatTime						= '%X'$/;"	v
s:C_FormatYear	plugin/c.vim	/^let s:C_FormatYear						= '%Y'$/;"	v
s:C_GlobalTemplateDir	plugin/c.vim	/^		let s:C_GlobalTemplateDir		= s:plugin_dir.'\/c-support\/templates'$/;"	v
s:C_GlobalTemplateDir	plugin/c.vim	/^	let s:C_GlobalTemplateDir	= fnamemodify( s:C_GlobalTemplateFile, ":h" )$/;"	v
s:C_GlobalTemplateDir	plugin/c.vim	/^let s:C_GlobalTemplateDir		= ''$/;"	v
s:C_GlobalTemplateFile	plugin/c.vim	/^		let s:C_GlobalTemplateFile  = s:C_GlobalTemplateDir.'\/Templates'$/;"	v
s:C_GlobalTemplateFile	plugin/c.vim	/^let s:C_GlobalTemplateFile	= ''$/;"	v
s:C_GuiSnippetBrowser	plugin/c.vim	/^let s:C_GuiSnippetBrowser     = 'gui'										" gui \/ commandline$/;"	v
s:C_GuiTemplateBrowser	plugin/c.vim	/^let s:C_GuiTemplateBrowser    = 'gui'										" gui \/ explorer \/ commandline$/;"	v
s:C_HlMessage	plugin/c.vim	/^let s:C_HlMessage    = ""$/;"	v
s:C_If0_Counter	plugin/c.vim	/^let s:C_If0_Counter   = 0$/;"	v
s:C_If0_Txt	plugin/c.vim	/^let s:C_If0_Txt		 		= "If0Label_"$/;"	v
s:C_IndentErrorLog	plugin/c.vim	/^let s:C_IndentErrorLog				= $HOME.'\/.indent.errorlog'$/;"	v
s:C_LFlags	plugin/c.vim	/^let s:C_LFlags         				= '-Wall -g -O0'         " compiler flags: link   , don't optimize$/;"	v
s:C_Libs	plugin/c.vim	/^let s:C_Libs           				= '-lm'                  " libraries to use$/;"	v
s:C_LineEndCommColDefault	plugin/c.vim	/^let s:C_LineEndCommColDefault = 49$/;"	v
s:C_LoadMenus	plugin/c.vim	/^let s:C_LoadMenus      				= 'yes'$/;"	v
s:C_LocalTemplateDir	plugin/c.vim	/^		let s:C_LocalTemplateDir		= fnamemodify( s:C_LocalTemplateFile, ":p:h" ).'\/'$/;"	v
s:C_LocalTemplateDir	plugin/c.vim	/^let s:C_LocalTemplateDir		= ''$/;"	v
s:C_LocalTemplateFile	plugin/c.vim	/^		let s:C_LocalTemplateFile		= $HOME.'\/.vim\/c-support\/templates\/Templates'$/;"	v
s:C_LocalTemplateFile	plugin/c.vim	/^		let s:C_LocalTemplateFile		= $HOME.'\/vimfiles\/c-support\/templates\/Templates'$/;"	v
s:C_LocalTemplateFile	plugin/c.vim	/^		let s:C_LocalTemplateFile		= s:plugin_dir.'\/c-support\/templates\/Templates'$/;"	v
s:C_LocalTemplateFile	plugin/c.vim	/^let s:C_LocalTemplateFile		= ''$/;"	v
s:C_Macro	plugin/c.vim	/^let s:C_Macro                  = {'|AUTHOR|'         : 'first name surname',$/;"	v
s:C_MacroCommentRegex	plugin/c.vim	/^let s:C_MacroCommentRegex			 = '^\\$'$/;"	v
s:C_MacroFlag	plugin/c.vim	/^let	s:C_MacroFlag								= {	':l' : 'lowercase'			,$/;"	v
s:C_MacroLineRegex	plugin/c.vim	/^let s:C_MacroLineRegex				 = '^\\s*|'.s:C_MacroNameRegex.'|\\s*=\\s*\\(.*\\)'$/;"	v
s:C_MacroNameRegex	plugin/c.vim	/^let s:C_MacroNameRegex         = '\\([a-zA-Z][a-zA-Z0-9_]*\\)'$/;"	v
s:C_MakeCmdLineArgs	plugin/c.vim	/^let s:C_MakeCmdLineArgs   	= ''   " command line arguments for Run-make; initially empty$/;"	v
s:C_MakeExecutableToRun	plugin/c.vim	/^let s:C_MakeExecutableToRun	= ''$/;"	v
s:C_Makefile	plugin/c.vim	/^let s:C_Makefile						= ''$/;"	v
s:C_Man	plugin/c.vim	/^	let s:C_Man                 = 'man'      " the manual program$/;"	v
s:C_Man	plugin/c.vim	/^	let s:C_Man                 = 'man.exe'  " the manual program$/;"	v
s:C_MenuHeader	plugin/c.vim	/^let s:C_MenuHeader     				= 'yes'$/;"	v
s:C_MenusVisible	plugin/c.vim	/^let s:C_MenusVisible = 'no'								" state variable controlling the C-menus$/;"	v
s:C_NonExpansionRegex	plugin/c.vim	/^let s:C_NonExpansionRegex			 = '|'.s:C_MacroNameRegex.'\\(:\\a\\)\\?|'$/;"	v
s:C_ObjExtension	plugin/c.vim	/^	let s:C_ObjExtension        = '.o'       " file extension for objects (leading point required)$/;"	v
s:C_ObjExtension	plugin/c.vim	/^	let s:C_ObjExtension        = '.obj'     " file extension for objects (leading point required)$/;"	v
s:C_OutputBufferName	plugin/c.vim	/^let s:C_OutputBufferName   = "C-Output"$/;"	v
s:C_OutputBufferNumber	plugin/c.vim	/^let s:C_OutputBufferNumber = -1$/;"	v
s:C_OutputGvim	plugin/c.vim	/^let s:C_OutputGvim            = 'vim'$/;"	v
s:C_Printheader	plugin/c.vim	/^let s:C_Printheader           = "%<%f%h%m%<  %=%{strftime('%x %X')}     Page %N"$/;"	v
s:C_Printheader	plugin/c.vim	/^let s:C_Printheader  = escape( s:C_Printheader, ' %' )$/;"	v
s:C_Prototype	plugin/c.vim	/^let s:C_Prototype        = []$/;"	v
s:C_PrototypeCounter	plugin/c.vim	/^let s:C_PrototypeCounter = 0$/;"	v
s:C_PrototypeShow	plugin/c.vim	/^let s:C_PrototypeShow    = []$/;"	v
s:C_Root	plugin/c.vim	/^let s:C_Root  	       				= '&C\\\/C\\+\\+.'           " the name of the root menu of this plugin$/;"	v
s:C_RunMsg1	plugin/c.vim	/^let s:C_RunMsg1						 ="' does not exist or is not executable or object\/source older then executable"$/;"	v
s:C_RunMsg2	plugin/c.vim	/^let s:C_RunMsg2						 ="' does not exist or is not executable"$/;"	v
s:C_SourceCodeExtensions	plugin/c.vim	/^let s:C_SourceCodeExtensions  = 'c cc cp cxx cpp CPP c++ C i ii'$/;"	v
s:C_SourceCodeExtensionsList	plugin/c.vim	/^let s:C_SourceCodeExtensionsList	= split( s:C_SourceCodeExtensions, '\\s\\+' )$/;"	v
s:C_SplintIsExecutable	plugin/c.vim	/^	let s:C_SplintIsExecutable	= 1$/;"	v
s:C_SplintIsExecutable	plugin/c.vim	/^let s:C_SplintIsExecutable	= 0$/;"	v
s:C_StandardLibs	plugin/c.vim	/^let s:C_StandardLibs       = [$/;"	v
s:C_StandardLibsClean	plugin/c.vim	/^let	s:C_StandardLibsClean			= C_CleanDirNameList( s:C_StandardLibs )$/;"	v
s:C_StartMultilineComment	plugin/c.vim	/^let s:C_StartMultilineComment	= '^\\s*\\\/\\*[\\*! ]\\='$/;"	v
s:C_TJT	plugin/c.vim	/^let s:C_TJT										 = '[ 0-9a-zA-Z_]*'$/;"	v
s:C_Template	plugin/c.vim	/^let s:C_Template            = { 'default' : {} }$/;"	v
s:C_TemplateEndif	plugin/c.vim	/^let s:C_TemplateEndif					 = '^==\\s*ENDIF\\s*=='$/;"	v
s:C_TemplateIf	plugin/c.vim	/^let s:C_TemplateIf						 = '^==\\s*IF\\s\\+|STYLE|\\s\\+IS\\s\\+'.s:C_MacroNameRegex.'\\s*=='$/;"	v
s:C_TemplateJumpTarget1	plugin/c.vim	/^let s:C_TemplateJumpTarget1    = '<+'.s:C_TJT.'+>\\|{+'.s:C_TJT.'+}'$/;"	v
s:C_TemplateJumpTarget2	plugin/c.vim	/^let s:C_TemplateJumpTarget2    = '<-'.s:C_TJT.'->\\|{-'.s:C_TJT.'-}'$/;"	v
s:C_TemplateLineRegex	plugin/c.vim	/^let s:C_TemplateLineRegex			 = '^==\\s*\\([a-zA-Z][0-9a-zA-Z'.s:C_TemplateNameDelimiter$/;"	v
s:C_TemplateLineRegex	plugin/c.vim	/^let s:C_TemplateLineRegex			.= ']\\+\\)\\s*==\\s*\\([a-z]\\+\\s*==\\)\\?'$/;"	v
s:C_TemplateNameDelimiter	plugin/c.vim	/^let s:C_TemplateNameDelimiter  = '-+_,\\. '$/;"	v
s:C_TemplateOverriddenMsg	plugin/c.vim	/^let s:C_TemplateOverriddenMsg = 'no'$/;"	v
s:C_TemplatesLoaded	plugin/c.vim	/^let s:C_TemplatesLoaded			= 'no'$/;"	v
s:C_TypeOfH	plugin/c.vim	/^let s:C_TypeOfH               = 'cpp'$/;"	v
s:C_VimCompilerName	plugin/c.vim	/^let s:C_VimCompilerName				= 'gcc'      " the compiler name used by :compiler$/;"	v
s:C_Wrapper	plugin/c.vim	/^let s:C_Wrapper               = s:plugin_dir.'\/c-support\/scripts\/wrapper.sh'$/;"	v
s:C_XtermDefaults	plugin/c.vim	/^	let s:C_XtermDefaults	= s:C_XtermDefaults." -geometry 80x24"$/;"	v
s:C_XtermDefaults	plugin/c.vim	/^let s:C_XtermDefaults         = '-fa courier -fs 12 -geometry 80x24'$/;"	v
s:Cache	autoload/neocomplcache/cache.vim	/^let s:Cache = vital#of('neocomplcache').import('System.Cache')$/;"	v
s:Chameleon	colors/two2tango.vim	/^let s:Chameleon		= ['#8ae234', '#73d216', '#4e9a06']$/;"	v
s:Chocolate	colors/two2tango.vim	/^let s:Chocolate		= ['#e9b96e', '#c17d11', '#8f5902']$/;"	v
s:ColorPre	colors/tabula.vim	/^    let s:ColorPre = g:Tabula_ColorPre$/;"	v
s:ColorPre	colors/tabula.vim	/^let s:ColorPre = "blue"$/;"	v
s:Cpp_CStandardLibs	plugin/c.vim	/^let s:Cpp_CStandardLibs       = [$/;"	v
s:Cpp_CStandardLibsClean	plugin/c.vim	/^let	s:Cpp_CStandardLibsClean	= C_CleanDirNameList( s:Cpp_CStandardLibs )$/;"	v
s:Cpp_IosFlagBits	plugin/c.vim	/^let s:Cpp_IosFlagBits       = [$/;"	v
s:Cpp_StandardLibs	plugin/c.vim	/^let s:Cpp_StandardLibs       = [$/;"	v
s:Cpp_StandardLibsClean	plugin/c.vim	/^let	s:Cpp_StandardLibsClean		= C_CleanDirNameList( s:Cpp_StandardLibs )$/;"	v
s:CurColor	colors/tabula.vim	/^  let s:CurColor = g:Tabula_CurColor$/;"	v
s:CurColor	colors/tabula.vim	/^let s:CurColor = "blue"$/;"	v
s:DarkError	colors/tabula.vim	/^  let s:DarkError = g:Tabula_DarkError$/;"	v
s:DarkError	colors/tabula.vim	/^let s:DarkError = 0$/;"	v
s:FlatConstants	colors/tabula.vim	/^  let s:FlatConstants = g:Tabula_FlatConstants$/;"	v
s:FlatConstants	colors/tabula.vim	/^let s:FlatConstants = 1$/;"	v
s:HFileSection	plugin/c.vim	/^let s:HFileSection	= { $/;"	v
s:InvisibleIgnore	colors/tabula.vim	/^  let s:InvisibleIgnore = g:Tabula_InvisibleIgnore$/;"	v
s:InvisibleIgnore	colors/tabula.vim	/^let s:InvisibleIgnore = 1$/;"	v
s:KeyMap	plugin/NERD_tree.vim	/^let s:KeyMap = {}$/;"	v
s:KeywordComment	plugin/c.vim	/^let s:KeywordComment	= { $/;"	v
s:LNumUnderline	colors/tabula.vim	/^  let s:LNumUnderline = g:Tabula_LNumUnderline$/;"	v
s:LNumUnderline	colors/tabula.vim	/^let s:LNumUnderline = 0$/;"	v
s:LastShellReturnCode	plugin/c.vim	/^let s:LastShellReturnCode	= 0			" for compile \/ link \/ run only$/;"	v
s:MRU_Exclude_List	plugin/bufexplorer.vim	/^let s:MRU_Exclude_List = ["[BufExplorer]","__MRU_Files__"]$/;"	v
s:MSWIN	plugin/c.vim	/^let s:MSWIN = has("win16") || has("win32")   || has("win64")    || has("win95")$/;"	v
s:MenuController	plugin/NERD_tree.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	plugin/NERD_tree.vim	/^let s:MenuItem = {}$/;"	v
s:MenuRun	plugin/c.vim	/^let s:MenuRun         = s:C_Root.'&Run'$/;"	v
s:MsgInsNotAvail	plugin/c.vim	/^let s:MsgInsNotAvail	= "insertion not available for a fold" $/;"	v
s:NERDTreeBufName	plugin/NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	plugin/NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	plugin/NERD_tree.vim	/^let s:NERD_tree_version = '4.2.0'$/;"	v
s:OmniCpp_ShowAccess	autoload/omni/cpp/complete.vim	/^let s:OmniCpp_ShowAccess = g:OmniCpp_ShowAccess$/;"	v
s:OmniCpp_ShowPrototypeInAbbr	autoload/omni/cpp/complete.vim	/^let s:OmniCpp_ShowPrototypeInAbbr = g:OmniCpp_ShowPrototypeInAbbr$/;"	v
s:OmniCpp_ShowScopeInAbbr	autoload/omni/cpp/complete.vim	/^let s:OmniCpp_ShowScopeInAbbr = g:OmniCpp_ShowScopeInAbbr$/;"	v
s:Orange	colors/two2tango.vim	/^let s:Orange		= ['#fcaf3e', '#f57900', '#ce5c00']$/;"	v
s:Path	plugin/NERD_tree.vim	/^let s:Path = {}$/;"	v
s:Plum	colors/two2tango.vim	/^let s:Plum			= ['#ad7fa8', '#75507b', '#5c3566']$/;"	v
s:ScarletRed	colors/two2tango.vim	/^let s:ScarletRed	= ['#ef2929', '#cc0000', '#a40000']$/;"	v
s:SearchStandOut	colors/tabula.vim	/^  let s:SearchStandOut = g:Tabula_SearchStandOut$/;"	v
s:SearchStandOut	colors/tabula.vim	/^let s:SearchStandOut=0$/;"	v
s:SkyBlue	colors/two2tango.vim	/^let s:SkyBlue		= ['#729fcf', '#3465a4', '#204a87']$/;"	v
s:SpecialComment	plugin/c.vim	/^let s:SpecialComment	= { $/;"	v
s:TYPE_DICT	autoload/vital/_f9b384/functor.vim	/^let s:TYPE_DICT    = type({})$/;"	v
s:TYPE_FUNCREF	autoload/vital/_f9b384/functor.vim	/^let s:TYPE_FUNCREF = type(function('tr'))$/;"	v
s:TYPE_STRING	autoload/vital/_f9b384/functor.vim	/^let s:TYPE_STRING  = type("")$/;"	v
s:Tlist_Skip_Refresh	plugin/taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
s:TodoUnderline	colors/tabula.vim	/^  let s:TodoUnderline = g:Tabula_TodoUnderline$/;"	v
s:TodoUnderline	colors/tabula.vim	/^let s:TodoUnderline=1$/;"	v
s:TreeDirNode	plugin/NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	plugin/NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:UNIX	plugin/c.vim	/^let s:UNIX	= has("unix")  || has("macunix") || has("win32unix")$/;"	v
s:V	autoload/neocomplcache/util.vim	/^let s:V = vital#of('neocomplcache')$/;"	v
s:V	autoload/vital/_f9b384/data/string.vim	/^let s:V = vital#{expand('<sfile>:h:h:t:r')}#new()$/;"	v
s:__template	autoload/vital/_f9b384/web/xml.vim	/^let s:__template = { 'name': '', 'attr': {}, 'child': [] }$/;"	v
s:action_table	autoload/unite/sources/snippet.vim	/^let s:action_table = {}$/;"	v
s:action_table	autoload/unite/sources/snippet.vim	/^let s:action_table.expand = {$/;"	v
s:action_table	autoload/unite/sources/snippet.vim	/^let s:action_table.preview = {$/;"	v
s:bMayComplete	autoload/omni/cpp/complete.vim	/^let s:bMayComplete = 0$/;"	v
s:base_dir	autoload/vital/_f9b384.vim	/^let s:base_dir = expand('<sfile>:r')$/;"	v
s:begin_snippet	autoload/neocomplcache/sources/snippets_complete.vim	/^let s:begin_snippet = 0$/;"	v
s:beige	colors/twilight.vim	/^let s:beige = '#ceb67f'$/;"	v
s:black	colors/astronaut.vim	/^ let s:black   = "black"$/;"	v
s:black	colors/xterm16.vim	/^let s:black		= exists("g:black") ? g:black :		    '#000000'$/;"	v
s:blue	colors/astronaut.vim	/^ let s:blue    = "blue"$/;"	v
s:blue	colors/astronaut.vim	/^ let s:blue    = "darkblue"$/;"	v
s:blue	colors/xterm16.vim	/^let s:blue		= exists("g:blue") ? g:blue :		    '#0080FF'$/;"	v
s:bold	colors/astronaut.vim	/^ let s:bold=""$/;"	v
s:bold	colors/astronaut.vim	/^ let s:bold=",bold"$/;"	v
s:bold_opt	colors/marklar.vim	/^    let s:bold_opt = 0$/;"	v
s:buffer_sources	autoload/neocomplcache/sources/buffer_complete.vim	/^  let s:buffer_sources = {}$/;"	v
s:c_cppcomment	plugin/c.vim	/^let	s:c_cppcomment= '\\(\\\/\\*.\\{-}\\*\\\/\\|\\\/\\\/.*$\\)'$/;"	v
s:cached_files	autoload/neocomplcache/sources/filename_complete.vim	/^let s:cached_files = {}$/;"	v
s:clickmap	plugin/minibufexpl.vim	/^  let s:clickmap = ':if bufname("%") == "-MiniBufExplorer-" <bar> call <SID>MBEClick() <bar> endif <CR>'$/;"	v
s:cmap	colors/calmar256-dark.vim	/^    let s:cmap =   [ $/;"	v
s:cmap	colors/calmar256-light.vim	/^    let s:cmap =   [ $/;"	v
s:col	colors/calmar256-dark.vim	/^            let s:col[i] = "NONE"$/;"	v
s:col	colors/calmar256-light.vim	/^            let s:col[i] = "NONE"$/;"	v
s:colors256	colors/calmar256-dark.vim	/^let s:colors256 = [$/;"	v
s:colors256	colors/calmar256-light.vim	/^let s:colors256 = [$/;"	v
s:colorvim7	colors/calmar256-dark.vim	/^let s:colorvim7 = [$/;"	v
s:colorvim7	colors/calmar256-light.vim	/^let s:colorvim7 = [$/;"	v
s:cpo_save	plugin/grep.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugin/mru.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugin/taglist.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugin/yankring.vim	/^let s:cpo_save = &cpo$/;"	v
s:cppKeyword	autoload/omni/cpp/tokenizer.vim	/^let s:cppKeyword = ['asm', 'auto', 'bool', 'break', 'case', 'catch', 'char', 'class', 'const', 'const_cast', 'continue', 'default', 'delete', 'do', 'double', 'dynamic_cast', 'else', 'enum', 'explicit', 'export', 'extern', 'false', 'float', 'for', 'friend', 'goto', 'if', 'inline', 'int', 'long', 'mutable', 'namespace', 'new', 'operator', 'private', 'protected', 'public', 'register', 'reinterpret_cast', 'return', 'short', 'signed', 'sizeof', 'static', 'static_cast', 'struct', 'switch', 'template', 'this', 'throw', 'true', 'try', 'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using', 'virtual', 'void', 'volatile', 'wchar_t', 'while', 'and', 'and_eq', 'bitand', 'bitor', 'compl', 'not', 'not_eq', 'or', 'or_eq', 'xor', 'xor_eq']$/;"	v
s:cppOperatorPunctuator	autoload/omni/cpp/tokenizer.vim	/^let s:cppOperatorPunctuator = ['->*', '->', '--', '-=', '-', '!=', '!', '##', '#', '%:%:', '%=', '%>', '%:', '%', '&&', '&=', '&', '(', ')', '*=', '*', ',', '...', '.*', '.', '\/=', '\/', '::', ':>', ':', ';', '?', '[', ']', '^=', '^', '{', '||', '|=', '|', '}', '~', '++', '+=', '+', '<<=', '<%', '<:', '<<', '<=', '<', '==', '=', '>>=', '>>', '>=', '>']$/;"	v
s:cyan	colors/astronaut.vim	/^ let s:cyan    = "cyan"$/;"	v
s:cyan	colors/astronaut.vim	/^ let s:cyan    = "darkcyan"$/;"	v
s:cyan	colors/twilight.vim	/^let s:cyan = '#74dad9'$/;"	v
s:cyan	colors/xterm16.vim	/^let s:cyan		= exists("g:cyan") ? g:cyan :		    '#00FFFF'$/;"	v
s:dark_grey_blue	colors/twilight.vim	/^let s:dark_grey_blue = '#34383c'$/;"	v
s:darkblue	colors/xterm16.vim	/^let s:darkblue		= exists("g:darkblue") ? g:darkblue : 	    '#0000FF'$/;"	v
s:darkcyan	colors/xterm16.vim	/^let s:darkcyan		= exists("g:darkcyan") ? g:darkcyan :	    '#00CDCD'$/;"	v
s:darkgreen	colors/xterm16.vim	/^let s:darkgreen		= exists("g:darkgreen") ? g:darkgreen :	    '#00CD00'$/;"	v
s:darkgrey	colors/twilight.vim	/^let s:darkgrey = '#1a1a1a'$/;"	v
s:darkgrey	colors/xterm16.vim	/^let s:darkgrey		= exists("g:darkgrey") ? g:darkgrey :	    '#808080'$/;"	v
s:darkmagenta	colors/xterm16.vim	/^let s:darkmagenta	= exists("g:darkmagenta") ? g:darkmagenta : '#CD00CD'$/;"	v
s:darkred	colors/xterm16.vim	/^let s:darkred		= exists("g:darkred") ? g:darkred :	    '#CD0000'$/;"	v
s:darkyellow	colors/xterm16.vim	/^let s:darkyellow	= exists("g:darkyellow") ? g:darkyellow :   '#CDCD00'$/;"	v
s:debugIndex	plugin/minibufexpl.vim	/^let s:debugIndex = 0 $/;"	v
s:did_snip_helper	ftplugin/html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:did_snips_mappings	after/plugin/snipMate.vim	/^let s:did_snips_mappings = 1$/;"	v
s:doc_dict	autoload/neocomplcache/sources/include_complete.vim	/^let s:doc_dict = {$/;"	v
s:doc_dict	autoload/neocomplcache/sources/snippets_complete.vim	/^let s:doc_dict = {$/;"	v
s:doc_dict	autoload/neocomplcache/sources/vim_complete/helper.vim	/^let s:doc_dict = {$/;"	v
s:end_snippet	autoload/neocomplcache/sources/snippets_complete.vim	/^let s:end_snippet = 0$/;"	v
s:esc_filename_chars	plugin/mru.vim	/^let s:esc_filename_chars = ' *?[{`$%#"|!<>();&' . "'\\t\\n"$/;"	v
s:escape_chars	plugin/NERD_tree.vim	/^    let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>[]"$/;"	v
s:escape_chars	plugin/NERD_tree.vim	/^    let s:escape_chars =  " `\\|\\"#%&,?()\\*^<>"$/;"	v
s:exists_md5	autoload/vital/_f9b384/system/cache.vim	/^  let s:exists_md5 = 0$/;"	v
s:exists_md5	autoload/vital/_f9b384/system/cache.vim	/^  let s:exists_md5 = 1$/;"	v
s:exists_vimproc	autoload/neocomplcache.vim	/^  let s:exists_vimproc = 0$/;"	v
s:exists_vimproc	autoload/neocomplcache.vim	/^  let s:exists_vimproc = 1$/;"	v
s:exists_vimproc	autoload/vital/_f9b384/prelude.vim	/^let s:exists_vimproc = globpath(&rtp, 'autoload\/vimproc.vim') != ''$/;"	v
s:function_return_types	autoload/neocomplcache/sources/vim_complete/helper.vim	/^let s:function_return_types = {}$/;"	v
s:global_candidates_list	autoload/neocomplcache/sources/vim_complete/helper.vim	/^  let s:global_candidates_list = { 'dictionary_variables' : {} }$/;"	v
s:green	colors/astronaut.vim	/^ let s:green   = "darkgreen"$/;"	v
s:green	colors/astronaut.vim	/^ let s:green   = "green"$/;"	v
s:green	colors/twilight.vim	/^let s:green = '#a2a96f'$/;"	v
s:green	colors/xterm16.vim	/^let s:green		= exists("g:green") ? g:green :		    '#00FF00'$/;"	v
s:grey	colors/twilight.vim	/^let s:grey = '#303030'$/;"	v
s:grey	colors/xterm16.vim	/^let s:grey		= exists("g:grey") ? g:grey :		    '#C0C0C0'$/;"	v
s:grey_blue	colors/twilight.vim	/^let s:grey_blue = '#8a9597'$/;"	v
s:hasPreviewWindow	autoload/omni/cpp/complete.vim	/^let s:hasPreviewWindow = match(&completeopt, 'preview')>=0$/;"	v
s:hasPreviewWindowOld	autoload/omni/cpp/complete.vim	/^let s:hasPreviewWindowOld = s:hasPreviewWindow$/;"	v
s:http	autoload/vital/_f9b384/web/html.vim	/^let s:http = V.import('Web.Http')$/;"	v
s:ignore_opt	colors/marklar.vim	/^    let s:ignore_opt = 1$/;"	v
s:include_info	autoload/neocomplcache/sources/include_complete.vim	/^let s:include_info = {}$/;"	v
s:installation	ftplugin/c.vim	/^	let s:installation						= 'system'$/;"	v
s:installation	ftplugin/c.vim	/^let s:installation				= 'local'$/;"	v
s:installation	plugin/c.vim	/^		let s:installation					= 'local'$/;"	v
s:installation	plugin/c.vim	/^		let s:installation					= 'system'$/;"	v
s:installation	plugin/c.vim	/^let s:installation					= '*undefined*'$/;"	v
s:internal_candidates_list	autoload/neocomplcache/sources/vim_complete/helper.vim	/^  let s:internal_candidates_list = {}$/;"	v
s:is_case_tolerant	autoload/vital/_f9b384/system/filepath.vim	/^let s:is_case_tolerant = s:is_windows || s:is_cygwin || s:is_mac$/;"	v
s:is_cygwin	autoload/vital/_f9b384/prelude.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_cygwin	autoload/vital/_f9b384/system/cache.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_cygwin	autoload/vital/_f9b384/system/file.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_cygwin	autoload/vital/_f9b384/system/filepath.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_enabled	autoload/neocomplcache.vim	/^  let s:is_enabled = 0$/;"	v
s:is_mac	autoload/vital/_f9b384/prelude.vim	/^let s:is_mac = !s:is_windows && (has('mac') || has('macunix') || has('gui_macvim') || system('uname') =~? '^darwin')$/;"	v
s:is_mac	autoload/vital/_f9b384/system/cache.vim	/^let s:is_mac = !s:is_windows &&$/;"	v
s:is_mac	autoload/vital/_f9b384/system/file.vim	/^let s:is_mac = !s:is_windows && (has('mac') || has('macunix') || has('gui_macvim') || system('uname') =~? '^darwin')$/;"	v
s:is_mac	autoload/vital/_f9b384/system/filepath.vim	/^let s:is_mac = !s:is_windows && (has('mac') || has('macunix') || has('gui_macvim') || system('uname') =~? '^darwin')$/;"	v
s:is_windows	autoload/vital/_f9b384/prelude.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64')$/;"	v
s:is_windows	autoload/vital/_f9b384/system/cache.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64')$/;"	v
s:is_windows	autoload/vital/_f9b384/system/file.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64')$/;"	v
s:is_windows	autoload/vital/_f9b384/system/filepath.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64')$/;"	v
s:italic	colors/astronaut.vim	/^ let s:italic= ""$/;"	v
s:italic	colors/astronaut.vim	/^ let s:italic= ",italic"$/;"	v
s:keepcpo	plugin/LargeFile.vim	/^let s:keepcpo          = &cpo$/;"	v
s:light_grey_blue	colors/twilight.vim	/^let s:light_grey_blue = '#a0a8b0'$/;"	v
s:light_orange	colors/twilight.vim	/^let s:light_orange = '#ebc471'$/;"	v
s:lightgreen	colors/twilight.vim	/^let s:lightgreen = '#c2c98f'$/;"	v
s:lightgrey	colors/twilight.vim	/^let s:lightgrey = '#605958'$/;"	v
s:loaded	autoload/vital/_f9b384.vim	/^let s:loaded = {}$/;"	v
s:local_candidates_list	autoload/neocomplcache/sources/vim_complete/helper.vim	/^  let s:local_candidates_list = {}$/;"	v
s:low_color	colors/jellybeans.vim	/^	let s:low_color = 0$/;"	v
s:low_color	colors/jellybeans.vim	/^	let s:low_color = 1$/;"	v
s:m	plugin/minibufexpl.vim	/^    let  s:m = ':nnoremap <silent> <LEFTMOUSE> <LEFTMOUSE>'$/;"	v
s:m	plugin/minibufexpl.vim	/^    let  s:m = s:m . s:clickmap$/;"	v
s:m	plugin/minibufexpl.vim	/^    let  s:m = s:m . substitute(substitute(maparg('<LEFTMOUSE>', 'n'), '|', '<bar>', 'g'), '\\c^<LEFTMOUSE>', '', '')$/;"	v
s:magenta	colors/astronaut.vim	/^ let s:magenta = "darkmagenta"$/;"	v
s:magenta	colors/astronaut.vim	/^ let s:magenta = "magenta"$/;"	v
s:magenta	colors/xterm16.vim	/^let s:magenta		= exists("g:magenta") ? g:magenta :	    '#FF00FF'$/;"	v
s:maxDotsInExtension	plugin/a.vim	/^let s:maxDotsInExtension = 1$/;"	v
s:maxTabWidth	plugin/minibufexpl.vim	/^let s:maxTabWidth = 0 $/;"	v
s:maxdelay	plugin/matrix.vim	/^let s:maxdelay = 5$/;"	v
s:maxoff	syntax/google_python_style.vim	/^let s:maxoff = 50 " maximum number of lines to look backwards.$/;"	v
s:member_sources	autoload/neocomplcache/sources/member_complete.vim	/^  let s:member_sources = {}$/;"	v
s:menu_char_prefix	plugin/taglist.vim	/^let s:menu_char_prefix =$/;"	v
s:mid_grey_blue	colors/twilight.vim	/^let s:mid_grey_blue = '#64686c'$/;"	v
s:mindelay	plugin/matrix.vim	/^let s:mindelay = 1$/;"	v
s:molokai_original	colors/molokai.vim	/^    let s:molokai_original = 0$/;"	v
s:molokai_original	colors/molokai.vim	/^    let s:molokai_original = g:molokai_original$/;"	v
s:moria_fontface	colors/moria.vim	/^    let s:moria_fontface = "plain"$/;"	v
s:moria_fontface	colors/moria.vim	/^    let s:moria_fontface = g:moria_fontface$/;"	v
s:moria_monochrome	colors/moria.vim	/^    let s:moria_monochrome = 0$/;"	v
s:moria_monochrome	colors/moria.vim	/^    let s:moria_monochrome = g:moria_monochrome$/;"	v
s:moria_style	colors/moria.vim	/^    let s:moria_style = &background $/;"	v
s:moria_style	colors/moria.vim	/^    let s:moria_style = &background$/;"	v
s:moria_style	colors/moria.vim	/^    let s:moria_style = g:moria_style$/;"	v
s:mru_list_locked	plugin/mru.vim	/^let s:mru_list_locked = 0$/;"	v
s:name	plugin/bufexplorer.vim	/^let s:name = '[BufExplorer]'$/;"	v
s:neocomplcache_source	autoload/unite/sources/neocomplcache.vim	/^let s:neocomplcache_source = {$/;"	v
s:next_buffer_number	plugin/NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:none	colors/xterm16.vim	/^let s:none		= 'NONE'$/;"	v
s:old_cpo	plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:opts	colors/marklar.vim	/^        let s:opts = {'bold': 0, 'ignore': 1}$/;"	v
s:ordered_set	autoload/vital/_f9b384/data/ordered_set.vim	/^let s:ordered_set = {$/;"	v
s:originBuffer	plugin/bufexplorer.vim	/^let s:originBuffer = 0$/;"	v
s:path_sep_pattern	autoload/vital/_f9b384/system/filepath.vim	/^let s:path_sep_pattern = (exists('+shellslash') ? '[\\\\\/]' : '\/') . '\\+'$/;"	v
s:plugin_dir	plugin/c.vim	/^		let s:plugin_dir						= $VIM.'\/vimfiles'$/;"	v
s:plugin_dir	plugin/c.vim	/^		let s:plugin_dir 						= expand('<sfile>:p:h:h')$/;"	v
s:plugin_dir	plugin/c.vim	/^		let s:plugin_dir  					= substitute( expand('<sfile>:p:h:h'), '\\', '\/', 'g' )$/;"	v
s:plugin_dir	plugin/c.vim	/^let s:plugin_dir						= ''$/;"	v
s:popupItemResultList	autoload/omni/cpp/complete.vim	/^let s:popupItemResultList = []$/;"	v
s:reCComment	autoload/omni/cpp/tokenizer.vim	/^let s:reCComment = '\\\/\\*\\|\\*\\\/'$/;"	v
s:reComment	autoload/omni/cpp/tokenizer.vim	/^let s:reComment = s:reCComment.'\\|'.s:reCppComment$/;"	v
s:reCppComment	autoload/omni/cpp/tokenizer.vim	/^let s:reCppComment = '\\\/\\\/'$/;"	v
s:reCppKeyword	autoload/omni/cpp/tokenizer.vim	/^let s:reCppKeyword = '\\C\\<'.join(s:cppKeyword, '\\>\\|\\<').'\\>'$/;"	v
s:reCppOperatorOrPunctuator	autoload/omni/cpp/tokenizer.vim	/^let s:reCppOperatorOrPunctuator = escape(join(s:cppOperatorPunctuator, '\\|'), '*.\/^~[]')$/;"	v
s:reIncludeFilePart	autoload/omni/cpp/includes.vim	/^let s:reIncludeFilePart = '\\(<\\|"\\)\\(\\f\\|\\s\\)\\+\\(>\\|"\\)'$/;"	v
s:rePreprocIncludeFile	autoload/omni/cpp/includes.vim	/^let s:rePreprocIncludeFile = s:rePreprocIncludePart . s:reIncludeFilePart$/;"	v
s:rePreprocIncludePart	autoload/omni/cpp/includes.vim	/^let s:rePreprocIncludePart = '\\C#\\s*include\\s*'$/;"	v
s:red	colors/astronaut.vim	/^ let s:red     = "darkred"$/;"	v
s:red	colors/astronaut.vim	/^ let s:red     = "red"$/;"	v
s:red	colors/twilight.vim	/^let s:red = '#d08356'$/;"	v
s:red	colors/xterm16.vim	/^let s:red		= exists("g:red") ? g:red :		    '#FF0000'$/;"	v
s:refreshBufferList	plugin/bufexplorer.vim	/^let s:refreshBufferList = 1$/;"	v
s:running	plugin/bufexplorer.vim	/^let s:running = 0$/;"	v
s:running_windows	plugin/NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:save_cpo	autoload/neocomplcache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/async_cache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/cache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/sources/abbrev_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/sources/buffer_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/sources/completefunc_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/sources/dictionary_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/sources/filename_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/sources/include_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/sources/keyword_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/sources/member_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/sources/omni_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/sources/snippets_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/sources/syntax_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/sources/tags_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/sources/vim_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/sources/vim_complete/helper.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/neocomplcache/util.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/unite/sources/file_include.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/unite/sources/neocomplcache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/unite/sources/snippet.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/vital/_f9b384/data/list.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/vital/_f9b384/data/ordered_set.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/vital/_f9b384/data/string.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/vital/_f9b384/functor.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/vital/_f9b384/mapping.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/vital/_f9b384/system/cache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/vital/_f9b384/system/file.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/vital/_f9b384/system/filepath.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/vital/_f9b384/web/html.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/vital/_f9b384/web/http.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/vital/_f9b384/web/json.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/vital/_f9b384/web/xml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	colors/calmar256-dark.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	colors/calmar256-light.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/snippet.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	indent/snippet.vim	/^let s:save_cpo = &cpo$/;"	v
s:script_candidates_list	autoload/neocomplcache/sources/vim_complete/helper.vim	/^  let s:script_candidates_list = {}$/;"	v
s:sdir	autoload/neocomplcache/cache.vim	/^let s:sdir = fnamemodify(expand('<sfile>'), ':p:h')$/;"	v
s:self_version	autoload/vital/_f9b384.vim	/^let s:self_version = expand('<sfile>:t:r')$/;"	v
s:session_file	plugin/matrix.vim	/^let s:session_file = tempname()$/;"	v
s:sienna_style	colors/sienna.vim	/^    let s:sienna_style = 'light'$/;"	v
s:sienna_style	colors/sienna.vim	/^    let s:sienna_style = g:sienna_style$/;"	v
s:snippets	autoload/neocomplcache/sources/snippets_complete.vim	/^  let s:snippets = {}$/;"	v
s:snippets	plugin/snipMate.vim	/^let s:snippets = {} | let s:multi_snips = {}$/;"	v
s:sort_by	plugin/bufexplorer.vim	/^let s:sort_by = ["number", "name", "fullpath", "mru", "extension"]$/;"	v
s:source	autoload/neocomplcache/sources/abbrev_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/buffer_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/completefunc_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/dictionary_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/filename_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/include_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/keyword_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/member_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/omni_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/snippets_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/syntax_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/tags_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/vim_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/unite/sources/file_include.vim	/^let s:source = {$/;"	v
s:source	autoload/unite/sources/snippet.vim	/^let s:source = {$/;"	v
s:source	autoload/unite/sources/snippet.vim	/^let s:source.action_table['*'] = s:action_table$/;"	v
s:splitMode	plugin/bufexplorer.vim	/^let s:splitMode = ""$/;"	v
s:style	plugin/c.vim	/^let	s:style			= 'default'$/;"	v
s:szCurrentWorkingDir	autoload/omni/cpp/complete.vim	/^let s:szCurrentWorkingDir = getcwd()$/;"	v
s:tlist_app_name	plugin/taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	plugin/taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_cur_file_idx	plugin/taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_debug	plugin/taglist.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	plugin/taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
s:tlist_def_asm_settings	plugin/taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	plugin/taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	plugin/taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	plugin/taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	plugin/taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_c_settings	plugin/taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_cobol_settings	plugin/taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_cpp_settings	plugin/taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_cs_settings	plugin/taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_csh_settings	plugin/taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_eiffel_settings	plugin/taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	plugin/taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	plugin/taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	plugin/taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	plugin/taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_java_settings	plugin/taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_javascript_settings	plugin/taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
s:tlist_def_lisp_settings	plugin/taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	plugin/taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	plugin/taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	plugin/taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	plugin/taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	plugin/taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	plugin/taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	plugin/taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	plugin/taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	plugin/taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	plugin/taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	plugin/taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	plugin/taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	plugin/taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	plugin/taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	plugin/taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	plugin/taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	plugin/taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	plugin/taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_def_zsh_settings	plugin/taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_file_count	plugin/taglist.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_file_lnum_idx_cache	plugin/taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
s:tlist_file_name_idx_cache	plugin/taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
s:tlist_file_names	plugin/taglist.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_ftype_count	plugin/taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_menu_empty	plugin/taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:tlist_msg	plugin/taglist.vim	/^    let s:tlist_msg = ''$/;"	v
s:tlist_removed_flist	plugin/taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_sid	plugin/taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
s:tlist_win_maximized	plugin/taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:tlist_winsize_chgd	plugin/taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:tree_markup_reg	plugin/NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~▾▸ ]\\+'$/;"	v
s:tree_up_dir_line	plugin/NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_up_dir_line	syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	plugin/NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
s:types	plugin/bufexplorer.vim	/^let s:types = {"fullname": ':p', "path": ':p:h', "relativename": ':~:.', "relativepath": ':~:.:h', "shortname": ':t'}$/;"	v
s:ulbg	colors/astronaut.vim	/^  let s:ulbg     = "ctermbg=darkmagenta guibg=magenta4"$/;"	v
s:ulbg	colors/astronaut.vim	/^  let s:ulbg     = "ctermbg=magenta guibg=magenta"$/;"	v
s:ulbg	colors/astronaut.vim	/^ let s:ulbg     = ""$/;"	v
s:underline	colors/astronaut.vim	/^ let s:underline= ",underline"$/;"	v
s:underline	colors/astronaut.vim	/^ let s:underline= "none"$/;"	v
s:utils	autoload/vital/_f9b384/web/html.vim	/^let s:utils = V.import('Web.Utils')$/;"	v
s:utils	autoload/vital/_f9b384/web/http.vim	/^let s:utils = V.import('Web.Utils')$/;"	v
s:utils	autoload/vital/_f9b384/web/json.vim	/^let s:utils = V.import('Web.Utils')$/;"	v
s:utils	autoload/vital/_f9b384/web/xml.vim	/^let s:utils = V.import('Web.Utils')$/;"	v
s:violet	colors/twilight.vim	/^let s:violet = '#a999ac'$/;"	v
s:white	colors/astronaut.vim	/^ let s:white   = "white"$/;"	v
s:white	colors/twilight.vim	/^let s:white = '#fffedc'$/;"	v
s:white	colors/xterm16.vim	/^let s:white		= exists("g:white") ? g:white :		    '#FFFFFF'$/;"	v
s:xml	autoload/vital/_f9b384/web/html.vim	/^let s:xml = V.import('Web.Xml')$/;"	v
s:yellow	colors/astronaut.vim	/^ let s:yellow  = "darkyellow"$/;"	v
s:yellow	colors/astronaut.vim	/^ let s:yellow  = "yellow"$/;"	v
s:yellow	colors/twilight.vim	/^let s:yellow = '#e3d796'$/;"	v
s:yellow	colors/xterm16.vim	/^let s:yellow		= exists("g:yellow") ? g:yellow :	    '#FFFF00'$/;"	v
s:yr_buffer_id	plugin/yankring.vim	/^let s:yr_buffer_id         = -1$/;"	v
s:yr_buffer_last	plugin/yankring.vim	/^let s:yr_buffer_last       = -1$/;"	v
s:yr_buffer_last_winnr	plugin/yankring.vim	/^let s:yr_buffer_last_winnr = -1$/;"	v
s:yr_buffer_name	plugin/yankring.vim	/^let s:yr_buffer_name       = '[YankRing]'$/;"	v
s:yr_has_voperator	plugin/yankring.vim	/^    let s:yr_has_voperator = 1$/;"	v
s:yr_has_voperator	plugin/yankring.vim	/^let s:yr_has_voperator     = 0$/;"	v
s:yr_history_file_v1	plugin/yankring.vim	/^let s:yr_history_file_v1   =$/;"	v
s:yr_history_file_v2	plugin/yankring.vim	/^let s:yr_history_file_v2   =$/;"	v
s:yr_history_last_upd	plugin/yankring.vim	/^let s:yr_history_last_upd  = 0$/;"	v
s:yr_history_v1_nl	plugin/yankring.vim	/^let s:yr_history_v1_nl     = '@@@'$/;"	v
s:yr_history_v1_nl_pat	plugin/yankring.vim	/^let s:yr_history_v1_nl_pat = '\\%(\\\\\\)\\@<!@@@'$/;"	v
s:yr_history_v2_nl	plugin/yankring.vim	/^let s:yr_history_v2_nl     = "\\2" " Use double quotes for a special character$/;"	v
s:yr_history_v2_nl_pat	plugin/yankring.vim	/^let s:yr_history_v2_nl_pat = "\\2"$/;"	v
s:yr_history_version	plugin/yankring.vim	/^let s:yr_history_version   = 'v2'$/;"	v
s:yr_last_motion	plugin/yankring.vim	/^let s:yr_last_motion       = ''$/;"	v
s:yr_maps_created	plugin/yankring.vim	/^let s:yr_maps_created      = 0$/;"	v
s:yr_maps_created_zap	plugin/yankring.vim	/^let s:yr_maps_created_zap  = 0$/;"	v
s:yr_remove_omap_dot	plugin/yankring.vim	/^let s:yr_remove_omap_dot   = 0$/;"	v
s:yr_search	plugin/yankring.vim	/^let s:yr_search            = ''$/;"	v
s:yr_winsize_chgd	plugin/yankring.vim	/^let s:yr_winsize_chgd      = 0$/;"	v
save	ftplugin/c.vim	/^  let save=&dictionary$/;"	v
saveScreenState	plugin/NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
save_all_cache	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:save_all_cache()"{{{$/;"	f
save_cache	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:save_cache(srcname)"{{{$/;"	f
save_cpo	colors/candycode.vim	/^let save_cpo = &cpo$/;"	v
scan	autoload/vital/_f9b384/data/string.vim	/^function! s:scan(str, pattern)$/;"	f
search_outof_range	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:search_outof_range(col)"{{{$/;"	f
search_snippet_range	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:search_snippet_range(start, end)"{{{$/;"	f
search_sync_placeholder	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:search_sync_placeholder(start, end, number)"{{{$/;"	f
separator	autoload/vital/_f9b384/system/filepath.vim	/^function! s:separator()$/;"	f
setCommonBufOptions	plugin/NERD_tree.vim	/^function! s:setCommonBufOptions()$/;"	f
set_auto_completion_length	autoload/neocomplcache.vim	/^function! s:set_auto_completion_length(len)"{{{$/;"	f
set_complete_results_words	autoload/neocomplcache.vim	/^function! s:set_complete_results_words(complete_results)"{{{$/;"	f
set_context_filetype	autoload/neocomplcache.vim	/^function! s:set_context_filetype()"{{{$/;"	f
set_default	autoload/vital/_f9b384/prelude.vim	/^function! s:set_default(var, val)  "{{{$/;"	f
set_dictionary_helper	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:set_dictionary_helper(variable, keys, value)"{{{$/;"	f
set_dictionary_helper	autoload/vital/_f9b384/prelude.vim	/^function! s:set_dictionary_helper(variable, keys, pattern)"{{{$/;"	f
set_snippet_dict	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:set_snippet_dict(snippet_pattern, snippet_dict, dup_check, snippets_file)"{{{$/;"	f
set_snippet_pattern	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:set_snippet_pattern(dict)"{{{$/;"	f
setupStatusline	plugin/NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
showMenu	plugin/NERD_tree.vim	/^function! s:showMenu()$/;"	f
smart_execute_command	autoload/vital/_f9b384/prelude.vim	/^function! s:smart_execute_command(action, word)"{{{$/;"	f
snipMate#expandSnip	autoload/snipMate.vim	/^fun snipMate#expandSnip(snip, col)$/;"	f
snipMate#jumpTabStop	autoload/snipMate.vim	/^fun snipMate#jumpTabStop(backwards)$/;"	f
snippets_dir	plugin/snipMate.vim	/^	let snippets_dir = substitute(globpath(&rtp, 'snippets\/'), "\\n", ',', 'g')$/;"	v
snippets_expand_or_jump	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:snippets_expand_or_jump(cur_text, col)"{{{$/;"	f
snippets_force_expand	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:snippets_force_expand(cur_text, col)"{{{$/;"	f
snippets_force_jump	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:snippets_force_jump(cur_text, col)"{{{$/;"	f
snippets_jump_or_expand	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:snippets_jump_or_expand(cur_text, col)"{{{$/;"	f
sort	autoload/vital/_f9b384/data/list.vim	/^function! s:sort(list, expr)$/;"	f
sort_by	autoload/vital/_f9b384/data/list.vim	/^function! s:sort_by(list, expr)$/;"	f
source.finalize	autoload/neocomplcache/sources/abbrev_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/completefunc_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/dictionary_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/filename_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/include_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/keyword_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/omni_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/tags_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/vim_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.gather_candidates	autoload/unite/sources/file_include.vim	/^function! s:source.gather_candidates(args, context)"{{{$/;"	f
source.gather_candidates	autoload/unite/sources/snippet.vim	/^function! s:source.gather_candidates(args, context) "{{{$/;"	f
source.get_complete_words	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str)"{{{$/;"	f
source.get_complete_words	autoload/neocomplcache/sources/completefunc_complete.vim	/^function! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str)"{{{$/;"	f
source.get_complete_words	autoload/neocomplcache/sources/filename_complete.vim	/^function! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str)"{{{$/;"	f
source.get_complete_words	autoload/neocomplcache/sources/keyword_complete.vim	/^function! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str)"{{{$/;"	f
source.get_complete_words	autoload/neocomplcache/sources/member_complete.vim	/^function! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str)"{{{$/;"	f
source.get_complete_words	autoload/neocomplcache/sources/omni_complete.vim	/^function! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str)"{{{$/;"	f
source.get_complete_words	autoload/neocomplcache/sources/vim_complete.vim	/^function! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str)"{{{$/;"	f
source.get_keyword_list	autoload/neocomplcache/sources/abbrev_complete.vim	/^function! s:source.get_keyword_list(cur_keyword_str)"{{{$/;"	f
source.get_keyword_list	autoload/neocomplcache/sources/dictionary_complete.vim	/^function! s:source.get_keyword_list(cur_keyword_str)"{{{$/;"	f
source.get_keyword_list	autoload/neocomplcache/sources/include_complete.vim	/^function! s:source.get_keyword_list(cur_keyword_str)"{{{$/;"	f
source.get_keyword_list	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:source.get_keyword_list(cur_keyword_str)"{{{$/;"	f
source.get_keyword_list	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:source.get_keyword_list(cur_keyword_str)"{{{$/;"	f
source.get_keyword_list	autoload/neocomplcache/sources/tags_complete.vim	/^function! s:source.get_keyword_list(cur_keyword_str)"{{{$/;"	f
source.get_keyword_pos	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:source.get_keyword_pos(cur_text)"{{{$/;"	f
source.get_keyword_pos	autoload/neocomplcache/sources/completefunc_complete.vim	/^function! s:source.get_keyword_pos(cur_text)"{{{$/;"	f
source.get_keyword_pos	autoload/neocomplcache/sources/filename_complete.vim	/^function! s:source.get_keyword_pos(cur_text)"{{{$/;"	f
source.get_keyword_pos	autoload/neocomplcache/sources/keyword_complete.vim	/^function! s:source.get_keyword_pos(cur_text)"{{{$/;"	f
source.get_keyword_pos	autoload/neocomplcache/sources/member_complete.vim	/^function! s:source.get_keyword_pos(cur_text)"{{{$/;"	f
source.get_keyword_pos	autoload/neocomplcache/sources/omni_complete.vim	/^function! s:source.get_keyword_pos(cur_text)"{{{$/;"	f
source.get_keyword_pos	autoload/neocomplcache/sources/vim_complete.vim	/^function! s:source.get_keyword_pos(cur_text)"{{{$/;"	f
source.hooks.on_init	autoload/unite/sources/file_include.vim	/^function! s:source.hooks.on_init(args, context)"{{{$/;"	f
source.hooks.on_init	autoload/unite/sources/snippet.vim	/^function! s:source.hooks.on_init(args, context) "{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/abbrev_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/completefunc_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/dictionary_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/filename_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/include_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/keyword_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/member_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/omni_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/tags_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/vim_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
span	autoload/vital/_f9b384/data/list.vim	/^function! s:span(f, xs)$/;"	f
split	autoload/vital/_f9b384/system/filepath.vim	/^function! s:split(path)$/;"	f
split_args	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:split_args(cur_text, cur_keyword_str)"{{{$/;"	f
split_leftright	autoload/vital/_f9b384/data/string.vim	/^function! s:split_leftright(haystack, needle)$/;"	f
split_pattern	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:split_pattern(keyword_pattern)"{{{$/;"	f
start_complete	autoload/unite/sources/neocomplcache.vim	/^function! s:start_complete(is_quick_match)$/;"	f
strchars	autoload/neocomplcache/async_cache.vim	/^function! s:strchars(str)"{{{$/;"	f
strchars	autoload/vital/_f9b384/data/string.vim	/^    function! s:strchars(str)$/;"	f
strchars	autoload/vital/_f9b384/prelude.vim	/^function! s:strchars(str)"{{{$/;"	f
stripMarkupFromLine	plugin/NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
strwidthpart	autoload/neocomplcache/async_cache.vim	/^function! s:strwidthpart(str, width)"{{{$/;"	f
strwidthpart	autoload/vital/_f9b384/prelude.vim	/^function! s:strwidthpart(str, width)"{{{$/;"	f
strwidthpart_reverse	autoload/neocomplcache/async_cache.vim	/^function! s:strwidthpart_reverse(str, width)"{{{$/;"	f
strwidthpart_reverse	autoload/vital/_f9b384/prelude.vim	/^function! s:strwidthpart_reverse(str, width)"{{{$/;"	f
substitute_candidate	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:substitute_candidate(candidate)"{{{$/;"	f
substitute_marker	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:substitute_marker(start, end)"{{{$/;"	f
substitute_path_separator	autoload/vital/_f9b384/prelude.vim	/^function! s:substitute_path_separator(path)"{{{$/;"	f
system	autoload/vital/_f9b384/prelude.vim	/^function! s:system(str, ...)"{{{$/;"	f
tabpagevar	plugin/NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
toggle	plugin/NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	plugin/NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	plugin/NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	plugin/NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	plugin/NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
toggleZoom	plugin/NERD_tree.vim	/^function! s:toggleZoom()$/;"	f
treeExistsForBuf	plugin/NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	plugin/NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
trigger	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:trigger(function)"{{{$/;"	f
truncate	autoload/neocomplcache/async_cache.vim	/^function! s:truncate(str, width)"{{{$/;"	f
truncate	autoload/vital/_f9b384/prelude.vim	/^function! s:truncate(str, width)"{{{$/;"	f
truncate_smart	autoload/vital/_f9b384/prelude.vim	/^function! s:truncate_smart(str, max, footer_width, separator)"{{{$/;"	f
unify_separator	autoload/vital/_f9b384/system/filepath.vim	/^function! s:unify_separator(path)$/;"	f
uniq	autoload/vital/_f9b384/data/list.vim	/^function! s:uniq(list, ...)$/;"	f
unique	plugin/NERD_tree.vim	/^function! s:unique(list)$/;"	f
unite#sources#file_include#define	autoload/unite/sources/file_include.vim	/^function! unite#sources#file_include#define()$/;"	f
unite#sources#neocomplcache#define	autoload/unite/sources/neocomplcache.vim	/^function! unite#sources#neocomplcache#define() "{{{$/;"	f
unite#sources#neocomplcache#start_complete	autoload/unite/sources/neocomplcache.vim	/^function! unite#sources#neocomplcache#start_complete() "{{{$/;"	f
unite#sources#neocomplcache#start_quick_match	autoload/unite/sources/neocomplcache.vim	/^function! unite#sources#neocomplcache#start_quick_match() "{{{$/;"	f
unite#sources#snippet#define	autoload/unite/sources/snippet.vim	/^function! unite#sources#snippet#define() "{{{$/;"	f
unite#sources#snippet#start_complete	autoload/unite/sources/snippet.vim	/^function! unite#sources#snippet#start_complete() "{{{$/;"	f
unite_patterns	autoload/neocomplcache.vim	/^function! s:unite_patterns(pattern_var, filetype)"{{{$/;"	f
upDir	plugin/NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
version	autoload/vital/_f9b384/data/ordered_set.vim	/^function! s:version() "{{{$/;"	f
vital#	autoload/vital/_f9b384.vim	/^function! vital#{s:self_version}#new()$/;"	f
vital#of	autoload/vital.vim	/^function! vital#of(name)$/;"	f
wcswidth	autoload/neocomplcache/async_cache.vim	/^  function! s:wcswidth(str)"{{{$/;"	f
wcswidth	autoload/vital/_f9b384/prelude.vim	/^  function! s:wcswidth(str)"{{{$/;"	f
wcwidth	autoload/neocomplcache/async_cache.vim	/^  function! s:wcwidth(str)"{{{$/;"	f
wcwidth	autoload/neocomplcache/async_cache.vim	/^  function! s:wcwidth(ucs)"{{{$/;"	f
word_caching	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:word_caching(srcname)"{{{$/;"	f
wrap	autoload/vital/_f9b384/data/string.vim	/^function! s:wrap(str)$/;"	f
wrap	autoload/vital/_f9b384/functor.vim	/^function! s:wrap(callable)$/;"	f
write_dictionary	after/ftplugin/pydiction.py	/^def write_dictionary(module_name):$/;"	f	access:public
write_to	after/ftplugin/pydiction.py	/^        write_to = open(PYDICTION_DICT, 'a')$/;"	v
write_to	after/ftplugin/pydiction.py	/^        write_to = sys.stdout$/;"	v
writefile	autoload/vital/_f9b384/system/cache.vim	/^function! s:writefile(cache_dir, filename, list)$/;"	f
{<CR>	ftplugin/c.vim	/^inoremap  <buffer>  {<CR>    {<CR>}<Esc>O$/;"	m
{<CR>	ftplugin/c.vim	/^vnoremap  <buffer>  {<CR>   S{<CR>}<Esc>Pk=iB$/;"	m
